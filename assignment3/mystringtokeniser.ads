with Ada.Characters.Latin_1;
package MyStringTokeniser with SPARK_Mode is
   type TokenExtent is record
      Start : Positive;
      Length : Natural;
   end record;

   type TokenArray is array(Positive range <>) of TokenExtent;

   function Is_Whitespace(Ch : Character) return Boolean is
     (Ch = ' ' or Ch = Ada.Characters.Latin_1.LF or
        Ch = Ada.Characters.Latin_1.HT);

   procedure Tokenise(S : in String; Tokens : in out TokenArray; Count : out Natural) with
     Pre => (if S'Length > 0 then S'First <= S'Last) and Tokens'First <= Tokens'Last,
     Post => Count <= Tokens'Length and
     (for all Index in Tokens'First..Tokens'First+(Count-1) =>
          (Tokens(Index).Start >= S'First and
          Tokens(Index).Length > 0) and then
            Tokens(Index).Length-1 <= S'Last - Tokens(Index).Start);

-- Task one part one:
-- Count <= Tokens'Length Explaination:
-- Tokens'Length is the final value of Count(the number of tokens can be generated by the given string)
-- Therefore, the process quantity(Count) should be less than the result quantity(Tokens'Length)

-- Tokens(Index).Start >= S'First and Tokens(Index).Length > 0 Explaination:
-- The start index of token should be larger or equal to the starting index of the string(1).
-- Moreover, The length of the token should be larger than 0.(at least contains one character)

-- Tokens(Index).Length-1 <= S'Last - Tokens(Index).Start Explanation:
-- The length of the token should be smaller or equal to the length of string.

end MyStringTokeniser;
