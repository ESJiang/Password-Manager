(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_short_integer =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content : short_short_integer }
 
 function short_short_integer__ref_short_short_integer__content__projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref_short_short_integer__content__projection
 
 meta "inline:no" function short_short_integer__ref_short_short_integer__content__projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer as Standard__short_short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type short_integer =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content : short_integer }
 
 function short_integer__ref_short_integer__content__projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref_short_integer__content__projection
 
 meta "inline:no" function short_integer__ref_short_integer__content__projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer as Standard__short_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content : long_integer }
 
 function long_integer__ref_long_integer__content__projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref_long_integer__content__projection
 
 meta "inline:no" function long_integer__ref_long_integer__content__projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer as Standard__long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content : long_long_integer }
 
 function long_long_integer__ref_long_long_integer__content__projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref_long_long_integer__content__projection
 
 meta "inline:no" function long_long_integer__ref_long_long_integer__content__projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer as Standard__long_long_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type natural =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content : natural }
 
 function natural__ref_natural__content__projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref_natural__content__projection
 
 meta "inline:no" function natural__ref_natural__content__projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural as Standard__natural
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive as Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type short_float 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content : short_float }
 
 function short_float__ref_short_float__content__projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref_short_float__content__projection
 
 meta "inline:no" function short_float__ref_short_float__content__projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float as Standard__short_float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32

 type float__ 
 
 val constant first 
   : Float32.t
  ensures { result =  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t)) }
 
 val constant last 
   : Float32.t
  ensures { result =  (340282346638528859811704183484516925440.0:Float32.t) }
 
 predicate in_range 
   (x : Float32.t) =
  (Float32.t'isFinite x)
 val in_range 
   (x : Float32.t) : bool
  ensures { result <-> in_range (x : Float32.t) }
 
 clone export "ada__model".Static_Float32 with axiom .,
 type t = float__, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float____ref =
  { mutable float____content : float__ }
 
 function float____ref_float____content__projection 
   (a : float____ref) : float__ =
  a.float____content
 
 meta "model_projection" function float____ref_float____content__projection
 
 meta "inline:no" function float____ref_float____content__projection
 
 val float____havoc 
   (x : float____ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float as Standard__float
 use        "_gnatprove_standard".Float32 as Float32
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float32 with axiom .,
 type t = Standard__float.float__, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64

 type long_float 
 
 val constant first 
   : Float64.t
  ensures { result =  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)) }
 
 val constant last 
   : Float64.t
  ensures { result =  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t) }
 
 predicate in_range 
   (x : Float64.t) =
  (Float64.t'isFinite x)
 val in_range 
   (x : Float64.t) : bool
  ensures { result <-> in_range (x : Float64.t) }
 
 clone export "ada__model".Static_Float64 with axiom .,
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content : long_float }
 
 function long_float__ref_long_float__content__projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref_long_float__content__projection
 
 meta "inline:no" function long_float__ref_long_float__content__projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float as Standard__long_float
 use        "_gnatprove_standard".Float64 as Float64
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Float64 with axiom .,
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (65535 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content : wide_character }
 
 function wide_character__ref_wide_character__content__projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref_wide_character__content__projection
 
 meta "inline:no" function wide_character__ref_wide_character__content__projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character as Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type wide_wide_character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content : wide_wide_character }
 
 function wide_wide_character__ref_wide_wide_character__content__projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref_wide_wide_character__content__projection
 
 meta "inline:no" function wide_wide_character__ref_wide_wide_character__content__projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character
 use        Standard__wide_character__rep as Standard__wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character__rep as Standard__wide_character__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_character as Standard__wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_character as Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_string__ref =
  { mutable wide_string__content : wide_string }
 
 function wide_string__ref_wide_string__content__projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref_wide_string__content__projection
 
 meta "inline:no" function wide_string__ref_wide_string__content__projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character__rep as Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with axiom .,
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_character as Standard__wide_wide_character
 use        Standard__integer__rep as Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character as Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content : wide_wide_string }
 
 function wide_wide_string__ref_wide_wide_string__content__projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref_wide_wide_string__content__projection
 
 meta "inline:no" function wide_wide_string__ref_wide_wide_string__content__projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 function num_small 
   : int =
  (1 : int)
 
 function den_small 
   : int =
  (1000000000 : int)
 
 clone export "ada__model".Fixed_Point_Rep with axiom .,
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 type duration 
 
 val constant num_small 
   : Main.__fixed
  ensures { result =  (1 : int) }
 
 val constant den_small 
   : Main.__fixed
  ensures { result =  (1000000000 : int) }
 
 val constant first 
   : Main.__fixed
  ensures { result =  ( ( -9223372036854775808 ) : int ) }
 
 val constant last 
   : Main.__fixed
  ensures { result =  ( 9223372036854775807 : int ) }
 
 predicate in_range 
   (x : Main.__fixed) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : Main.__fixed) : bool
  ensures { result <-> in_range (x : Main.__fixed) }
 
 clone export "ada__model".Static_Fixed_Point with axiom .,
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content : duration }
 
 function duration__ref_duration__content__projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref_duration__content__projection
 
 meta "inline:no" function duration__ref_duration__content__projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration__rep
 use        Standard__duration as Standard__duration
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Fixed with axiom .,
 type t = Standard__duration.duration, 
 predicate in_range = Standard__duration.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_8 =
  < range -128 127 >
 
 val constant first 
   : int
  ensures { result =  (( -128) : int) }
 
 val constant last 
   : int
  ensures { result =  (127 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content : integer_8 }
 
 function integer_8__ref_integer_8__content__projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref_integer_8__content__projection
 
 meta "inline:no" function integer_8__ref_integer_8__content__projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8 as Standard__integer_8
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 val constant first 
   : int
  ensures { result =  (( -32768) : int) }
 
 val constant last 
   : int
  ensures { result =  (32767 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content : integer_16 }
 
 function integer_16__ref_integer_16__content__projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref_integer_16__content__projection
 
 meta "inline:no" function integer_16__ref_integer_16__content__projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16 as Standard__integer_16
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content : integer_32 }
 
 function integer_32__ref_integer_32__content__projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref_integer_32__content__projection
 
 meta "inline:no" function integer_32__ref_integer_32__content__projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32 as Standard__integer_32
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content : integer_64 }
 
 function integer_64__ref_integer_64__content__projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref_integer_64__content__projection
 
 meta "inline:no" function integer_64__ref_integer_64__content__projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64 as Standard__integer_64
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 val constant first 
   : int
  ensures { result =  (( -9223372036854775808) : int) }
 
 val constant last 
   : int
  ensures { result =  (9223372036854775807 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content : universal_integer }
 
 function universal_integer__ref_universal_integer__content__projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref_universal_integer__content__projection
 
 meta "inline:no" function universal_integer__ref_universal_integer__content__projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer as Standard__universal_integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcountB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcountB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcountB__ref =
  { mutable tcountB__content : tcountB }
 
 function tcountB__ref_tcountB__content__projection 
   (a : tcountB__ref) : tcountB =
  a.tcountB__content
 
 meta "model_projection" function tcountB__ref_tcountB__content__projection
 
 meta "inline:no" function tcountB__ref_tcountB__content__projection
 
 val tcountB__havoc 
   (x : tcountB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__TcountB__rep
 use        Ada__text_io__TcountB as Ada__text_io__TcountB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__TcountB.tcountB) : int =
  (Ada__text_io__TcountB.tcountB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__TcountB.tcountB, 
 predicate in_range = Ada__text_io__TcountB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada__text_io__count__rep
 use        Ada__text_io__count as Ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__text_io__count.count) : int =
  (Ada__text_io__count.count'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__text_io__count.count, 
 predicate in_range = Ada__text_io__count.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type any_priority =
  < range 0 63 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content : any_priority }
 
 function any_priority__ref_any_priority__content__projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref_any_priority__content__projection
 
 meta "inline:no" function any_priority__ref_any_priority__content__projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority as System__any_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type priority =
  < range 0 62 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (62 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content : priority }
 
 function priority__ref_priority__content__projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref_priority__content__projection
 
 meta "inline:no" function priority__ref_priority__content__projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority as System__priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 129 0 0][@name:Default_Priority] [@model_trace:16115] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type interrupt_priority =
  < range 63 63 >
 
 val constant first 
   : int
  ensures { result =  (63 : int) }
 
 val constant last 
   : int
  ensures { result =  (63 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content : interrupt_priority }
 
 function interrupt_priority__ref_interrupt_priority__content__projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref_interrupt_priority__content__projection
 
 meta "inline:no" function interrupt_priority__ref_interrupt_priority__content__projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority as System__interrupt_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "database" defined at passworddatabase.ads:16, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int

 type __main_type 
 
 val function __main_eq 
   (a : __main_type) (b : __main_type) : bool
 
 type __rep 
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 val function bool_eq 
   (a : __rep) (b : __rep) : bool

end

(* Module for axiomatizing type "database" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__database
 use export Passworddatabase__database__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type database =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val function user_eq 
   (a : database) (b : database) : bool
 
 val constant dummy 
   : database

 
 type database__ref =
  { mutable database__content : database }
 
 function database__ref_database__content__projection 
   (a : database__ref) : database =
  a.database__content
 
 meta "model_projection" function database__ref_database__content__projection
 
 meta "inline:no" function database__ref_database__content__projection
 
 val database__havoc 
   (x : database__ref) : unit
  writes {x}

end

(* Module for defining the constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__max_mystring_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_mystring_length [#"mystring.ads" 2 0 0][@model_trace:109886] [@name:Max_MyString_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T13b" defined at mystring.ads:27 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t13b =
  < range 0 2048 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t13b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t13b__ref =
  { mutable t13b__content : t13b }
 
 function t13b__ref_t13b__content__projection 
   (a : t13b__ref) : t13b =
  a.t13b__content
 
 meta "model_projection" function t13b__ref_t13b__content__projection
 
 meta "inline:no" function t13b__ref_t13b__content__projection
 
 val t13b__havoc 
   (x : t13b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T13b" defined at mystring.ads:27 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring__T13b__rep
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__mystring__T13b.t13b) : int =
  (Main__lines__mystring__T13b.t13b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__mystring__T13b.t13b, 
 predicate in_range = Main__lines__mystring__T13b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrD1__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__TmystringstrD1.tmystringstrD1) : int =
  (Main__lines__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Main__lines__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Main__lines__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:26 instantiated at main.adb:62, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__mystringstr as Main__lines__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__main__lines__mystring__length [@model_trace:.109795] [@name:Length] : Main__lines__mystring__T13b.t13b; rec__main__lines__mystring__str [@name:Str] [@model_trace:.109810] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__main__lines__mystring__length__projection [@model_trace:.109795] [@name:Length] 
   (a : __split_fields) : Main__lines__mystring__T13b.t13b =
  a.rec__main__lines__mystring__length
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__length__projection
 
 function __split_fields_rec__main__lines__mystring__str__projection [@name:Str] [@model_trace:.109810] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__main__lines__mystring__str
 
 meta "model_projection" function __split_fields_rec__main__lines__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__main__lines__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__projection
 
 meta "inline:no" function __rep___split_fields__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate main__lines__mystring__length__pred 
   (a : __rep) =
  true
 val main__lines__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__length__pred (a : __rep) }
 
 val rec__main__lines__mystring__length_ 
   (a : __rep) : Main__lines__mystring__T13b.t13b
  requires {  (main__lines__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__length) }
 
 predicate main__lines__mystring__str__pred 
   (a : __rep) =
  true
 val main__lines__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> main__lines__mystring__str__pred (a : __rep) }
 
 val rec__main__lines__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (main__lines__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__main__lines__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Main__lines__mystring__T13b__rep.to_rep a.__split_fields.rec__main__lines__mystring__length) = (Main__lines__mystring__T13b__rep.to_rep b.__split_fields.rec__main__lines__mystring__length)) /\ (Main__lines__mystringstr.bool_eq a.__split_fields.rec__main__lines__mystring__str b.__split_fields.rec__main__lines__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:26 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__mystring
 use export Main__lines__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant main__lines__mystring__length__first__bit 
   : int

 
 val constant main__lines__mystring__length__last__bit 
   : int

 
 val constant main__lines__mystring__length__position 
   : int

 
 axiom main__lines__mystring__length__first__bit_axiom :
  ((main__lines__mystring__length__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__length__last__bit_axiom :
  ((main__lines__mystring__length__last__bit ) > (main__lines__mystring__length__first__bit ))
 
 axiom main__lines__mystring__length__position_axiom :
  ((main__lines__mystring__length__position ) >= (0 : int))
 
 val constant main__lines__mystring__str__first__bit 
   : int

 
 val constant main__lines__mystring__str__last__bit 
   : int

 
 val constant main__lines__mystring__str__position 
   : int

 
 axiom main__lines__mystring__str__first__bit_axiom :
  ((main__lines__mystring__str__first__bit ) >= (0 : int))
 
 axiom main__lines__mystring__str__last__bit_axiom :
  ((main__lines__mystring__str__last__bit ) > (main__lines__mystring__str__first__bit ))
 
 axiom main__lines__mystring__str__position_axiom :
  ((main__lines__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__projection
 
 meta "inline:no" function mystring__ref_mystring__content__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:5 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__to_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 5 0 0][@model_trace:109494] [@model_projected] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:5 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m" defined at mystring.ads:16 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__length__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 16 0 0][@model_projected] [@model_trace:109645] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:16 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__length__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length" defined at mystring.ads:16 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__length
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function length 
   (m : Main__lines__mystring.mystring) : int
 
 val predicate length__function_guard 
   (temp___result_156 : int) (m : Main__lines__mystring.mystring)

end

(* Module for possibly declaring a logic function for "to_string" defined at mystring.ads:5 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__to_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
 
 val predicate to_string__function_guard 
   (temp___result_157 : Standard__string.string) (m : Main__lines__mystring.mystring)

end

(* Module for defining the constant "s" defined at mystring.ads:8 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystring.ads" 8 0 0][@model_projected] [@model_trace:109528] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystring.ads:8 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string" defined at mystring.ads:8 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__mystring as Main__lines__mystring

 val function from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
 
 val predicate from_string__function_guard 
   (temp___result_158 : Main__lines__mystring.mystring) (s : Standard__string.string)

end

(* Module for defining the constant "m1" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 11 0 0][@model_trace:109547] [@model_projected] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__less__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 11 0 0][@model_projected] [@name:M2] [@model_trace:109556] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "less" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__less
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate less__function_guard 
   (temp___result_159 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m1" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m1 [#"mystring.ads" 12 0 0][@model_trace:109611] [@model_projected] [@name:M1] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m1" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "m2" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__equal__m2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m2 [#"mystring.ads" 12 0 0][@model_projected] [@name:M2] [@model_trace:109620] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m2" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__m2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T10b" defined at mystring.ads:15 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L9b__T10b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content : t10b }
 
 function t10b__ref_t10b__content__projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref_t10b__content__projection
 
 meta "inline:no" function t10b__ref_t10b__content__projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for defining the constant "m" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 21 0 0][@model_trace:109731] [@model_projected] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "index" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__get__index
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant index [#"mystring.ads" 21 0 0][@name:Index] [@model_trace:109740] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "index" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get__index___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function get 
   (m : Main__lines__mystring.mystring) (index : int) : int
 
 val predicate get__function_guard 
   (temp___result_160 : int) (m : Main__lines__mystring.mystring) (index : int)

end

(* Module for possibly declaring a logic function for "equal" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__equal
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
 
 val predicate equal__function_guard 
   (temp___result_161 : bool) (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring)

end

(* Module for defining the constant "m" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val constant m [#"mystring.ads" 18 0 0][@model_projected] [@model_trace:109687] [@name:M] 
   : Main__lines__mystring.mystring

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "from" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__from
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant from [#"mystring.ads" 18 0 0][@name:From] [@model_trace:109696] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "from" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__from___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "to" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant *)
module Main__lines__substring__to
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant to__ [#"mystring.ads" 18 0 0][@model_trace:109705] [@name:To] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "to" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__to___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "substring" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__substring
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val function substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
 
 val predicate substring__function_guard 
   (temp___result_162 : Main__lines__mystring.mystring) (m : Main__lines__mystring.mystring) (from : int) (to__ : int)

end

(* Module for axiomatizing type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TTresultSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tTresultSP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tTresultSP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tTresultSP1__ref =
  { mutable tTresultSP1__content : tTresultSP1 }
 
 function tTresultSP1__ref_tTresultSP1__content__projection 
   (a : tTresultSP1__ref) : tTresultSP1 =
  a.tTresultSP1__content
 
 meta "model_projection" function tTresultSP1__ref_tTresultSP1__content__projection
 
 meta "inline:no" function tTresultSP1__ref_tTresultSP1__content__projection
 
 val tTresultSP1__havoc 
   (x : tTresultSP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TresultS" defined at mystring.adb:6 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__TresultS
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type tresultS =
  string
 
 type tresultS__ref =
  { mutable tresultS__content : tresultS }
 
 function tresultS__ref_tresultS__content__projection 
   (a : tresultS__ref) : tresultS =
  a.tresultS__content
 
 meta "model_projection" function tresultS__ref_tresultS__content__projection
 
 meta "inline:no" function tresultS__ref_tresultS__content__projection
 
 val tresultS__havoc 
   (x : tresultS__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T61b" defined at mystring.adb:8 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T61b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t61b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t61b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t61b__ref =
  { mutable t61b__content : t61b }
 
 function t61b__ref_t61b__content__projection 
   (a : t61b__ref) : t61b =
  a.t61b__content
 
 meta "model_projection" function t61b__ref_t61b__content__projection
 
 meta "inline:no" function t61b__ref_t61b__content__projection
 
 val t61b__havoc 
   (x : t61b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T62b" defined at mystring.adb:8 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__to_string__T62b
 use export Main__lines__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int

 type t62b =
  tmystringstrB
 
 type t62b__ref =
  { mutable t62b__content : t62b }
 
 function t62b__ref_t62b__content__projection 
   (a : t62b__ref) : t62b =
  a.t62b__content
 
 meta "model_projection" function t62b__ref_t62b__content__projection
 
 meta "inline:no" function t62b__ref_t62b__content__projection
 
 val t62b__havoc 
   (x : t62b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS64bP1" defined at mystring.adb:12 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__TS64bP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type tS64bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = tS64bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS64bP1__ref =
  { mutable tS64bP1__content : tS64bP1 }
 
 function tS64bP1__ref_tS64bP1__content__projection 
   (a : tS64bP1__ref) : tS64bP1 =
  a.tS64bP1__content
 
 meta "model_projection" function tS64bP1__ref_tS64bP1__content__projection
 
 meta "inline:no" function tS64bP1__ref_tS64bP1__content__projection
 
 val tS64bP1__havoc 
   (x : tS64bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S64b" defined at mystring.adb:12 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__S64b
 use export Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 type s64b =
  string
 
 type s64b__ref =
  { mutable s64b__content : s64b }
 
 function s64b__ref_s64b__content__projection 
   (a : s64b__ref) : s64b =
  a.s64b__content
 
 meta "model_projection" function s64b__ref_s64b__content__projection
 
 meta "inline:no" function s64b__ref_s64b__content__projection
 
 val s64b__havoc 
   (x : s64b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T65b" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T65b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t65b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t65b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t65b__ref =
  { mutable t65b__content : t65b }
 
 function t65b__ref_t65b__content__projection 
   (a : t65b__ref) : t65b =
  a.t65b__content
 
 meta "model_projection" function t65b__ref_t65b__content__projection
 
 meta "inline:no" function t65b__ref_t65b__content__projection
 
 val t65b__havoc 
   (x : t65b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T65b" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T65b__rep
 use        Main__lines__from_string__T65b as Main__lines__from_string__T65b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__from_string__T65b.t65b) : int =
  (Main__lines__from_string__T65b.t65b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__from_string__T65b.t65b, 
 predicate in_range = Main__lines__from_string__T65b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T66b" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__T66b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T67b" defined at mystring.adb:20 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__from_string__L_1__T67b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t67b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t67b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t67b__ref =
  { mutable t67b__content : t67b }
 
 function t67b__ref_t67b__content__projection 
   (a : t67b__ref) : t67b =
  a.t67b__content
 
 meta "model_projection" function t67b__ref_t67b__content__projection
 
 meta "inline:no" function t67b__ref_t67b__content__projection
 
 val t67b__havoc 
   (x : t67b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T78b" defined at mystring.adb:60 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L77b__T78b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t78b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t78b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t78b__ref =
  { mutable t78b__content : t78b }
 
 function t78b__ref_t78b__content__projection 
   (a : t78b__ref) : t78b =
  a.t78b__content
 
 meta "model_projection" function t78b__ref_t78b__content__projection
 
 meta "inline:no" function t78b__ref_t78b__content__projection
 
 val t78b__havoc 
   (x : t78b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T76b" defined at mystring.adb:60 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__equal__L_3__L75b__T76b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t76b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t76b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t76b__ref =
  { mutable t76b__content : t76b }
 
 function t76b__ref_t76b__content__projection 
   (a : t76b__ref) : t76b =
  a.t76b__content
 
 meta "model_projection" function t76b__ref_t76b__content__projection
 
 meta "inline:no" function t76b__ref_t76b__content__projection
 
 val t76b__havoc 
   (x : t76b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T81b" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T81b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t81b =
  < range 1 2048 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t81b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t81b__ref =
  { mutable t81b__content : t81b }
 
 function t81b__ref_t81b__content__projection 
   (a : t81b__ref) : t81b =
  a.t81b__content
 
 meta "model_projection" function t81b__ref_t81b__content__projection
 
 meta "inline:no" function t81b__ref_t81b__content__projection
 
 val t81b__havoc 
   (x : t81b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T81b" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T81b__rep
 use        Main__lines__substring__T81b as Main__lines__substring__T81b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__lines__substring__T81b.t81b) : int =
  (Main__lines__substring__T81b.t81b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__lines__substring__T81b.t81b, 
 predicate in_range = Main__lines__substring__T81b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T82b" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__T82b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2048 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T83b" defined at mystring.adb:75 instantiated at main.adb:62, created in Gnat2Why.Types.Translate_Type *)
module Main__lines__substring__L_4__T83b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t83b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t83b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t83b__ref =
  { mutable t83b__content : t83b }
 
 function t83b__ref_t83b__content__projection 
   (a : t83b__ref) : t83b =
  a.t83b__content
 
 meta "model_projection" function t83b__ref_t83b__content__projection
 
 meta "inline:no" function t83b__ref_t83b__content__projection
 
 val t83b__havoc 
   (x : t83b__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "tokenextent" defined at mystringtokeniser.ads:3, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep

 type __split_fields =
  { rec__mystringtokeniser__tokenextent__start [@name:Start] [@model_trace:.17361] : Standard__positive.positive; rec__mystringtokeniser__tokenextent__length [@model_trace:.17371] [@name:Length] : Standard__natural.natural }
 
 function __split_fields_rec__mystringtokeniser__tokenextent__start__projection [@name:Start] [@model_trace:.17361] 
   (a : __split_fields) : Standard__positive.positive =
  a.rec__mystringtokeniser__tokenextent__start
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__start__projection
 
 function __split_fields_rec__mystringtokeniser__tokenextent__length__projection [@model_trace:.17371] [@name:Length] 
   (a : __split_fields) : Standard__natural.natural =
  a.rec__mystringtokeniser__tokenextent__length
 
 meta "model_projection" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 meta "inline:no" function __split_fields_rec__mystringtokeniser__tokenextent__length__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__2__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__2__projection
 
 meta "inline:no" function __rep___split_fields__2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate mystringtokeniser__tokenextent__start__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__start__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__start__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__start_ 
   (a : __rep) : Standard__positive.positive
  requires {  (mystringtokeniser__tokenextent__start__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__start) }
 
 predicate mystringtokeniser__tokenextent__length__pred 
   (a : __rep) =
  true
 val mystringtokeniser__tokenextent__length__pred 
   (a : __rep) : bool
  ensures { result <-> mystringtokeniser__tokenextent__length__pred (a : __rep) }
 
 val rec__mystringtokeniser__tokenextent__length_ 
   (a : __rep) : Standard__natural.natural
  requires {  (mystringtokeniser__tokenextent__length__pred a) }
  ensures {  (result = a.__split_fields.rec__mystringtokeniser__tokenextent__length) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Standard__positive__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__start) = (Standard__positive__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__start)) /\ ((Standard__natural__rep.to_rep a.__split_fields.rec__mystringtokeniser__tokenextent__length) = (Standard__natural__rep.to_rep b.__split_fields.rec__mystringtokeniser__tokenextent__length)) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "tokenextent" defined at mystringtokeniser.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenextent
 use export Mystringtokeniser__tokenextent__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tokenextent =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__start__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__start__position 
   : int

 
 axiom mystringtokeniser__tokenextent__start__first__bit_axiom :
  ((mystringtokeniser__tokenextent__start__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__start__last__bit_axiom :
  ((mystringtokeniser__tokenextent__start__last__bit ) > (mystringtokeniser__tokenextent__start__first__bit ))
 
 axiom mystringtokeniser__tokenextent__start__position_axiom :
  ((mystringtokeniser__tokenextent__start__position ) >= (0 : int))
 
 val constant mystringtokeniser__tokenextent__length__first__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__last__bit 
   : int

 
 val constant mystringtokeniser__tokenextent__length__position 
   : int

 
 axiom mystringtokeniser__tokenextent__length__first__bit_axiom :
  ((mystringtokeniser__tokenextent__length__first__bit ) >= (0 : int))
 
 axiom mystringtokeniser__tokenextent__length__last__bit_axiom :
  ((mystringtokeniser__tokenextent__length__last__bit ) > (mystringtokeniser__tokenextent__length__first__bit ))
 
 axiom mystringtokeniser__tokenextent__length__position_axiom :
  ((mystringtokeniser__tokenextent__length__position ) >= (0 : int))
 
 val function user_eq 
   (a : tokenextent) (b : tokenextent) : bool
 
 val constant dummy 
   : tokenextent

 
 type tokenextent__ref =
  { mutable tokenextent__content : tokenextent }
 
 function tokenextent__ref_tokenextent__content__projection 
   (a : tokenextent__ref) : tokenextent =
  a.tokenextent__content
 
 meta "model_projection" function tokenextent__ref_tokenextent__content__projection
 
 meta "inline:no" function tokenextent__ref_tokenextent__content__projection
 
 val tokenextent__havoc 
   (x : tokenextent__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:8, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Mystringtokeniser__tokenextent
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_163   : int.
   (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
    (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_163) (get b ((b__first - a__first) + temp___idx_163)))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_163   : int.
    (if (( (a__first <= temp___idx_163) /\ (temp___idx_163 <= a__last) )) then (
     (Mystringtokeniser__tokenextent.bool_eq (get a temp___idx_163) (get b ((b__first - a__first) + temp___idx_163)))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "tokenarray" defined at mystringtokeniser.ads:8, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Mystringtokeniser__tokenextent__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Mystringtokeniser__tokenextent.component_type, 
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Mystringtokeniser__tokenextent.get

end

(* Module for axiomatizing type "tokenarray" defined at mystringtokeniser.ads:8, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenarray
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tokenarray =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tokenarray__ref =
  { mutable tokenarray__content : tokenarray }
 
 function tokenarray__ref_tokenarray__content__projection 
   (a : tokenarray__ref) : tokenarray =
  a.tokenarray__content
 
 meta "model_projection" function tokenarray__ref_tokenarray__content__projection
 
 meta "inline:no" function tokenarray__ref_tokenarray__content__projection
 
 val tokenarray__havoc 
   (x : tokenarray__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TTtSP1" defined at main.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tTtSP1 =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tTtSP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tTtSP1__ref =
  { mutable tTtSP1__content : tTtSP1 }
 
 function tTtSP1__ref_tTtSP1__content__projection 
   (a : tTtSP1__ref) : tTtSP1 =
  a.tTtSP1__content
 
 meta "model_projection" function tTtSP1__ref_tTtSP1__content__projection
 
 meta "inline:no" function tTtSP1__ref_tTtSP1__content__projection
 
 val tTtSP1__havoc 
   (x : tTtSP1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TTtSP1" defined at main.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Main__TTtSP1__rep
 use        Main__TTtSP1 as Main__TTtSP1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__TTtSP1.tTtSP1) : int =
  (Main__TTtSP1.tTtSP1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__TTtSP1.tTtSP1, 
 predicate in_range = Main__TTtSP1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TtS" defined at main.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Main__TtS
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T16b" defined at main.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Main__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t16b =
  < range 1 3 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t16b, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t16b__ref =
  { mutable t16b__content : t16b }
 
 function t16b__ref_t16b__content__projection 
   (a : t16b__ref) : t16b =
  a.t16b__content
 
 meta "model_projection" function t16b__ref_t16b__content__projection
 
 meta "inline:no" function t16b__ref_t16b__content__projection
 
 val t16b__havoc 
   (x : t16b__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T16b" defined at main.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Main__T16b__rep
 use        Main__T16b as Main__T16b
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__T16b.t16b) : int =
  (Main__T16b.t16b'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__T16b.t16b, 
 predicate in_range = Main__T16b.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T17b" defined at main.adb:64, created in Gnat2Why.Types.Translate_Type *)
module Main__T17b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 type component_type =
  Mystringtokeniser__tokenextent.tokenextent
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Mystringtokeniser__tokenextent.map, 
 function array_bool_eq = Array__Int__Mystringtokeniser__tokenextent.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for possibly declaring a logic function for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument_count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function argument_count 
   (__void_param : unit) : int
 
 val predicate argument_count__function_guard 
   (temp___result_164 : int) (__void_param : unit)

end

(* Module for axiomatizing type "T18b" defined at main.adb:68, created in Gnat2Why.Types.Translate_Type *)
module Main__T18b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (40 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "item" defined at a-textio.ads:465, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__text_io__put__4__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant item [#"a-textio.ads" 465 0 0][@name:Item] [@model_projected] [@model_trace:23806] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:465, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__put__4__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "number" defined at mycommandline.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Mycommandline__argument__number
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant number [#"mycommandline.ads" 7 0 0][@name:Number] [@model_trace:17307] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "number" defined at mycommandline.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mycommandline__argument__number___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mycommandline__argument
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function argument 
   (number : int) : Standard__string.string
 
 val predicate argument__function_guard 
   (temp___result_165 : Standard__string.string) (number : int)

end

(* Module for axiomatizing type "T20b" defined at main.adb:71, created in Gnat2Why.Types.Translate_Type *)
module Main__T20b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "p" defined at manager.ads:25, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__lock__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant p [#"manager.ads" 25 0 0][@name:p] [@model_projected] [@model_trace:20752] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at manager.ads:25, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__lock__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "TpinB" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tpinB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tpinB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tpinB__ref =
  { mutable tpinB__content : tpinB }
 
 function tpinB__ref_tpinB__content__projection 
   (a : tpinB__ref) : tpinB =
  a.tpinB__content
 
 meta "model_projection" function tpinB__ref_tpinB__content__projection
 
 meta "inline:no" function tpinB__ref_tpinB__content__projection
 
 val tpinB__havoc 
   (x : tpinB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TpinB" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__TpinB__rep
 use        Pin__TpinB as Pin__TpinB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__TpinB.tpinB) : int =
  (Pin__TpinB.tpinB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__TpinB.tpinB, 
 predicate in_range = Pin__TpinB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "pin" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type pin =
  < range 0 9999 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (9999 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = pin, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type pin__ref =
  { mutable pin__content : pin }
 
 function pin__ref_pin__content__projection 
   (a : pin__ref) : pin =
  a.pin__content
 
 meta "model_projection" function pin__ref_pin__content__projection
 
 meta "inline:no" function pin__ref_pin__content__projection
 
 val pin__havoc 
   (x : pin__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "pin" defined at pin.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Pin__pin__rep
 use        Pin__pin as Pin__pin
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Pin__pin.pin) : int =
  (Pin__pin.pin'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Pin__pin.pin, 
 predicate in_range = Pin__pin.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "T1s" defined at manager.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Manager__T1s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at pin.ads:3, created in Gnat2Why.Decls.Translate_Constant *)
module Pin__from_string__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"pin.ads" 3 0 0][@model_projected] [@name:S] [@model_trace:20409] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at pin.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Pin__from_string__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T3s" defined at pin.ads:5, created in Gnat2Why.Types.Translate_Type *)
module Pin__from_string__L2s__T3s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t3s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t3s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3s__ref =
  { mutable t3s__content : t3s }
 
 function t3s__ref_t3s__content__projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref_t3s__content__projection
 
 meta "inline:no" function t3s__ref_t3s__content__projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "from_string" defined at pin.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Pin__from_string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function from_string 
   (s : Standard__string.string) : int
 
 val predicate from_string__function_guard 
   (temp___result_166 : int) (s : Standard__string.string)

end

(* Module for axiomatizing type "trim_end" defined at a-string.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__trim_end
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type trim_end 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = trim_end, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type trim_end__ref =
  { mutable trim_end__content : trim_end }
 
 function trim_end__ref_trim_end__content__projection 
   (a : trim_end__ref) : trim_end =
  a.trim_end__content
 
 meta "model_projection" function trim_end__ref_trim_end__content__projection
 
 meta "inline:no" function trim_end__ref_trim_end__content__projection
 
 val trim_end__havoc 
   (x : trim_end__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "trim_end" defined at a-string.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Ada__strings__trim_end__rep
 use        Ada__strings__trim_end as Ada__strings__trim_end
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__strings__trim_end.trim_end, 
 predicate in_range = Ada__strings__trim_end.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "source" defined at a-strfix.ads:469, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__fixed__trim__source
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant source [#"a-strfix.ads" 469 0 0][@model_projected] [@model_trace:32240] [@name:Source] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "source" defined at a-strfix.ads:469, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__fixed__trim__source___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "side" defined at a-strfix.ads:470, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__strings__fixed__trim__side
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant side [#"a-strfix.ads" 470 0 0][@name:Side] [@model_trace:32249] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "side" defined at a-strfix.ads:470, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__strings__fixed__trim__side___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "trim" defined at a-strfix.ads:468, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__strings__fixed__trim
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val function trim 
   (source : Standard__string.string) (side : int) : Standard__string.string
 
 val predicate trim__function_guard 
   (temp___result_167 : Standard__string.string) (source : Standard__string.string) (side : int)

end

(* Module for defining the constant "s" defined at mystringtokeniser.ads:14, created in Gnat2Why.Decls.Translate_Constant *)
module Mystringtokeniser__tokenise__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"mystringtokeniser.ads" 14 0 0][@model_projected] [@model_trace:17444] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at mystringtokeniser.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T7s" defined at mystringtokeniser.ads:17, created in Gnat2Why.Types.Translate_Type *)
module Mystringtokeniser__tokenise__L6s__T7s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__integer__rep as Standard__integer__rep

 type t7s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int) =
  ( (first_int <= x) /\ (x <= last_int) )
 val dynamic_property 
   (first_int : int) (last_int : int) (x : int) : bool
  ensures { result <-> dynamic_property (first_int : int) (last_int : int) (x : int) }
 
 clone export "ada__model".Dynamic_Discrete with axiom .,
 type t = t7s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7s__ref =
  { mutable t7s__content : t7s }
 
 function t7s__ref_t7s__content__projection 
   (a : t7s__ref) : t7s =
  a.t7s__content
 
 meta "model_projection" function t7s__ref_t7s__content__projection
 
 meta "inline:no" function t7s__ref_t7s__content__projection
 
 val t7s__havoc 
   (x : t7s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T26b" defined at main.adb:92, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T26b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (36 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T28b" defined at main.adb:94, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T28b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (6 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T29b" defined at main.adb:96, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T29b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "p" defined at manager.ads:21, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__unlock__p
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant p [#"manager.ads" 21 0 0][@model_trace:20705] [@name:p] [@model_projected] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "p" defined at manager.ads:21, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__unlock__p___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T35b" defined at main.adb:111, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T35b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T36b" defined at main.adb:113, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T36b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (42 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T42b" defined at main.adb:128, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T42b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T43b" defined at main.adb:130, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T43b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (41 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "max_url_length" defined at passworddatabase.ads:7, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_url_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_url_length [#"passworddatabase.ads" 7 0 0][@model_trace:4249] [@name:Max_URL_Length] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T45b" defined at main.adb:134, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T45b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "max_password_length" defined at passworddatabase.ads:6, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__max_password_length
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant max_password_length [#"passworddatabase.ads" 6 0 0][@name:Max_Password_Length] [@model_trace:4239] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "T47b" defined at main.adb:137, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T47b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (30 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at manager.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__put__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"manager.ads" 17 0 0][@model_projected] [@name:s] [@model_trace:20644] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at manager.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__put__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s1" defined at manager.ads:17, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__put__s1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s1 [#"manager.ads" 17 0 0][@model_trace:20653] [@model_projected] [@name:s1] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s1" defined at manager.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__put__s1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tcount_typeB =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tcount_typeB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tcount_typeB__ref =
  { mutable tcount_typeB__content : tcount_typeB }
 
 function tcount_typeB__ref_tcount_typeB__content__projection 
   (a : tcount_typeB__ref) : tcount_typeB =
  a.tcount_typeB__content
 
 meta "model_projection" function tcount_typeB__ref_tcount_typeB__content__projection
 
 meta "inline:no" function tcount_typeB__ref_tcount_typeB__content__projection
 
 val tcount_typeB__havoc 
   (x : tcount_typeB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__Tcount_typeB__rep
 use        Ada__containers__Tcount_typeB as Ada__containers__Tcount_typeB
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__Tcount_typeB.tcount_typeB) : int =
  (Ada__containers__Tcount_typeB.tcount_typeB'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__Tcount_typeB.tcount_typeB, 
 predicate in_range = Ada__containers__Tcount_typeB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count_type =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count_type__ref =
  { mutable count_type__content : count_type }
 
 function count_type__ref_count_type__content__projection 
   (a : count_type__ref) : count_type =
  a.count_type__content
 
 meta "model_projection" function count_type__ref_count_type__content__projection
 
 meta "inline:no" function count_type__ref_count_type__content__projection
 
 val count_type__havoc 
   (x : count_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Translate_Type *)
module Ada__containers__count_type__rep
 use        Ada__containers__count_type as Ada__containers__count_type
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Ada__containers__count_type.count_type) : int =
  (Ada__containers__count_type.count_type'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Ada__containers__count_type.count_type, 
 predicate in_range = Ada__containers__count_type.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for defining the constant "d" defined at passworddatabase.ads:43, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__length__3__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 43 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:43, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__length__3__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "length__3" defined at passworddatabase.ads:43, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__length__3
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val function length__3 
   (d : Passworddatabase__database.database) : int
 
 val predicate length__3__function_guard 
   (temp___result_168 : int) (d : Passworddatabase__database.database)

end

(* Module for axiomatizing type "T49b" defined at main.adb:143, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T49b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T50b" defined at main.adb:145, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T50b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (41 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T52b" defined at main.adb:149, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T52b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "db" defined at manager.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__get__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant db [#"manager.ads" 10 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at manager.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__get__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "s" defined at manager.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__get__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"manager.ads" 10 0 0][@model_trace:20544] [@model_projected] [@name:s] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at manager.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__get__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T54b" defined at main.adb:155, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T54b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (3 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T55b" defined at main.adb:157, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T55b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (41 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T57b" defined at main.adb:161, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T57b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (25 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "s" defined at manager.ads:13, created in Gnat2Why.Decls.Translate_Constant *)
module Manager__rem_password__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"manager.ads" 13 0 0][@model_projected] [@name:s] [@model_trace:20580] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at manager.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__rem_password__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for axiomatizing type "T28s" defined at mystring.ads:27 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type t28s =
  < range 0 1024 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = t28s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t28s__ref =
  { mutable t28s__content : t28s }
 
 function t28s__ref_t28s__content__projection 
   (a : t28s__ref) : t28s =
  a.t28s__content
 
 meta "model_projection" function t28s__ref_t28s__content__projection
 
 meta "inline:no" function t28s__ref_t28s__content__projection
 
 val t28s__havoc 
   (x : t28s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T28s" defined at mystring.ads:27 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__mystring__T28s.t28s) : int =
  (Passworddatabase__urls__mystring__T28s.t28s'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__mystring__T28s.t28s, 
 predicate in_range = Passworddatabase__urls__mystring__T28s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrD1" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type tmystringstrD1 =
  < range 1 1024 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = tmystringstrD1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tmystringstrD1__ref =
  { mutable tmystringstrD1__content : tmystringstrD1 }
 
 function tmystringstrD1__ref_tmystringstrD1__content__2__projection 
   (a : tmystringstrD1__ref) : tmystringstrD1 =
  a.tmystringstrD1__content
 
 meta "model_projection" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 meta "inline:no" function tmystringstrD1__ref_tmystringstrD1__content__2__projection
 
 val tmystringstrD1__havoc 
   (x : tmystringstrD1__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TmystringstrD1" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrD1__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Passworddatabase__urls__TmystringstrD1.tmystringstrD1) : int =
  (Passworddatabase__urls__TmystringstrD1.tmystringstrD1'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Passworddatabase__urls__TmystringstrD1.tmystringstrD1, 
 predicate in_range = Passworddatabase__urls__TmystringstrD1.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "TmystringstrB" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__TmystringstrB
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__urls__TmystringstrD1 as Passworddatabase__urls__TmystringstrD1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Passworddatabase__urls__TmystringstrD1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tmystringstrB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type tmystringstrB__ref =
  { mutable tmystringstrB__content : tmystringstrB }
 
 function tmystringstrB__ref_tmystringstrB__content__2__projection 
   (a : tmystringstrB__ref) : tmystringstrB =
  a.tmystringstrB__content
 
 meta "model_projection" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 meta "inline:no" function tmystringstrB__ref_tmystringstrB__content__2__projection
 
 val tmystringstrB__havoc 
   (x : tmystringstrB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "mystringstr" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystringstr
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (1024 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing the record theory associated to type "mystring" defined at mystring.ads:26 instantiated at passworddatabase.ads:11, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring__T28s as Passworddatabase__urls__mystring__T28s
 use        Passworddatabase__urls__mystring__T28s__rep as Passworddatabase__urls__mystring__T28s__rep
 use        Passworddatabase__urls__mystringstr as Passworddatabase__urls__mystringstr
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type __split_fields =
  { rec__passworddatabase__urls__mystring__length [@name:Length] [@model_trace:.72619] : Passworddatabase__urls__mystring__T28s.t28s; rec__passworddatabase__urls__mystring__str [@model_trace:.72634] [@name:Str] : Array__Int__Standard__character.map }
 
 function __split_fields_rec__passworddatabase__urls__mystring__length__projection [@name:Length] [@model_trace:.72619] 
   (a : __split_fields) : Passworddatabase__urls__mystring__T28s.t28s =
  a.rec__passworddatabase__urls__mystring__length
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__length__projection
 
 function __split_fields_rec__passworddatabase__urls__mystring__str__projection [@model_trace:.72634] [@name:Str] 
   (a : __split_fields) : Array__Int__Standard__character.map =
  a.rec__passworddatabase__urls__mystring__str
 
 meta "model_projection" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 meta "inline:no" function __split_fields_rec__passworddatabase__urls__mystring__str__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content : __split_fields }
 
 function __split_fields__ref___split_fields__content__3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___split_fields__content__3__projection
 
 meta "inline:no" function __split_fields__ref___split_fields__content__3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields : __split_fields }
 
 function __rep___split_fields__3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___split_fields__3__projection
 
 meta "inline:no" function __rep___split_fields__3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 val to_base 
   (a : __rep) : __rep
  ensures { result = to_base (a : __rep) }
 
 function of_base 
   (a : __rep) : __rep =
  a
 val of_base 
   (a : __rep) : __rep
  ensures { result = of_base (a : __rep) }
 
 predicate passworddatabase__urls__mystring__length__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__length__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__length__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__length_ 
   (a : __rep) : Passworddatabase__urls__mystring__T28s.t28s
  requires {  (passworddatabase__urls__mystring__length__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__length) }
 
 predicate passworddatabase__urls__mystring__str__pred 
   (a : __rep) =
  true
 val passworddatabase__urls__mystring__str__pred 
   (a : __rep) : bool
  ensures { result <-> passworddatabase__urls__mystring__str__pred (a : __rep) }
 
 val rec__passworddatabase__urls__mystring__str_ 
   (a : __rep) : Array__Int__Standard__character.map
  requires {  (passworddatabase__urls__mystring__str__pred a) }
  ensures {  (result = a.__split_fields.rec__passworddatabase__urls__mystring__str) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Passworddatabase__urls__mystring__T28s__rep.to_rep a.__split_fields.rec__passworddatabase__urls__mystring__length) = (Passworddatabase__urls__mystring__T28s__rep.to_rep b.__split_fields.rec__passworddatabase__urls__mystring__length)) /\ (Passworddatabase__urls__mystringstr.bool_eq a.__split_fields.rec__passworddatabase__urls__mystring__str b.__split_fields.rec__passworddatabase__urls__mystring__str) )) then (
   True) else (
   False))
 val bool_eq 
   (a : __rep) (b : __rep) : bool
  ensures { result = bool_eq (a : __rep) (b : __rep) }

end

(* Module for axiomatizing type "mystring" defined at mystring.ads:26 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__urls__mystring
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type mystring =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : mystring) (b : mystring) : bool
 
 val constant dummy 
   : mystring

 
 type mystring__ref =
  { mutable mystring__content : mystring }
 
 function mystring__ref_mystring__content__2__projection 
   (a : mystring__ref) : mystring =
  a.mystring__content
 
 meta "model_projection" function mystring__ref_mystring__content__2__projection
 
 meta "inline:no" function mystring__ref_mystring__content__2__projection
 
 val mystring__havoc 
   (x : mystring__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "url" defined at passworddatabase.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Passworddatabase__url
 use export Passworddatabase__urls__mystring__rep
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type url =
  __rep
 
 val constant value__size 
   : int

 
 val constant object__size 
   : int

 
 val constant alignment 
   : int

 
 axiom value__size_axiom :
  ((value__size ) >= (0 : int))
 
 axiom object__size_axiom :
  ((object__size ) >= (0 : int))
 
 axiom alignment_axiom :
  ((alignment ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__length__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__length__position 
   : int

 
 axiom passworddatabase__urls__mystring__length__first__bit_axiom :
  ((passworddatabase__urls__mystring__length__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__length__last__bit_axiom :
  ((passworddatabase__urls__mystring__length__last__bit ) > (passworddatabase__urls__mystring__length__first__bit ))
 
 axiom passworddatabase__urls__mystring__length__position_axiom :
  ((passworddatabase__urls__mystring__length__position ) >= (0 : int))
 
 val constant passworddatabase__urls__mystring__str__first__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__last__bit 
   : int

 
 val constant passworddatabase__urls__mystring__str__position 
   : int

 
 axiom passworddatabase__urls__mystring__str__first__bit_axiom :
  ((passworddatabase__urls__mystring__str__first__bit ) >= (0 : int))
 
 axiom passworddatabase__urls__mystring__str__last__bit_axiom :
  ((passworddatabase__urls__mystring__str__last__bit ) > (passworddatabase__urls__mystring__str__first__bit ))
 
 axiom passworddatabase__urls__mystring__str__position_axiom :
  ((passworddatabase__urls__mystring__str__position ) >= (0 : int))
 
 val function user_eq 
   (a : url) (b : url) : bool
 
 val constant dummy 
   : url

 
 type url__ref =
  { mutable url__content : url }
 
 function url__ref_url__content__projection 
   (a : url__ref) : url =
  a.url__content
 
 meta "model_projection" function url__ref_url__content__projection
 
 meta "inline:no" function url__ref_url__content__projection
 
 val url__havoc 
   (x : url__ref) : unit
  writes {x}

end

(* Module for defining the constant "s" defined at passworddatabase.ads:33, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__from_string__2__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string

 val constant s [#"passworddatabase.ads" 33 0 0][@model_projected] [@model_trace:4533] [@name:S] 
   : Standard__string.string

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at passworddatabase.ads:33, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__from_string__2__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "from_string__2" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__from_string__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url

 val function from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
 
 val predicate from_string__2__function_guard 
   (temp___result_169 : Passworddatabase__url.url) (s : Standard__string.string)

end

(* Module for defining the constant "d" defined at passworddatabase.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__has_password_for__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val constant d [#"passworddatabase.ads" 20 0 0]
   : Passworddatabase__database.database

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__has_password_for__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the constant "u" defined at passworddatabase.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Passworddatabase__has_password_for__u
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 val constant u [#"passworddatabase.ads" 20 0 0][@model_trace:4365] [@model_projected] [@name:U] 
   : Passworddatabase__url.url

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "u" defined at passworddatabase.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__has_password_for__u___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "has_password_for" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__has_password_for
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url

 val function has_password_for 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : bool
 
 val predicate has_password_for__function_guard 
   (temp___result_170 : bool) (d : Passworddatabase__database.database) (u : Passworddatabase__url.url)

end

(* Module for axiomatizing type "T59b" defined at main.adb:168, created in Gnat2Why.Types.Translate_Type *)
module Main__L_1__T59b
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 type component_type =
  Standard__character.character
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (55 : int) }
 
 clone export "ada__model".Constr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end
(* Module for defining a ref holding the value of variable "d" defined at main.adb:61, created in Gnat2Why.Decls.Translate_Variable *)
module Main__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"main.adb" 61 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at main.adb:61, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.ads:23 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__get_line__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.ads" 23 0 0][@model_projected] [@name:M] [@model_trace:109759]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.ads:23 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__get_line__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "result" defined at mystring.adb:6 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__to_string__result
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val result__ [#"mystring.adb" 6 0 0][@model_trace:138368] [@model_projected] [@name:Result]  : Array__Int__Standard__character.map__ref 
 
 val constant result____first [#"mystring.adb" 6 0 0][@model_trace:138368'First] [@model_projected] [@name:Result] 
   : Standard__integer.integer

 
 val constant result____last [#"mystring.adb" 6 0 0][@model_projected] [@model_trace:138368'Last] [@name:Result] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "result" defined at mystring.adb:6 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__to_string__result___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "m" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__m
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val m__split_fields [#"mystring.adb" 13 0 0][@model_projected] [@name:M] [@model_trace:138423]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "m" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:14 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 14 0 0][@model_trace:138442] [@model_projected] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:14 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:20 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__from_string__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 20 0 0][@model_projected] [@name:I] [@model_trace:138519]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:20 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:29 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__less__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 29 0 0][@model_projected] [@model_trace:138586] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:29 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:53 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__equal__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 53 0 0][@model_trace:138763] [@model_projected] [@name:I]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:53 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "r" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__r
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val r__split_fields [#"mystring.adb" 72 0 0][@model_projected] [@name:R] [@model_trace:138963]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "r" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__r___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "j" defined at mystring.adb:73 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"mystring.adb" 73 0 0][@model_projected] [@model_trace:138986] [@name:J]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "j" defined at mystring.adb:73 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "i" defined at mystring.adb:75 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Variable *)
module Main__lines__substring__L_4__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"mystring.adb" 75 0 0][@model_projected] [@name:I] [@model_trace:139052]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "i" defined at mystring.adb:75 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "item" defined at a-textio.ads:482, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__item
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val item [#"a-textio.ads" 482 0 0][@name:Item] [@model_projected] [@model_trace:23928]  : Array__Int__Standard__character.map__ref 
 
 val constant item__first [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:23928'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant item__last [#"a-textio.ads" 482 0 0][@name:Item] [@model_trace:23928'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "item" defined at a-textio.ads:482, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__item___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "last" defined at a-textio.ads:483, created in Gnat2Why.Decls.Translate_Variable *)
module Ada__text_io__get_line__2__last
 use        "_gnatprove_standard".Main
 use        "int".Int

 val last [#"a-textio.ads" 483 0 0][@model_trace:23937] [@model_projected] [@name:Last]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "last" defined at a-textio.ads:483, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__text_io__get_line__2__last___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "s" defined at main.adb:63, created in Gnat2Why.Decls.Translate_Variable *)
module Main__s
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 val s__split_fields [#"main.adb" 63 0 0][@model_trace:2390] [@model_projected] [@name:S]  : Main__lines__mystring.__split_fields__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "s" defined at main.adb:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "t" defined at main.adb:64, created in Gnat2Why.Decls.Translate_Variable *)
module Main__t
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val t [#"main.adb" 64 0 0][@model_trace:2401] [@model_projected] [@name:T]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "t" defined at main.adb:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__t___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "numtokens" defined at main.adb:65, created in Gnat2Why.Decls.Translate_Variable *)
module Main__numtokens
 use        "_gnatprove_standard".Main
 use        "int".Int

 val numtokens [#"main.adb" 65 0 0][@model_projected] [@name:NumTokens] [@model_trace:2427]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "numtokens" defined at main.adb:65, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__numtokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "judge" defined at manager.ads:8, created in Gnat2Why.Decls.Translate_Variable *)
module Manager__judge
 use        "_gnatprove_standard".Main
 use        "int".Int

 val judge [#"manager.ads" 8 0 0][@model_trace:20518] [@name:judge] [@model_projected]  : bool__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "judge" defined at manager.ads:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__judge___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "pin1" defined at manager.ads:7, created in Gnat2Why.Decls.Translate_Variable *)
module Manager__pin1
 use        "_gnatprove_standard".Main
 use        "int".Int

 val pin1 [#"manager.ads" 7 0 0][@model_trace:20504] [@model_projected] [@name:PIN1]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "pin1" defined at manager.ads:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__pin1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "d" defined at passworddatabase.ads:18, created in Gnat2Why.Decls.Translate_Variable *)
module Passworddatabase__init__d
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val d [#"passworddatabase.ads" 18 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "d" defined at passworddatabase.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Passworddatabase__init__d___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "tokens" defined at mystringtokeniser.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__tokens
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokens [#"mystringtokeniser.ads" 14 0 0][@name:Tokens] [@model_trace:17453] [@model_projected]  : Array__Int__Mystringtokeniser__tokenextent.map__ref 
 
 val constant tokens__first [#"mystringtokeniser.ads" 14 0 0][@name:Tokens] [@model_trace:17453'First] [@model_projected] 
   : Standard__integer.integer

 
 val constant tokens__last [#"mystringtokeniser.ads" 14 0 0][@name:Tokens] [@model_trace:17453'Last] [@model_projected] 
   : Standard__integer.integer

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "tokens" defined at mystringtokeniser.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__tokens___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "count" defined at mystringtokeniser.ads:14, created in Gnat2Why.Decls.Translate_Variable *)
module Mystringtokeniser__tokenise__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"mystringtokeniser.ads" 14 0 0][@model_projected] [@model_trace:17462] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "count" defined at mystringtokeniser.ads:14, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Mystringtokeniser__tokenise__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "db" defined at manager.ads:17, created in Gnat2Why.Decls.Translate_Variable *)
module Manager__put__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val db [#"manager.ads" 17 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at manager.ads:17, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__put__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining a ref holding the value of variable "db" defined at manager.ads:13, created in Gnat2Why.Decls.Translate_Variable *)
module Manager__rem_password__db
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 val db [#"manager.ads" 13 0 0] : Passworddatabase__database.database__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module giving an empty axiom for the entity "db" defined at manager.ads:13, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Manager__rem_password__db___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module declaring the external object "ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_short_integer as Standard__short_short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_5 : int) (temp___skip_top_level_6 : bool) }

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__short_integer as Standard__short_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_12 : int) (temp___skip_top_level_13 : bool) }

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_integer as Standard__long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_26 : int) (temp___skip_top_level_27 : bool) }

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__long_long_integer as Standard__long_long_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_33 : int) (temp___skip_top_level_34 : bool) }

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural as Standard__natural

 predicate dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_40 : int) (temp___skip_top_level_41 : bool) }

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__short_float as Standard__short_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool) }

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float32 as Float32
 use        Standard__float as Standard__float

 predicate dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool) }

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Float64 as Float64
 use        Standard__long_float as Standard__long_float

 predicate dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_character as Standard__wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_82 : int) (temp___skip_top_level_83 : bool) }

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__wide_wide_character as Standard__wide_wide_character

 predicate dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_89 : int) (temp___skip_top_level_90 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_string as Standard__wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))
 val dynamic_invariant [@inline] 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool) }

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__wide_wide_string as Standard__wide_wide_string

 predicate dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))
 val dynamic_invariant [@inline] 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool) }

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__duration as Standard__duration

 predicate dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) =
  (if (( temp___is_init_112 \/ (Standard__duration.first <= Standard__duration.last) )) then (
   (Standard__duration.dynamic_property Standard__duration.first Standard__duration.last temp___expr_116)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_116 : Main.__fixed) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_117 : Main.__fixed) (temp___skip_top_level_118 : bool) }

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_8 as Standard__integer_8

 predicate dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_124 : int) (temp___skip_top_level_125 : bool) }

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_16 as Standard__integer_16

 predicate dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_131 : int) (temp___skip_top_level_132 : bool) }

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_32 as Standard__integer_32

 predicate dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_138 : int) (temp___skip_top_level_139 : bool) }

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer_64 as Standard__integer_64

 predicate dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_145 : int) (temp___skip_top_level_146 : bool) }

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__universal_integer as Standard__universal_integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_152 : int) (temp___skip_top_level_153 : bool) }

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada__text_io__standard_in : Main.__private) (ada__text_io__file_system : Main.__private) (ada__text_io__standard_out : Main.__private) (ada__text_io__standard_err : Main.__private) (ada__text_io__current_in : Main.__private) (ada__text_io__current_out : Main.__private) (ada__text_io__current_err : Main.__private)

end

(* Module for possibly declaring a logic function for "main" defined at main.adb:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line" defined at mystring.ads:23 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Main__lines__get_line
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at mystring.adb:20 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__from_string__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at mystring.adb:20 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__from_string__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_2" defined at mystring.adb:36 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__less__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at mystring.adb:36 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__less__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_3" defined at mystring.adb:58 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__equal__L_3
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at mystring.adb:58 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__equal__L_3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_4" defined at mystring.adb:75 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__lines__substring__L_4
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_4

end

(* Module giving an empty axiom for the entity "L_4" defined at mystring.adb:75 instantiated at main.adb:62, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__lines__substring__L_4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__get_line__2
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__text_io__put__4
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "lock" defined at manager.ads:25, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Manager__lock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "init" defined at passworddatabase.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Passworddatabase__init
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:87, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:87, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "tokenise" defined at mystringtokeniser.ads:14, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Mystringtokeniser__tokenise
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "unlock" defined at manager.ads:21, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Manager__unlock
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "put" defined at manager.ads:17, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Manager__put
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "get" defined at manager.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Manager__get
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for possibly declaring a logic function for "rem_password" defined at manager.ads:13, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Manager__rem_password
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TcountB" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__TcountB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__text_io__count as Ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool) =
  (if (( temp___is_init_171 \/ (Ada__text_io__count.first <= Ada__text_io__count.last) )) then (
   (Ada__text_io__count.dynamic_property Ada__text_io__count.first Ada__text_io__count.last temp___expr_175)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_175 : int) (temp___is_init_171 : bool) (temp___skip_constant_172 : bool) (temp___do_toplevel_173 : bool) (temp___do_typ_inv_174 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_176 : int) (temp___skip_top_level_177 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_176 : int) (temp___skip_top_level_177 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_176 : int) (temp___skip_top_level_177 : bool) }

end

(* Module giving axioms for type "any_priority" defined at system.ads:124, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__any_priority as System__any_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) =
  (if (( temp___is_init_178 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_182)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_182 : int) (temp___is_init_178 : bool) (temp___skip_constant_179 : bool) (temp___do_toplevel_180 : bool) (temp___do_typ_inv_181 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_183 : int) (temp___skip_top_level_184 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_183 : int) (temp___skip_top_level_184 : bool) }

end

(* Module giving axioms for type "priority" defined at system.ads:125, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__priority as System__priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool) =
  (if (( temp___is_init_185 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_189)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_189 : int) (temp___is_init_185 : bool) (temp___skip_constant_186 : bool) (temp___do_toplevel_187 : bool) (temp___do_typ_inv_188 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_190 : int) (temp___skip_top_level_191 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_190 : int) (temp___skip_top_level_191 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_190 : int) (temp___skip_top_level_191 : bool) }

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:126, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__interrupt_priority as System__interrupt_priority

 predicate dynamic_invariant [@inline] 
   (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool) =
  (if (( temp___is_init_192 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_196)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_196 : int) (temp___is_init_192 : bool) (temp___skip_constant_193 : bool) (temp___do_toplevel_194 : bool) (temp___do_typ_inv_195 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_197 : int) (temp___skip_top_level_198 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_197 : int) (temp___skip_top_level_198 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_197 : int) (temp___skip_top_level_198 : bool) }

end

(* Module giving axioms for type "database" defined at passworddatabase.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__database___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database

 predicate dynamic_invariant [@inline] 
   (temp___expr_203 : Passworddatabase__database.database) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_203 : Passworddatabase__database.database) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_203 : Passworddatabase__database.database) (temp___is_init_199 : bool) (temp___skip_constant_200 : bool) (temp___do_toplevel_201 : bool) (temp___do_typ_inv_202 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_204 : Passworddatabase__database.database) (temp___skip_top_level_205 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_204 : Passworddatabase__database.database) (temp___skip_top_level_205 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_204 : Passworddatabase__database.database) (temp___skip_top_level_205 : bool) }

end

(* Module giving axioms for type "T13b" defined at mystring.ads:27 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring__T13b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:25 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_210 : Array__Int__Standard__character.map) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_210 : Array__Int__Standard__character.map) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_210 : Array__Int__Standard__character.map) (temp___is_init_206 : bool) (temp___skip_constant_207 : bool) (temp___do_toplevel_208 : bool) (temp___do_typ_inv_209 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_212 : Array__Int__Standard__character.map) (temp___skip_top_level_213 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_212 : Array__Int__Standard__character.map) (temp___skip_top_level_213 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_212 : Array__Int__Standard__character.map) (temp___skip_top_level_213 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:26 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_220 : Main__lines__mystring.mystring) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_220 : Main__lines__mystring.mystring) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_220 : Main__lines__mystring.mystring) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_222 : Main__lines__mystring.mystring) (temp___skip_top_level_223 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_222 : Main__lines__mystring.mystring) (temp___skip_top_level_223 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_222 : Main__lines__mystring.mystring) (temp___skip_top_level_223 : bool) }

end

(* Module giving axioms for type "T10b" defined at mystring.ads:15 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L9b__T10b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TTresultSP1" defined at mystring.adb:6 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TTresultSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TresultS" defined at mystring.adb:6 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__TresultS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS

 predicate dynamic_invariant [@inline] 
   (temp___expr_251 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) =
  (if (temp___skip_constant_248) then (
   true) else (
   ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Main__lines__to_string__TresultS.first temp___expr_251) (Main__lines__to_string__TresultS.last temp___expr_251)) /\ ( ((Main__lines__to_string__TresultS.first temp___expr_251) = (1 : int)) /\ ((Main__lines__to_string__TresultS.last temp___expr_251) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_251 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_251 : Main__lines__to_string__TresultS.tresultS) (temp___is_init_247 : bool) (temp___skip_constant_248 : bool) (temp___do_toplevel_249 : bool) (temp___do_typ_inv_250 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_253 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_254 : bool) =
  ( ( true /\ ((Main__lines__to_string__TresultS.first temp___expr_253) = (1 : int)) )/\((Main__lines__to_string__TresultS.last temp___expr_253) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) )
 val default_initial_assumption [@inline] 
   (temp___expr_253 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_254 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_253 : Main__lines__to_string__TresultS.tresultS) (temp___skip_top_level_254 : bool) }

end

(* Module giving axioms for type "T61b" defined at mystring.adb:8 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T61b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T62b" defined at mystring.adb:8 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__to_string__T62b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TS64bP1" defined at mystring.adb:12 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__TS64bP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "S64b" defined at mystring.adb:12 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__S64b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__string as Standard__string
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__from_string__S64b as Main__lines__from_string__S64b

 predicate dynamic_invariant [@inline] 
   (temp___expr_261 : Main__lines__from_string__S64b.s64b) (temp___is_init_257 : bool) (temp___skip_constant_258 : bool) (temp___do_toplevel_259 : bool) (temp___do_typ_inv_260 : bool) =
  (if (temp___skip_constant_258) then (
   true) else (
   ( (Main__lines__from_string__S64b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) (Main__lines__from_string__S64b.first temp___expr_261) (Main__lines__from_string__S64b.last temp___expr_261)) /\ ( ((Main__lines__from_string__S64b.first temp___expr_261) = (Standard__string.first Main__lines__from_string__s.s)) /\ ((Main__lines__from_string__S64b.last temp___expr_261) = (Standard__string.last Main__lines__from_string__s.s)) ) )))
 val dynamic_invariant [@inline] 
   (temp___expr_261 : Main__lines__from_string__S64b.s64b) (temp___is_init_257 : bool) (temp___skip_constant_258 : bool) (temp___do_toplevel_259 : bool) (temp___do_typ_inv_260 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_261 : Main__lines__from_string__S64b.s64b) (temp___is_init_257 : bool) (temp___skip_constant_258 : bool) (temp___do_toplevel_259 : bool) (temp___do_typ_inv_260 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_263 : Main__lines__from_string__S64b.s64b) (temp___skip_top_level_264 : bool) =
  ( ( true /\ ((Main__lines__from_string__S64b.first temp___expr_263) = (Standard__string.first Main__lines__from_string__s.s)) )/\((Main__lines__from_string__S64b.last temp___expr_263) = (Standard__string.last Main__lines__from_string__s.s)) )
 val default_initial_assumption [@inline] 
   (temp___expr_263 : Main__lines__from_string__S64b.s64b) (temp___skip_top_level_264 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_263 : Main__lines__from_string__S64b.s64b) (temp___skip_top_level_264 : bool) }

end

(* Module giving axioms for type "T65b" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T65b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T66b" defined at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__T66b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T67b" defined at mystring.adb:20 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__from_string__L_1__T67b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T78b" defined at mystring.adb:60 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L77b__T78b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T76b" defined at mystring.adb:60 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__equal__L_3__L75b__T76b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T81b" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T81b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T82b" defined at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__T82b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T83b" defined at mystring.adb:75 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__lines__substring__L_4__T83b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "tokenextent" defined at mystringtokeniser.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenextent___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_273 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_273 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_273 : Mystringtokeniser__tokenextent.tokenextent) (temp___is_init_269 : bool) (temp___skip_constant_270 : bool) (temp___do_toplevel_271 : bool) (temp___do_typ_inv_272 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_274 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_275 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_274 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_275 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_274 : Mystringtokeniser__tokenextent.tokenextent) (temp___skip_top_level_275 : bool) }

end

(* Module giving axioms for type "tokenarray" defined at mystringtokeniser.ads:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenarray___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray

 predicate dynamic_invariant [@inline] 
   (temp___expr_282 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) =
  (if (temp___skip_constant_279) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Mystringtokeniser__tokenarray.first temp___expr_282) (Mystringtokeniser__tokenarray.last temp___expr_282))))
 val dynamic_invariant [@inline] 
   (temp___expr_282 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_282 : Mystringtokeniser__tokenarray.tokenarray) (temp___is_init_278 : bool) (temp___skip_constant_279 : bool) (temp___do_toplevel_280 : bool) (temp___do_typ_inv_281 : bool) }

end

(* Module giving axioms for type "TTtSP1" defined at main.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TTtSP1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TtS" defined at main.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__TtS___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 predicate dynamic_invariant [@inline] 
   (temp___expr_288 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_284 : bool) (temp___skip_constant_285 : bool) (temp___do_toplevel_286 : bool) (temp___do_typ_inv_287 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_288 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_284 : bool) (temp___skip_constant_285 : bool) (temp___do_toplevel_286 : bool) (temp___do_typ_inv_287 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_288 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___is_init_284 : bool) (temp___skip_constant_285 : bool) (temp___do_toplevel_286 : bool) (temp___do_typ_inv_287 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_290 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_291 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_290 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_291 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_290 : Array__Int__Mystringtokeniser__tokenextent.map) (temp___skip_top_level_291 : bool) }

end

(* Module giving axioms for type "T16b" defined at main.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T16b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T17b" defined at main.adb:64, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T17b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T18b" defined at main.adb:68, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T18b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T20b" defined at main.adb:71, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__T20b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TpinB" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__TpinB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "pin" defined at pin.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__pin___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Pin__pin as Pin__pin

 predicate dynamic_invariant [@inline] 
   (temp___expr_303 : int) (temp___is_init_299 : bool) (temp___skip_constant_300 : bool) (temp___do_toplevel_301 : bool) (temp___do_typ_inv_302 : bool) =
  (if (( temp___is_init_299 \/ (Pin__pin.first <= Pin__pin.last) )) then (
   (Pin__pin.dynamic_property Pin__pin.first Pin__pin.last temp___expr_303)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_303 : int) (temp___is_init_299 : bool) (temp___skip_constant_300 : bool) (temp___do_toplevel_301 : bool) (temp___do_typ_inv_302 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_303 : int) (temp___is_init_299 : bool) (temp___skip_constant_300 : bool) (temp___do_toplevel_301 : bool) (temp___do_typ_inv_302 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_304 : int) (temp___skip_top_level_305 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_304 : int) (temp___skip_top_level_305 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_304 : int) (temp___skip_top_level_305 : bool) }

end

(* Module giving axioms for type "T1s" defined at manager.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Manager__T1s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T3s" defined at pin.ads:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Pin__from_string__L2s__T3s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "trim_end" defined at a-string.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__strings__trim_end___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__strings__trim_end as Ada__strings__trim_end

 predicate dynamic_invariant [@inline] 
   (temp___expr_314 : int) (temp___is_init_310 : bool) (temp___skip_constant_311 : bool) (temp___do_toplevel_312 : bool) (temp___do_typ_inv_313 : bool) =
  (if (( temp___is_init_310 \/ (Ada__strings__trim_end.first <= Ada__strings__trim_end.last) )) then (
   (Ada__strings__trim_end.dynamic_property Ada__strings__trim_end.first Ada__strings__trim_end.last temp___expr_314)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_314 : int) (temp___is_init_310 : bool) (temp___skip_constant_311 : bool) (temp___do_toplevel_312 : bool) (temp___do_typ_inv_313 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_314 : int) (temp___is_init_310 : bool) (temp___skip_constant_311 : bool) (temp___do_toplevel_312 : bool) (temp___do_typ_inv_313 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_315 : int) (temp___skip_top_level_316 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_315 : int) (temp___skip_top_level_316 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_315 : int) (temp___skip_top_level_316 : bool) }

end

(* Module giving axioms for type "T7s" defined at mystringtokeniser.ads:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Mystringtokeniser__tokenise__L6s__T7s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T26b" defined at main.adb:92, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T26b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28b" defined at main.adb:94, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T28b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T29b" defined at main.adb:96, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T29b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T35b" defined at main.adb:111, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T35b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T36b" defined at main.adb:113, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T36b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T42b" defined at main.adb:128, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T42b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T43b" defined at main.adb:130, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T43b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T45b" defined at main.adb:134, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T45b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T47b" defined at main.adb:137, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T47b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "Tcount_typeB" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__Tcount_typeB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "count_type" defined at a-contai.ads:20, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__containers__count_type___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada__containers__count_type as Ada__containers__count_type

 predicate dynamic_invariant [@inline] 
   (temp___expr_331 : int) (temp___is_init_327 : bool) (temp___skip_constant_328 : bool) (temp___do_toplevel_329 : bool) (temp___do_typ_inv_330 : bool) =
  (if (( temp___is_init_327 \/ (Ada__containers__count_type.first <= Ada__containers__count_type.last) )) then (
   (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last temp___expr_331)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_331 : int) (temp___is_init_327 : bool) (temp___skip_constant_328 : bool) (temp___do_toplevel_329 : bool) (temp___do_typ_inv_330 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_331 : int) (temp___is_init_327 : bool) (temp___skip_constant_328 : bool) (temp___do_toplevel_329 : bool) (temp___do_typ_inv_330 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_332 : int) (temp___skip_top_level_333 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_332 : int) (temp___skip_top_level_333 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_332 : int) (temp___skip_top_level_333 : bool) }

end

(* Module giving axioms for type "T49b" defined at main.adb:143, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T49b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T50b" defined at main.adb:145, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T50b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T52b" defined at main.adb:149, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T52b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T54b" defined at main.adb:155, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T54b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T55b" defined at main.adb:157, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T55b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T57b" defined at main.adb:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T57b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "T28s" defined at mystring.ads:27 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring__T28s___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrD1" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrD1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "TmystringstrB" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__TmystringstrB___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving axioms for type "mystringstr" defined at mystring.ads:25 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystringstr___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_343 : Array__Int__Standard__character.map) (temp___is_init_339 : bool) (temp___skip_constant_340 : bool) (temp___do_toplevel_341 : bool) (temp___do_typ_inv_342 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_343 : Array__Int__Standard__character.map) (temp___is_init_339 : bool) (temp___skip_constant_340 : bool) (temp___do_toplevel_341 : bool) (temp___do_typ_inv_342 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_343 : Array__Int__Standard__character.map) (temp___is_init_339 : bool) (temp___skip_constant_340 : bool) (temp___do_toplevel_341 : bool) (temp___do_typ_inv_342 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_345 : Array__Int__Standard__character.map) (temp___skip_top_level_346 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_345 : Array__Int__Standard__character.map) (temp___skip_top_level_346 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_345 : Array__Int__Standard__character.map) (temp___skip_top_level_346 : bool) }

end

(* Module giving axioms for type "mystring" defined at mystring.ads:26 instantiated at passworddatabase.ads:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__urls__mystring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__urls__mystring as Passworddatabase__urls__mystring

 predicate dynamic_invariant [@inline] 
   (temp___expr_353 : Passworddatabase__urls__mystring.mystring) (temp___is_init_349 : bool) (temp___skip_constant_350 : bool) (temp___do_toplevel_351 : bool) (temp___do_typ_inv_352 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_353 : Passworddatabase__urls__mystring.mystring) (temp___is_init_349 : bool) (temp___skip_constant_350 : bool) (temp___do_toplevel_351 : bool) (temp___do_typ_inv_352 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_353 : Passworddatabase__urls__mystring.mystring) (temp___is_init_349 : bool) (temp___skip_constant_350 : bool) (temp___do_toplevel_351 : bool) (temp___do_typ_inv_352 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_355 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_356 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_355 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_356 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_355 : Passworddatabase__urls__mystring.mystring) (temp___skip_top_level_356 : bool) }

end

(* Module giving axioms for type "url" defined at passworddatabase.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Passworddatabase__url___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__url as Passworddatabase__url

 predicate dynamic_invariant [@inline] 
   (temp___expr_365 : Passworddatabase__url.url) (temp___is_init_361 : bool) (temp___skip_constant_362 : bool) (temp___do_toplevel_363 : bool) (temp___do_typ_inv_364 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_365 : Passworddatabase__url.url) (temp___is_init_361 : bool) (temp___skip_constant_362 : bool) (temp___do_toplevel_363 : bool) (temp___do_typ_inv_364 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_365 : Passworddatabase__url.url) (temp___is_init_361 : bool) (temp___skip_constant_362 : bool) (temp___do_toplevel_363 : bool) (temp___do_typ_inv_364 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_367 : Passworddatabase__url.url) (temp___skip_top_level_368 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_367 : Passworddatabase__url.url) (temp___skip_top_level_368 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_367 : Passworddatabase__url.url) (temp___skip_top_level_368 : bool) }

end

(* Module giving axioms for type "T59b" defined at main.adb:168, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__L_1__T59b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for declaring an abstract function for the aggregate at main.adb:64, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__t__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val function main__t__aggregate_def 
   (temp___385 : Mystringtokeniser__tokenextent.tokenextent) : Array__Int__Mystringtokeniser__tokenextent.map

end

(* Module for defining a value for string literal  defined at main.adb:68, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_387
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_387 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_387__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_387 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (5 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (7 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (8 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (9 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (10 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (12 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (15 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (16 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (17 : int))) = (103 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (18 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (19 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (20 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (21 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (22 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (23 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (24 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (25 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (26 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (27 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (28 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (29 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (30 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (31 : int))) = (101 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (32 : int))) = (113 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (33 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (34 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (35 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (36 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (37 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (38 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (39 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_387 __void_param) (40 : int))) = (49 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:71, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_404
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_404 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_404__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_404 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (8 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (9 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (10 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (12 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (15 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (22 : int))) = (80 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (23 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (24 : int))) = (78 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (26 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (27 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (29 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (31 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (33 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (34 : int))) = (113 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (35 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (36 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (37 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (39 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (40 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (41 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_404 __void_param) (42 : int))) = (52 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:92, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_407
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_407 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_407__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_407 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (5 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (6 : int))) = (117 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (7 : int))) = (109 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (8 : int))) = (98 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (9 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (10 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (11 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (12 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (13 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (14 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (15 : int))) = (116 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (17 : int))) = (107 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (18 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (19 : int))) = (110 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (20 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (21 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (22 : int))) = (105 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (23 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (24 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (25 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (26 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (27 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (28 : int))) = (32 : int)) ) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (29 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (30 : int))) = (102 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (31 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (32 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (33 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (34 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (35 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_407 __void_param) (36 : int))) = (101 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:168, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_409
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_409 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_409__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_409 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (5 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (6 : int))) = (117 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (7 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (8 : int))) = (99 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (9 : int))) = (116 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (10 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (11 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (12 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (13 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (14 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (15 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (16 : int))) = (109 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (17 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (18 : int))) = (97 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (19 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (20 : int))) = (100 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (22 : int))) = (100 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (23 : int))) = (111 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (24 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (25 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (26 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (27 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (28 : int))) = (111 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (29 : int))) = (116 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (30 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (31 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (32 : int))) = (120 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (33 : int))) = (105 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (34 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (35 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (36 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (37 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (38 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (39 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (40 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (41 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (42 : int))) = (115 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (43 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (44 : int))) = (119 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (45 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (46 : int))) = (114 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (47 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (48 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (49 : int))) = (109 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (50 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (51 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (52 : int))) = (97 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (53 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (54 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_409 __void_param) (55 : int))) = (114 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:157, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_411
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_411 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_411__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_411 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (1 : int))) = (105 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (10 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (11 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (12 : int))) = (98 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (14 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (17 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (19 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (20 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (21 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (22 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (23 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (24 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (26 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (27 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (29 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (30 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (31 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (33 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (34 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (35 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (36 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (37 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (38 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (39 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (40 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_411 __void_param) (41 : int))) = (101 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:161, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_413
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_413 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_413__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_413 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (1 : int))) = (116 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (5 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (7 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (9 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (10 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (11 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (12 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (13 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (14 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (16 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (17 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (20 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (21 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (22 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (23 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (24 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_413 __void_param) (25 : int))) = (100 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:155, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_415
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_415 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_415__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_415 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_415 __void_param) (1 : int))) = (114 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_415 __void_param) (2 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_415 __void_param) (3 : int))) = (109 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:145, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_420
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_420 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_420__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_420 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (1 : int))) = (105 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (10 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (11 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (12 : int))) = (98 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (14 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (17 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (19 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (20 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (21 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (22 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (23 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (24 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (26 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (27 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (29 : int))) = (103 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (30 : int))) = (101 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (31 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (33 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (34 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (35 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (36 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (37 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (38 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (39 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (40 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_420 __void_param) (41 : int))) = (101 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:149, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_422
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_422 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_422__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_422 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (1 : int))) = (116 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (5 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (7 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (9 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (10 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (11 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (12 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (13 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (14 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (16 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (17 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (20 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (21 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (22 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (23 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (24 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_422 __void_param) (25 : int))) = (100 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:143, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_424
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_424 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_424__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_424 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_424 __void_param) (1 : int))) = (103 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_424 __void_param) (2 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_424 __void_param) (3 : int))) = (116 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:130, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_429
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_429 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_429__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_429 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (1 : int))) = (105 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (2 : int))) = (110 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (3 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (4 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (6 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (7 : int))) = (100 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (8 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (9 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (10 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (11 : int))) = (109 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (12 : int))) = (98 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (13 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (14 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (15 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (16 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (17 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (19 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (20 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (21 : int))) = (107 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (22 : int))) = (101 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (23 : int))) = (110 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (24 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (26 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (27 : int))) = (102 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (29 : int))) = (112 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (30 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (31 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (33 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (34 : int))) = (114 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (35 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (36 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (37 : int))) = (101 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (38 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (39 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (40 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_429 __void_param) (41 : int))) = (101 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:134, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_431
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_431 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_431__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_431 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (1 : int))) = (116 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (5 : int))) = (117 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (6 : int))) = (114 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (7 : int))) = (108 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (8 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (9 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (10 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (11 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (12 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (13 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (14 : int))) = (104 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (15 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (16 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (17 : int))) = (115 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (18 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (19 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (20 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (21 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (22 : int))) = (97 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (23 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (24 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_431 __void_param) (25 : int))) = (100 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:137, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_433
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_433 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_433__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_433 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (1 : int))) = (116 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (4 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (5 : int))) = (112 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (6 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (7 : int))) = (115 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (8 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (9 : int))) = (119 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (10 : int))) = (111 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (11 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (12 : int))) = (100 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (13 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (14 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (15 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (16 : int))) = (110 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (17 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (18 : int))) = (116 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (19 : int))) = (104 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (20 : int))) = (32 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (21 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (22 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (23 : int))) = (32 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (24 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (25 : int))) = (110 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (26 : int))) = (118 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (27 : int))) = (97 : int)) ) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (28 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (29 : int))) = (105 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_433 __void_param) (30 : int))) = (100 : int)) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:128, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_435
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_435 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_435__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_435 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_435 __void_param) (1 : int))) = (112 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_435 __void_param) (2 : int))) = (117 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_435 __void_param) (3 : int))) = (116 : int)) ))

end

(* Module for defining a value for string literal  defined at main.adb:113, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_440
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_440 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_440__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_440 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (8 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (9 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (10 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (12 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (15 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (22 : int))) = (80 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (23 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (24 : int))) = (78 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (26 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (27 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (29 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (31 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (33 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (34 : int))) = (113 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (35 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (36 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (37 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (39 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (40 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (41 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_440 __void_param) (42 : int))) = (52 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:111, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_458
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_458 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_458__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_458 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (1 : int))) = (108 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (2 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (3 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_458 __void_param) (4 : int))) = (107 : int)) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:96, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_463
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_463 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_463__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_463 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (5 : int))) = (108 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (7 : int))) = (110 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (8 : int))) = (103 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (9 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (10 : int))) = (104 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (11 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (12 : int))) = (111 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (13 : int))) = (102 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (14 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (15 : int))) = (109 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (16 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (17 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (18 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (19 : int))) = (101 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (20 : int))) = (114 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (21 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (22 : int))) = (80 : int)) ) ) ) )/\( ( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (23 : int))) = (73 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (24 : int))) = (78 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (25 : int))) = (32 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (26 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (27 : int))) = (115 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (28 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (29 : int))) = (110 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (30 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (31 : int))) = (116 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (32 : int))) = (32 : int)) ) ) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (33 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (34 : int))) = (113 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (35 : int))) = (117 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (36 : int))) = (97 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (37 : int))) = (108 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (38 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (39 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (40 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (41 : int))) = (32 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_463 __void_param) (42 : int))) = (52 : int)) ) ) ) ) ) ))

end

(* Module for defining a value for string literal  defined at main.adb:94, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_481
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_481 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_481__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_481 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (1 : int))) = (117 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (2 : int))) = (110 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (3 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (4 : int))) = (111 : int)) )/\( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (5 : int))) = (99 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_481 __void_param) (6 : int))) = (107 : int)) ) ) ))

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_503
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_503 
   (temp___505 : int) : Array__Int__Standard__character.map

end

(* Module for declaring an abstract function for the aggregate at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_546
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp_____aggregate_def_546 
   (temp___548 : int) : Array__Int__Standard__character.map

end
(* Module for defining the value of constant "default_priority" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (31 : int))

end

(* Module for defining the value of constant "max_mystring_length" defined at mystring.ads:2 instantiated at main.adb:62, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__lines__max_mystring_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length

 axiom max_mystring_length__def_axiom :
  ((Main__lines__max_mystring_length.max_mystring_length ) = (2048 : int))

end

(* Module for defining the value of constant "max_url_length" defined at passworddatabase.ads:7, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_url_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_url_length as Passworddatabase__max_url_length

 axiom max_url_length__def_axiom :
  ((Passworddatabase__max_url_length.max_url_length ) = (1024 : int))

end

(* Module for defining the value of constant "max_password_length" defined at passworddatabase.ads:6, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Passworddatabase__max_password_length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Passworddatabase__max_password_length as Passworddatabase__max_password_length

 axiom max_password_length__def_axiom :
  ((Passworddatabase__max_password_length.max_password_length ) = (100 : int))

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__line_length__2.line_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada__text_io__standard_in   ada__text_io__file_system   ada__text_io__standard_out   ada__text_io__standard_err   ada__text_io__current_in   ada__text_io__current_out   ada__text_io__current_err   : Main.__private [(Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err)].
   ( true -> (let result = (Ada__text_io__page_length__2.page_length__2 ada__text_io__standard_in ada__text_io__file_system ada__text_io__standard_out ada__text_io__standard_err ada__text_io__current_in ada__text_io__current_out ada__text_io__current_err) in (
    ( ( true /\ (Ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Manager__judge as Manager__judge
 use        Manager__pin1 as Manager__pin1
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  (Pin__pin___axiom.dynamic_invariant Manager__pin1.pin1.int__content True True True True) }
  reads {Manager__judge.judge, Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Manager__pin1.pin1}
  writes {Manager__judge.judge, Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, Manager__pin1.pin1}

end

(* Module giving a program function and a defining axiom for the expression function "length" defined at mystring.ads:16 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__length___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep

 val length 
   (m : Main__lines__mystring.mystring) : int
  requires {  true }
  ensures {  ( ( (result = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard result m) )/\( (Standard__natural___axiom.dynamic_invariant result True False True True) /\ ( (result = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ ( [@GP_Pretty_Ada:110033] (result <= (2048 : int)) ) ) ) ) }
 
 axiom length__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__length.length m) in (
    (if ((Main__lines__length.length__function_guard result m)) then (
     ( ( ( [@GP_Pretty_Ada:110033] (result <= (2048 : int)) ) /\ (Standard__natural___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))
 
 axiom length__def_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__length.length m)].
   ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (let result = (Main__lines__length.length m) in (
    (Main__lines__length.length__function_guard result m)))
    ) -> ((Main__lines__length.length m) = (Main__lines__mystring__T13b__rep.to_rep m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ))

end

(* Module for declaring a program function (and possibly an axiom) for "to_string" defined at mystring.ads:5 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__to_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__to_string as Main__lines__to_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val to_string 
   (m : Main__lines__mystring.mystring) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Main__lines__to_string.to_string m)) /\ (Main__lines__to_string.to_string__function_guard result m) )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( ( ( [@GP_Pretty_Ada:109466] ((Standard__string.length result) = (epsilon temp___result_228 : int.
   ( (temp___result_228 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_228 m) ))) ) /\ ( [@GP_Pretty_Ada:109473] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:109478] ((Standard__string.last result) = (epsilon temp___result_229 : int.
   ( (temp___result_229 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_229 m) ))) ) ) ) ) }
 
 axiom to_string__post_axiom :
  (forall m   : Main__lines__mystring.mystring [(Main__lines__to_string.to_string m)].
   ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) -> (let result = (Main__lines__to_string.to_string m) in (
    (if ((Main__lines__to_string.to_string__function_guard result m)) then (
     ( ( ( ( ( [@GP_Pretty_Ada:109466] ((Standard__string.length result) = (epsilon temp___result_230 : int.
      ( (temp___result_230 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_230 m) ))) ) /\ ( [@GP_Pretty_Ada:109473] ((Standard__string.first result) = (1 : int)) ) ) /\ ( [@GP_Pretty_Ada:109478] ((Standard__string.last result) = (epsilon temp___result_231 : int.
      ( (temp___result_231 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_231 m) ))) ) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at mystring.ads:8 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__from_string as Main__lines__from_string
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val from_string 
   (s : Standard__string.string) : Main__lines__mystring.mystring
  requires {  ( [@GP_Pretty_Ada:109951] ((Standard__string.length s) <= (2048 : int)) ) }
  ensures {  ( ( (result = (Main__lines__from_string.from_string s)) /\ (Main__lines__from_string.from_string__function_guard result s) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:109965] ((epsilon temp___result_232 : int.
   ( (temp___result_232 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_232 result) )) = (Standard__string.length s)) ) ) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Main__lines__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( [@GP_Pretty_Ada:109951] ((Standard__string.length s) <= (2048 : int)) ) ) -> (let result = (Main__lines__from_string.from_string s) in (
    (if ((Main__lines__from_string.from_string__function_guard result s)) then (
     ( ( ( [@GP_Pretty_Ada:109965] ((epsilon temp___result_233 : int.
      ( (temp___result_233 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_233 result) )) = (Standard__string.length s)) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "less" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__less___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less as Main__lines__less

 val less 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__less.less m1 m2)) /\ (Main__lines__less.less__function_guard result m1 m2) )/\true ) }

end

(* Module giving a program function and a defining axiom for the expression function "get" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Main__lines__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val get 
   (m : Main__lines__mystring.mystring) (index : int) : int
  requires {  ( [@GP_Pretty_Ada:110101] (index <= (epsilon temp___result_234 : int.
   ( (temp___result_234 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_234 m) ))) ) }
  ensures {  ( ( (result = (Main__lines__get.get m index)) /\ (Main__lines__get.get__function_guard result m index) )/\( (Standard__character___axiom.dynamic_invariant result True False True True) /\ (result = (Standard__character__rep.to_rep (let temp___235 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
   (Array__Int__Standard__character.get temp___235 index)))
  )) ) ) }
 
 axiom get__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ ( [@GP_Pretty_Ada:110101] (index <= (epsilon temp___result_236 : int.
    ( (temp___result_236 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_236 m) ))) ) ) -> (let result = (Main__lines__get.get m index) in (
    (if ((Main__lines__get.get__function_guard result m index)) then (
     ( ( true /\ (Standard__character___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))
 
 axiom get__def_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall index   : int [(Main__lines__get.get m index)].
   ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant index True True True True) ) /\ (let result = (Main__lines__get.get m index) in (
    (Main__lines__get.get__function_guard result m index)))
    ) -> ((Main__lines__get.get m index) = (Standard__character__rep.to_rep (let temp___237 [@mlw:proxy_symbol] [@introduced] = m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get temp___237 index)))
   )) )))

end

(* Module for declaring a program function (and possibly an axiom) for "equal" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__equal___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__get as Main__lines__get
 use        Main__lines__equal as Main__lines__equal

 val equal 
   (m1 : Main__lines__mystring.mystring) (m2 : Main__lines__mystring.mystring) : bool
  requires {  true }
  ensures {  ( ( (result = (Main__lines__equal.equal m1 m2)) /\ (Main__lines__equal.equal__function_guard result m1 m2) )/\(if ((result = True)) then (
   ( ( [@GP_Pretty_Ada:109572] ((epsilon temp___result_238 : int.
    ( (temp___result_238 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_238 m1) )) = (epsilon temp___result_239 : int.
    ( (temp___result_239 = (Main__lines__length.length m2)) /\ (Main__lines__length.length__function_guard temp___result_239 m2) ))) ) /\ (forall i   [@model_trace:109590] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_240 : int.
     ( (temp___result_240 = (Main__lines__length.length m1)) /\ (Main__lines__length.length__function_guard temp___result_240 m1) ))) ) -> ( [@GP_Pretty_Ada:109580] ((epsilon temp___result_241 : int.
     ( (temp___result_241 = (Main__lines__get.get m1 i)) /\ (Main__lines__get.get__function_guard temp___result_241 m1 i) )) = (epsilon temp___result_242 : int.
     ( (temp___result_242 = (Main__lines__get.get m2 i)) /\ (Main__lines__get.get__function_guard temp___result_242 m2 i) ))) ) )) )) else (
   ( [@GP_Pretty_Ada:110179] true ))) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "substring" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__substring___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__substring as Main__lines__substring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom

 val substring 
   (m : Main__lines__mystring.mystring) (from : int) (to__ : int) : Main__lines__mystring.mystring
  requires {  ( ( [@GP_Pretty_Ada:109658] (from <= to__) ) /\ ( [@GP_Pretty_Ada:109661] (to__ <= (epsilon temp___result_243 : int.
   ( (temp___result_243 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_243 m) ))) ) ) }
  ensures {  ( ( (result = (Main__lines__substring.substring m from to__)) /\ (Main__lines__substring.substring__function_guard result m from to__) )/\( (Main__lines__mystring___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:110074] ((epsilon temp___result_244 : int.
   ( (temp___result_244 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_244 result) )) = ((to__ - from) + (1 : int))) ) ) ) }
 
 axiom substring__post_axiom :
  (forall m   : Main__lines__mystring.mystring.
  (forall from   to__   : int [(Main__lines__substring.substring m from to__)].
   ( ( ( ( (Main__lines__mystring___axiom.dynamic_invariant m True True True True) /\ (Standard__positive___axiom.dynamic_invariant from True True True True) ) /\ (Standard__positive___axiom.dynamic_invariant to__ True True True True) ) /\ ( ( [@GP_Pretty_Ada:109658] (from <= to__) ) /\ ( [@GP_Pretty_Ada:109661] (to__ <= (epsilon temp___result_245 : int.
    ( (temp___result_245 = (Main__lines__length.length m)) /\ (Main__lines__length.length__function_guard temp___result_245 m) ))) ) ) ) -> (let result = (Main__lines__substring.substring m from to__) in (
    (if ((Main__lines__substring.substring__function_guard result m from to__)) then (
     ( ( ( [@GP_Pretty_Ada:110074] ((epsilon temp___result_246 : int.
      ( (temp___result_246 = (Main__lines__length.length result)) /\ (Main__lines__length.length__function_guard temp___result_246 result) )) = ((to__ - from) + (1 : int))) ) /\ (Main__lines__mystring___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "get_line" defined at mystring.ads:23 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main__lines__get_line___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line 
   (m__split_fields : Main__lines__mystring.__split_fields__ref) : unit
  requires {  true }
  ensures {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, m__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "get_line__2" defined at a-textio.ads:481, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__get_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val get_line__2 
   (item : Array__Int__Standard__character.map__ref) (item__first : Standard__integer.integer) (item__last : Standard__integer.integer) (last : int__ref) : unit
  requires {  true }
  ensures {  ( ( ( ( [@GP_Pretty_Ada:23956] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:23962] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) /\ (if (((Integer.length (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)) > (0 : int))) then (
   ( [@GP_Pretty_Ada:23971] ( (((Standard__integer__rep.to_rep item__first) - (1 : int)) <= last.int__content) /\ (last.int__content <= (Standard__integer__rep.to_rep item__last)) ) )) else (
   ( [@GP_Pretty_Ada:23982] (last.int__content = ((Standard__integer__rep.to_rep item__first) - (1 : int))) ))) ) /\ ( (if (True) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep item__first) (Standard__integer__rep.to_rep item__last)))) /\ (Standard__natural___axiom.dynamic_invariant last.int__content True True True True) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err, item, last}

end

(* Module for declaring a program function (and possibly an axiom) for "argument_count" defined at mycommandline.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument_count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count

 val argument_count 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard result ()) )/\(Standard__natural___axiom.dynamic_invariant result True False True True) ) }
 
 axiom argument_count__post_axiom :
  (forall __void_param   : unit [(Mycommandline__argument_count.argument_count __void_param)].
   (let result = (Mycommandline__argument_count.argument_count __void_param) in (
    (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put__4" defined at a-textio.ads:465, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__text_io__put__4___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada__text_io__line_length__2 as Ada__text_io__line_length__2
 use        Ada__text_io__page_length__2 as Ada__text_io__page_length__2
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err
 use        Ada__text_io__standard_in as Ada__text_io__standard_in
 use        Ada__text_io__file_system as Ada__text_io__file_system
 use        Ada__text_io__standard_out as Ada__text_io__standard_out
 use        Ada__text_io__standard_err as Ada__text_io__standard_err
 use        Ada__text_io__current_in as Ada__text_io__current_in
 use        Ada__text_io__current_out as Ada__text_io__current_out
 use        Ada__text_io__current_err as Ada__text_io__current_err

 val put__4 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:23825] ((old (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__line_length__2.line_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:23831] ((old (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada__text_io__page_length__2.page_length__2 Ada__text_io__standard_in.standard_in.Main.__private__content Ada__text_io__file_system.file_system.Main.__private__content Ada__text_io__standard_out.standard_out.Main.__private__content Ada__text_io__standard_err.standard_err.Main.__private__content Ada__text_io__current_in.current_in.Main.__private__content Ada__text_io__current_out.current_out.Main.__private__content Ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}
  writes {Ada__text_io__standard_in.standard_in, Ada__text_io__file_system.file_system, Ada__text_io__standard_out.standard_out, Ada__text_io__standard_err.standard_err, Ada__text_io__current_in.current_in, Ada__text_io__current_out.current_out, Ada__text_io__current_err.current_err}

end

(* Module for declaring a program function (and possibly an axiom) for "argument" defined at mycommandline.ads:7, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mycommandline__argument___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Mycommandline__argument_count as Mycommandline__argument_count
 use        Mycommandline__argument as Mycommandline__argument

 val argument 
   (number : int) : Standard__string.string
  requires {  ( [@GP_Pretty_Ada:98228] (number <= (epsilon temp___result_297 : int.
   ( (temp___result_297 = (Mycommandline__argument_count.argument_count ())) /\ (Mycommandline__argument_count.argument_count__function_guard temp___result_297 ()) ))) ) }
  ensures {  ( ( (result = (Mycommandline__argument.argument number)) /\ (Mycommandline__argument.argument__function_guard result number) )/\(Standard__string___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "from_string" defined at pin.ads:3, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Pin__from_string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Pin__from_string as Pin__from_string
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val from_string 
   (s : Standard__string.string) : int
  requires {  ( ( [@GP_Pretty_Ada:20429] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:20432]  : int.
   ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:20446] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:20452] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) }
  ensures {  ( ( (result = (Pin__from_string.from_string s)) /\ (Pin__from_string.from_string__function_guard result s) )/\(Pin__pin___axiom.dynamic_invariant result True False True True) ) }
 
 axiom from_string__post_axiom :
  (forall s   : Standard__string.string [(Pin__from_string.from_string s)].
   ( ( (Standard__string___axiom.dynamic_invariant s True True True True) /\ ( ( [@GP_Pretty_Ada:20429] ((Standard__string.length s) = (4 : int)) ) /\ (forall i   [@name:I] [@model_trace:20432]  : int.
    ( ( ((Standard__string.first s) <= i) /\ (i <= (Standard__string.last s)) ) -> ( ( [@GP_Pretty_Ada:20446] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) >= (48 : int)) ) /\ ( [@GP_Pretty_Ada:20452] ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array s) i)) <= (57 : int)) ) ) )) ) ) -> (let result = (Pin__from_string.from_string s) in (
    (if ((Pin__from_string.from_string__function_guard result s)) then (
     ( ( true /\ (Pin__pin___axiom.dynamic_invariant result True False True True) )/\true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "lock" defined at manager.ads:25, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Manager__lock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Manager__judge as Manager__judge
 use        Pin__from_string as Pin__from_string
 use        Manager__pin1 as Manager__pin1
 use        Pin__pin___axiom as Pin__pin___axiom

 val lock 
   (p : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:99081] ((Standard__string.length p) = (4 : int)) ) }
  ensures {  ( (if (( ((old Manager__judge.judge.bool__content ) = True) <-> false )) then (
   ( ( [@GP_Pretty_Ada:20781] (Manager__pin1.pin1.int__content = (epsilon temp___result_308 : int.
    ( (temp___result_308 = (Pin__from_string.from_string p)) /\ (Pin__from_string.from_string__function_guard temp___result_308 p) ))) ) /\ ( [@GP_Pretty_Ada:20787] ( (Manager__judge.judge.bool__content = True) <-> true ) ) )) else (
   ( [@GP_Pretty_Ada:99158] true ))) /\ (Pin__pin___axiom.dynamic_invariant Manager__pin1.pin1.int__content True True True True) ) }
  reads {Manager__judge.judge, Manager__pin1.pin1}
  writes {Manager__judge.judge, Manager__pin1.pin1}

end

(* Module for declaring a program function (and possibly an axiom) for "init" defined at passworddatabase.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__init___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val init 
   (d : Passworddatabase__database.database__ref) : unit
  requires {  true }
  ensures {  (Passworddatabase__database___axiom.dynamic_invariant d.Passworddatabase__database.database__content True True True True) }
  writes {d}

end

(* Module for declaring a program function (and possibly an axiom) for "trim" defined at a-strfix.ads:468, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__strings__fixed__trim___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Ada__strings__fixed__trim as Ada__strings__fixed__trim
 use        Ada__strings__trim_end___axiom as Ada__strings__trim_end___axiom

 val trim 
   (source : Standard__string.string) (side : int) : Standard__string.string
  requires {  true }
  ensures {  ( ( (result = (Ada__strings__fixed__trim.trim source side)) /\ true )/\( (Standard__string___axiom.dynamic_invariant result True False True True) /\ ( [@GP_Pretty_Ada:108908] ((Standard__string.length result) <= (Standard__string.length source)) ) ) ) }
 
 axiom trim__post_axiom :
  (forall source   : Standard__string.string.
  (forall side   : int [(Ada__strings__fixed__trim.trim source side)].
   ( ( (Standard__string___axiom.dynamic_invariant source True True True True) /\ (Ada__strings__trim_end___axiom.dynamic_invariant side True True True True) ) -> (let result = (Ada__strings__fixed__trim.trim source side) in (
    ( ( ( [@GP_Pretty_Ada:108908] ((Standard__string.length result) <= (Standard__string.length source)) ) /\ (Standard__string___axiom.dynamic_invariant result True False True True) )/\true )))
    )))

end

(* Module for declaring a program function (and possibly an axiom) for "tokenise" defined at mystringtokeniser.ads:14, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Mystringtokeniser__tokenise___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Integer as Integer
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 val tokenise 
   (s : Standard__string.string) (tokens : Array__Int__Mystringtokeniser__tokenextent.map__ref) (tokens__first : Standard__integer.integer) (tokens__last : Standard__integer.integer) (count : int__ref) : unit
  requires {  ( (if (((Standard__string.length s) > (0 : int))) then (
   ( [@GP_Pretty_Ada:17486] ((Standard__string.first s) <= (Standard__string.last s)) )) else (
   ( [@GP_Pretty_Ada:98734] true ))) /\ ( [@GP_Pretty_Ada:17495] ((Standard__integer__rep.to_rep tokens__first) <= (Standard__integer__rep.to_rep tokens__last)) ) ) }
  ensures {  ( ( ( [@GP_Pretty_Ada:17503] (count.int__content <= (Integer.length (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last))) ) /\ (forall index   [@model_trace:17508] [@name:Index]  : int.
   ( ( ((Standard__integer__rep.to_rep tokens__first) <= index) /\ (index <= ((Standard__integer__rep.to_rep tokens__first) + (count.int__content - (1 : int)))) ) -> ( ( ( [@GP_Pretty_Ada:17533] ((Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start) >= (Standard__string.first s)) ) /\ ( [@GP_Pretty_Ada:17543] ((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) > (0 : int)) ) ) /\ ( [@GP_Pretty_Ada:17553] (((Standard__natural__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length) - (1 : int)) <= ((Standard__string.last s) - (Standard__positive__rep.to_rep (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content index).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) ) ) )) ) /\ ( ( (if (True) then (
   true) else (
   (Mystringtokeniser__tokenarray.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep tokens__first) (Standard__integer__rep.to_rep tokens__last)))) /\ (forall temp___322   : int.
   (if (( ((Standard__integer__rep.to_rep tokens__first) <= temp___322) /\ (temp___322 <= (Standard__integer__rep.to_rep tokens__last)) )) then (
    (Mystringtokeniser__tokenextent___axiom.dynamic_invariant (Array__Int__Mystringtokeniser__tokenextent.get tokens.Array__Int__Mystringtokeniser__tokenextent.map__content temp___322) True False True True)) else true)) ) /\ (Standard__natural___axiom.dynamic_invariant count.int__content True True True True) ) ) }
  writes {tokens, count}

end

(* Module for declaring a program function (and possibly an axiom) for "unlock" defined at manager.ads:21, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Manager__unlock___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Manager__judge as Manager__judge
 use        Pin__from_string as Pin__from_string
 use        Manager__pin1 as Manager__pin1

 val unlock 
   (p : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:99031] ((Standard__string.length p) = (4 : int)) ) }
  ensures {  (if (( (Manager__pin1.pin1.int__content = (epsilon temp___result_325 : int.
   ( (temp___result_325 = (Pin__from_string.from_string p)) /\ (Pin__from_string.from_string__function_guard temp___result_325 p) ))) /\ ( ((old Manager__judge.judge.bool__content ) = True) <-> true ) )) then (
   ( [@GP_Pretty_Ada:20743] ( (Manager__judge.judge.bool__content = True) <-> false ) )) else (
   ( [@GP_Pretty_Ada:99152] true ))) }
  reads {Manager__judge.judge, Manager__pin1.pin1}
  writes {Manager__judge.judge}

end

(* Module for declaring a program function (and possibly an axiom) for "length__3" defined at passworddatabase.ads:43, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__length__3___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Ada__containers__count_type as Ada__containers__count_type
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom

 val length__3 
   (d : Passworddatabase__database.database) : int
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__length__3.length__3 d)) /\ (Passworddatabase__length__3.length__3__function_guard result d) )/\(Ada__containers__count_type___axiom.dynamic_invariant result True False True True) ) }
 
 axiom length__3__post_axiom :
  (forall d   : Passworddatabase__database.database [(Passworddatabase__length__3.length__3 d)].
   (let result = (Passworddatabase__length__3.length__3 d) in (
    (Ada__containers__count_type.dynamic_property Ada__containers__count_type.first Ada__containers__count_type.last result)))
  )

end

(* Module for declaring a program function (and possibly an axiom) for "put" defined at manager.ads:17, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Manager__put___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database
 use        Manager__judge as Manager__judge
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val put 
   (db : Passworddatabase__database.database__ref) (s : Standard__string.string) (s1 : Standard__string.string) : unit
  requires {  ( ( [@GP_Pretty_Ada:20672] ((Standard__string.length s) <= (1024 : int)) ) /\ ( [@GP_Pretty_Ada:20678] ((Standard__string.length s1) <= (100 : int)) ) ) }
  ensures {  ( (if (( ((old Manager__judge.judge.bool__content ) = True) <-> false )) then (
   ( [@GP_Pretty_Ada:20690] ((epsilon temp___result_334 : int.
    ( (temp___result_334 = (Passworddatabase__length__3.length__3 db.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_334 db.Passworddatabase__database.database__content) )) = ((epsilon temp___result_335 : int.
    ( (temp___result_335 = (Passworddatabase__length__3.length__3 (old db.Passworddatabase__database.database__content ))) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_335 (old db.Passworddatabase__database.database__content )) )) + (1 : int))) )) else (
   ( [@GP_Pretty_Ada:99142] true ))) /\ (Passworddatabase__database___axiom.dynamic_invariant db.Passworddatabase__database.database__content True True True True) ) }
  reads {Manager__judge.judge}
  writes {db}

end

(* Module for declaring a program function (and possibly an axiom) for "get" defined at manager.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Manager__get___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database
 use        Manager__judge as Manager__judge

 val get 
   (db : Passworddatabase__database.database) (s : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:98902] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  true }
  reads {Manager__judge.judge}

end

(* Module for declaring a program function (and possibly an axiom) for "from_string__2" defined at passworddatabase.ads:33, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__from_string__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom

 val from_string__2 
   (s : Standard__string.string) : Passworddatabase__url.url
  requires {  ( [@GP_Pretty_Ada:73599] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( ( (result = (Passworddatabase__from_string__2.from_string__2 s)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard result s) )/\(Passworddatabase__url___axiom.dynamic_invariant result True False True True) ) }

end

(* Module for declaring a program function (and possibly an axiom) for "has_password_for" defined at passworddatabase.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Passworddatabase__has_password_for___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Passworddatabase__database as Passworddatabase__database
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for

 val has_password_for 
   (d : Passworddatabase__database.database) (u : Passworddatabase__url.url) : bool
  requires {  true }
  ensures {  ( ( (result = (Passworddatabase__has_password_for.has_password_for d u)) /\ (Passworddatabase__has_password_for.has_password_for__function_guard result d u) )/\true ) }

end

(* Module for declaring a program function (and possibly an axiom) for "rem_password" defined at manager.ads:13, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Manager__rem_password___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__string as Standard__string
 use        Passworddatabase__database as Passworddatabase__database
 use        Manager__judge as Manager__judge
 use        Passworddatabase__length__3 as Passworddatabase__length__3
 use        Passworddatabase__url as Passworddatabase__url
 use        Passworddatabase__from_string__2 as Passworddatabase__from_string__2
 use        Passworddatabase__has_password_for as Passworddatabase__has_password_for
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom

 val rem_password 
   (db : Passworddatabase__database.database__ref) (s : Standard__string.string) : unit
  requires {  ( [@GP_Pretty_Ada:98921] ((Standard__string.length s) <= (1024 : int)) ) }
  ensures {  ( (if (( ( ((epsilon temp___result_379 : bool.
   ( (temp___result_379 = (Passworddatabase__has_password_for.has_password_for db.Passworddatabase__database.database__content (epsilon temp___result_378 : Passworddatabase__url.url.
    ( (temp___result_378 = (Passworddatabase__from_string__2.from_string__2 s)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard temp___result_378 s) )))) /\ (Passworddatabase__has_password_for.has_password_for__function_guard temp___result_379 db.Passworddatabase__database.database__content (epsilon temp___result_378 : Passworddatabase__url.url.
    ( (temp___result_378 = (Passworddatabase__from_string__2.from_string__2 s)) /\ (Passworddatabase__from_string__2.from_string__2__function_guard temp___result_378 s) ))) )) = True) <-> true ) /\ ( ((old Manager__judge.judge.bool__content ) = True) <-> false ) )) then (
   ( [@GP_Pretty_Ada:20620] ((epsilon temp___result_376 : int.
    ( (temp___result_376 = (Passworddatabase__length__3.length__3 db.Passworddatabase__database.database__content)) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_376 db.Passworddatabase__database.database__content) )) = ((epsilon temp___result_377 : int.
    ( (temp___result_377 = (Passworddatabase__length__3.length__3 (old db.Passworddatabase__database.database__content ))) /\ (Passworddatabase__length__3.length__3__function_guard temp___result_377 (old db.Passworddatabase__database.database__content )) )) - (1 : int))) )) else (
   ( [@GP_Pretty_Ada:99132] true ))) /\ (Passworddatabase__database___axiom.dynamic_invariant db.Passworddatabase__database.database__content True True True True) ) }
  reads {Manager__judge.judge}
  writes {db}

end

(* Module for defining the value of the aggregate at main.adb:64, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__t__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t__aggregate_def as Main__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent

 axiom def_axiom :
  (forall temp___385   : Mystringtokeniser__tokenextent.tokenextent.
   (let temp___384 [@mlw:proxy_symbol] [@introduced] = (Main__t__aggregate_def.main__t__aggregate_def temp___385) in (
    (if ((Mystringtokeniser__tokenextent___axiom.dynamic_invariant temp___385 True True True True)) then (
     (forall temp___386   : int.
      ((Array__Int__Mystringtokeniser__tokenextent.get temp___384 temp___386) = temp___385))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:60, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__natural as Standard__natural
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__natural__rep as Standard__natural__rep
 use        Standard__positive as Standard__positive
 use        Standard__positive__rep as Standard__positive__rep
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Passworddatabase__database as Passworddatabase__database
 use        Main__d as Main__d
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__from_string___axiom as Main__lines__from_string___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__s as Main__s
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t as Main__t
 use        Main__numtokens as Main__numtokens
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Manager__judge as Manager__judge
 use        Manager__pin1 as Manager__pin1
 use        Manager__lock___axiom as Manager__lock___axiom
 use        Passworddatabase__init___axiom as Passworddatabase__init___axiom
 use        Ada__strings__fixed__trim___axiom as Ada__strings__fixed__trim___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Manager__unlock___axiom as Manager__unlock___axiom
 use        Manager__put___axiom as Manager__put___axiom
 use        Manager__get___axiom as Manager__get___axiom
 use        Manager__rem_password___axiom as Manager__rem_password___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Mystringtokeniser__tokenextent as Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Mystringtokeniser__tokenarray as Mystringtokeniser__tokenarray
 use        Main__TTtSP1 as Main__TTtSP1
 use        Main__TtS___axiom as Main__TtS___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Main__L_1 as Main__L_1
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Main__t__aggregate_def as Main__t__aggregate_def
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_387 as Temp___String_Literal_387
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_404 as Temp___String_Literal_404
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Array__Int__Mystringtokeniser__tokenextent as Array__Int__Mystringtokeniser__tokenextent
 use        Temp___String_Literal_407 as Temp___String_Literal_407
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_409 as Temp___String_Literal_409
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_411 as Temp___String_Literal_411
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_413 as Temp___String_Literal_413
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_415 as Temp___String_Literal_415
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_420 as Temp___String_Literal_420
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_422 as Temp___String_Literal_422
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_424 as Temp___String_Literal_424
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_429 as Temp___String_Literal_429
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_431 as Temp___String_Literal_431
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_433 as Temp___String_Literal_433
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_435 as Temp___String_Literal_435
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_440 as Temp___String_Literal_440
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_458 as Temp___String_Literal_458
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_463 as Temp___String_Literal_463
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp___String_Literal_481 as Temp___String_Literal_481
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__d___axiom as Main__d___axiom
 use        Main__s___axiom as Main__s___axiom
 use        Main__t___axiom as Main__t___axiom
 use        Main__t__aggregate_def___axiom as Main__t__aggregate_def___axiom
 use        Main__numtokens___axiom as Main__numtokens___axiom
 use        Main__L_1___axiom as Main__L_1___axiom
 use        Passworddatabase__database___axiom as Passworddatabase__database___axiom
 use        Passworddatabase__init___axiom as Passworddatabase__init___axiom
 use        Passworddatabase__has_password_for___axiom as Passworddatabase__has_password_for___axiom
 use        Passworddatabase__from_string__2___axiom as Passworddatabase__from_string__2___axiom
 use        Passworddatabase__length__3___axiom as Passworddatabase__length__3___axiom
 use        Ada__containers__count_type___axiom as Ada__containers__count_type___axiom
 use        Mycommandline__argument_count___axiom as Mycommandline__argument_count___axiom
 use        Mycommandline__argument___axiom as Mycommandline__argument___axiom
 use        Mystringtokeniser__tokenextent___axiom as Mystringtokeniser__tokenextent___axiom
 use        Mystringtokeniser__tokenarray___axiom as Mystringtokeniser__tokenarray___axiom
 use        Mystringtokeniser__tokenise___axiom as Mystringtokeniser__tokenise___axiom
 use        Pin__from_string___axiom as Pin__from_string___axiom
 use        Pin__pin___axiom as Pin__pin___axiom
 use        Manager__pin1___axiom as Manager__pin1___axiom
 use        Manager__judge___axiom as Manager__judge___axiom
 use        Manager__get___axiom as Manager__get___axiom
 use        Manager__rem_password___axiom as Manager__rem_password___axiom
 use        Manager__put___axiom as Manager__put___axiom
 use        Manager__unlock___axiom as Manager__unlock___axiom
 use        Manager__lock___axiom as Manager__lock___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__put__4___axiom as Ada__text_io__put__4___axiom
 use        Ada__strings__trim_end___axiom as Ada__strings__trim_end___axiom
 use        Ada__strings__fixed__trim___axiom as Ada__strings__fixed__trim___axiom
 use        Passworddatabase__url___axiom as Passworddatabase__url___axiom
 use        Main__lines__to_string___axiom as Main__lines__to_string___axiom
 use        Main__lines__from_string___axiom as Main__lines__from_string___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring___axiom as Main__lines__substring___axiom
 use        Main__lines__get_line___axiom as Main__lines__get_line___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__TtS___axiom as Main__TtS___axiom
 use        Main__TTtSP1___axiom as Main__TTtSP1___axiom

 exception Temp___exception_408
 
 exception Temp___exception_410
 
 exception Temp___exception_412
 
 exception Temp___exception_414
 
 exception Temp___exception_421
 
 exception Temp___exception_423
 
 exception Temp___exception_430
 
 exception Temp___exception_432
 
 exception Temp___exception_434
 
 exception Temp___exception_441
 
 exception Temp___exception_464
 
 let def [#"main.adb" 60 0 0][@GP_Subp:main.adb:60] 
   (__void_param : unit)
  requires { [#"main.adb" 60 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:60 *)
  ;
  [#"main.adb" 60 0 0] assume { [#"main.adb" 60 0 0] (Pin__pin___axiom.dynamic_invariant Manager__pin1.pin1.int__content True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:60 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:60 *)
  ;
  [#"main.adb" 60 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:60 *)
  ;
  [#"main.adb" 60 0 0] try
   ( ();
   ([#"main.adb" 60 0 0] ());
   ([#"main.adb" 61 0 0] ( [#"main.adb" 61 0 0] begin ensures {true} let _ = (let _ = ( () ) in (
    ()))
    in () end ;
   [#"main.adb" 61 0 0] assume { [#"main.adb" 61 0 0] (Passworddatabase__database___axiom.default_initial_assumption Main__d.d.Passworddatabase__database.database__content False) };
   [#"main.adb" 61 0 0] assume { [#"main.adb" 61 0 0] (Passworddatabase__database___axiom.dynamic_invariant Main__d.d.Passworddatabase__database.database__content False False True True) } ));
   ([#"main.adb" 62 0 0] ());
   ([#"mystring.adb" 3 0 0] ());
   ([#"main.adb" 62 0 0] ());
   ([#"main.adb" 63 0 0] ( [#"main.adb" 63 0 0] begin ensures {true} let _ = (let _ = (let temp___382 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 63 0 0] (val _f : Main__lines__mystring.mystring
   ensures {[#"main.adb" 63 0 0] true} 
   in _f) in (
    ( () )))
    in (
    ()))
    in () end ;
   [#"main.adb" 63 0 0] assume { [#"main.adb" 63 0 0] (Main__lines__mystring___axiom.default_initial_assumption { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False) };
   [#"main.adb" 63 0 0] assume { [#"main.adb" 63 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False False True True) } ));
   ([#"main.adb" 64 0 0] ());
   ([#"main.adb" 64 0 0] ( [#"main.adb" 64 0 0] (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (Main__t__aggregate_def.main__t__aggregate_def({ Mystringtokeniser__tokenextent.__split_fields = { Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start = ( 1 : Standard__positive.positive ); Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length = ( 0 : Standard__natural.natural ) } })) ));
   [#"main.adb" 64 0 0] assume { [#"main.adb" 64 0 0] (Main__TtS___axiom.dynamic_invariant Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True False True True) } ));
   ([#"main.adb" 65 0 0] ( [#"main.adb" 65 0 0] assume { [#"main.adb" 65 0 0] (Standard__natural___axiom.default_initial_assumption Main__numtokens.numtokens.int__content False) };
   [#"main.adb" 65 0 0] assume { [#"main.adb" 65 0 0] (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False False True True) } ));
   ([#"main.adb" 87 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:67:8] ([#"main.adb" 67 0 0] ()) );
   ( [@GP_Sloc:main.adb:67:5] ([#"main.adb" 67 0 0] (if (( ([#"main.adb" 67 0 0] [#"main.adb" 67 0 0] (([@branch_id=2437] Main.spark__branch).bool__content <- ( ((Mycommandline__argument_count___axiom.argument_count(())) <> (1 : int)) )));
   ( [@branch_id=2437] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:main.adb:68:9] ([#"main.adb" 68 0 0] ()) );
    ( [@GP_Sloc:main.adb:68:9] ([#"main.adb" 68 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_387.temp___String_Literal_387(()))) ((1 : int)) ((40 : int))))) )) );
    ( [@GP_Sloc:main.adb:69:9] ([#"main.adb" 69 0 0] [#"main.adb" 69 0 0] raise Return__exc) ) )) else (
    ( [@GP_Sloc:main.adb:70:5] (if (( ([#"main.adb" 70 0 0] [#"main.adb" 70 0 0] (([@branch_id=2445] Main.spark__branch).bool__content <- ( (( [#"main.adb" 70 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 70 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:70:12] [@vc:annotation] [@GP_Id:30] [@comment:    elsif (Argument(1)'Length /= 4) then            ^ main.adb:70:12:VC_PRECONDITION] [@GP_Shape:if__cmp__typeconv__length_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
     ()))
     in () end ;
    (Standard__string.length(([#"main.adb" 70 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:70:12] [@vc:annotation] [@GP_Id:30] [@comment:    elsif (Argument(1)'Length /= 4) then            ^ main.adb:70:12:VC_PRECONDITION] [@GP_Shape:if__cmp__typeconv__length_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) <> (4 : int)) )));
    ( [@branch_id=2445] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:main.adb:71:9] ([#"main.adb" 71 0 0] ()) );
     ( [@GP_Sloc:main.adb:71:9] ([#"main.adb" 71 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_404.temp___String_Literal_404(()))) ((1 : int)) ((42 : int))))) )) );
     ( [@GP_Sloc:main.adb:72:9] ([#"main.adb" 72 0 0] [#"main.adb" 72 0 0] raise Return__exc) ) )) else (
     ( ();
     ( [@GP_Sloc:main.adb:74:25] ([#"main.adb" 74 0 0] ()) );
     ( [@GP_Sloc:main.adb:74:65] ([#"main.adb" 74 0 0] ()) );
     ( [@GP_Sloc:main.adb:74:13] ([#"main.adb" 74 0 0] ()) );
     ( [@GP_Sloc:main.adb:74:53] ([#"main.adb" 74 0 0] ()) );
     ( [@GP_Sloc:main.adb:74:9] ([#"main.adb" 74 0 0] (if (( ([#"main.adb" 74 0 0] [#"main.adb" 74 0 0] (([@branch_id=2457] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___400 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 74 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@GP_Id:24] [@GP_Sloc:main.adb:74:13] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then             ^ main.adb:74:13:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
      (Array__Int__Standard__character.get((Standard__string.to_array(temp___400))) ((let temp___401 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = ([#"main.adb" 74 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:if__if__or__cmp__ixdcomp__first_ref__call_argument] [@GP_Sloc:main.adb:74:25] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                         ^ main.adb:74:25:VC_PRECONDITION] [@GP_Id:25] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
       ()))
       in () end ;
      (Standard__string.first(([#"main.adb" 74 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:if__if__or__cmp__ixdcomp__first_ref__call_argument] [@GP_Sloc:main.adb:74:25] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                         ^ main.adb:74:25:VC_PRECONDITION] [@GP_Id:25] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) in (
       (  assert {  ([#"main.adb" 74 0 0] ( [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                                    ^ main.adb:74:36:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:74:36] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__first_ref] [@GP_Id:26] ( ((Standard__string.first temp___400) <= temp___401) /\ (temp___401 <= (Standard__string.last temp___400)) ) )) };
       temp___401 )))
      ))))
     )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___402 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 74 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@GP_Sloc:main.adb:74:53] [@GP_Id:27] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                                                     ^ main.adb:74:53:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
      (Array__Int__Standard__character.get((Standard__string.to_array(temp___402))) ((let temp___403 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = ([#"main.adb" 74 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:74:65] [@GP_Shape:if__if__or__cmp__ixdcomp__first_ref__call_argument] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                                                                 ^ main.adb:74:65:VC_PRECONDITION] [@GP_Id:28] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
       ()))
       in () end ;
      (Standard__string.first(([#"main.adb" 74 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:74:65] [@GP_Shape:if__if__or__cmp__ixdcomp__first_ref__call_argument] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                                                                 ^ main.adb:74:65:VC_PRECONDITION] [@GP_Id:28] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) in (
       (  assert {  ([#"main.adb" 74 0 0] ( [@GP_Sloc:main.adb:74:76] [@vc:annotation] [@comment:        if (Argument(1)(Argument(1)'First) < '0' or Argument(1)(Argument(1)'First) > '9') then                                                                            ^ main.adb:74:76:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__first_ref] [@GP_Id:29] ( ((Standard__string.first temp___402) <= temp___403) /\ (temp___403 <= (Standard__string.last temp___402)) ) )) };
       temp___403 )))
      ))))
     )) > (57 : int)))) )));
     ( [@branch_id=2457] Main.spark__branch ).bool__content )) then (
      ( ();
      ( [@GP_Sloc:main.adb:75:13] ([#"main.adb" 75 0 0] [#"main.adb" 75 0 0] raise Return__exc) ) )) else (
      ( [@GP_Sloc:main.adb:76:9] (if (( ([#"main.adb" 76 0 0] [#"main.adb" 76 0 0] (([@branch_id=2482] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___396 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:16] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@GP_Sloc:main.adb:76:16] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                ^ main.adb:76:16:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
       (Array__Int__Standard__character.get((Standard__string.to_array(temp___396))) ((let temp___397 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 76 0 0] ( [@GP_Id:18] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:76:45] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                             ^ main.adb:76:45:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((( [#"main.adb" 76 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                            ^ main.adb:76:28:VC_PRECONDITION] [@GP_Id:17] [@vc:annotation] [@GP_Sloc:main.adb:76:28] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
        ()))
        in () end ;
       (Standard__string.first(([#"main.adb" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                            ^ main.adb:76:28:VC_PRECONDITION] [@GP_Id:17] [@vc:annotation] [@GP_Sloc:main.adb:76:28] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) + (1 : int)))) )) in (
        (  assert {  ([#"main.adb" 76 0 0] ( [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                             ^ main.adb:76:45:VC_INDEX_CHECK] [@GP_Id:19] [@vc:annotation] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:76:45] ( ((Standard__string.first temp___396) <= temp___397) /\ (temp___397 <= (Standard__string.last temp___396)) ) )) };
        temp___397 )))
       ))))
      )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___398 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                                          ^ main.adb:76:58:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:76:58] [@GP_Id:20] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
       (Array__Int__Standard__character.get((Standard__string.to_array(temp___398))) ((let temp___399 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 76 0 0] ( [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                                                                       ^ main.adb:76:87:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:76:87] [@GP_Id:22] (Standard__integer.range_check_((( [#"main.adb" 76 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                                                      ^ main.adb:76:70:VC_PRECONDITION] [@GP_Id:21] [@GP_Sloc:main.adb:76:70] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
        ()))
        in () end ;
       (Standard__string.first(([#"main.adb" 76 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                                                      ^ main.adb:76:70:VC_PRECONDITION] [@GP_Id:21] [@GP_Sloc:main.adb:76:70] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) + (1 : int)))) )) in (
        (  assert {  ([#"main.adb" 76 0 0] ( [@vc:annotation] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@comment:        elsif (Argument(1)(Argument(1)'First+1) < '0' or Argument(1)(Argument(1)'First+1) > '9') then                                                                                       ^ main.adb:76:87:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:76:87] [@GP_Id:23] ( ((Standard__string.first temp___398) <= temp___399) /\ (temp___399 <= (Standard__string.last temp___398)) ) )) };
        temp___399 )))
       ))))
      )) > (57 : int)))) )));
      ( [@branch_id=2482] Main.spark__branch ).bool__content )) then (
       ( ();
       ( [@GP_Sloc:main.adb:77:13] ([#"main.adb" 77 0 0] [#"main.adb" 77 0 0] raise Return__exc) ) )) else (
       ( [@GP_Sloc:main.adb:78:9] (if (( ([#"main.adb" 78 0 0] [#"main.adb" 78 0 0] (([@branch_id=2511] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___392 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 78 0 0] ( [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                ^ main.adb:78:16:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@GP_Sloc:main.adb:78:16] [@GP_Id:8] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
        (Array__Int__Standard__character.get((Standard__string.to_array(temp___392))) ((let temp___393 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 78 0 0] ( [@GP_Id:10] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                             ^ main.adb:78:45:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:78:45] (Standard__integer.range_check_((( [#"main.adb" 78 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 78 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                            ^ main.adb:78:28:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:78:28] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] [@GP_Id:9] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
         ()))
         in () end ;
        (Standard__string.first(([#"main.adb" 78 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                            ^ main.adb:78:28:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:78:28] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] [@GP_Id:9] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) + (2 : int)))) )) in (
         (  assert {  ([#"main.adb" 78 0 0] ( [@GP_Id:11] [@vc:annotation] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Reason:VC_INDEX_CHECK] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                             ^ main.adb:78:45:VC_INDEX_CHECK] [@GP_Sloc:main.adb:78:45] ( ((Standard__string.first temp___392) <= temp___393) /\ (temp___393 <= (Standard__string.last temp___392)) ) )) };
         temp___393 )))
        ))))
       )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___394 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 78 0 0] ( [@GP_Id:12] [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                                          ^ main.adb:78:58:VC_PRECONDITION] [@GP_Sloc:main.adb:78:58] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
        (Array__Int__Standard__character.get((Standard__string.to_array(temp___394))) ((let temp___395 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 78 0 0] ( [@GP_Id:14] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:78:87] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                                                                       ^ main.adb:78:87:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((( [#"main.adb" 78 0 0] begin ensures {true} let _ = (let _ = ([#"main.adb" 78 0 0] ( [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                                                      ^ main.adb:78:70:VC_PRECONDITION] [@GP_Id:13] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:78:70] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
         ()))
         in () end ;
        (Standard__string.first(([#"main.adb" 78 0 0] ( [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                                                      ^ main.adb:78:70:VC_PRECONDITION] [@GP_Id:13] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:78:70] [@GP_Shape:if__if__or__cmp__ixdcomp__add__first_ref__call_argument] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) + (2 : int)))) )) in (
         (  assert {  ([#"main.adb" 78 0 0] ( [@GP_Id:15] [@vc:annotation] [@GP_Shape:if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:78:87] [@comment:        elsif (Argument(1)(Argument(1)'First+2) < '0' or Argument(1)(Argument(1)'First+2) > '9') then                                                                                       ^ main.adb:78:87:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___394) <= temp___395) /\ (temp___395 <= (Standard__string.last temp___394)) ) )) };
         temp___395 )))
        ))))
       )) > (57 : int)))) )));
       ( [@branch_id=2511] Main.spark__branch ).bool__content )) then (
        ( ();
        ( [@GP_Sloc:main.adb:79:13] ([#"main.adb" 79 0 0] [#"main.adb" 79 0 0] raise Return__exc) ) )) else (
        ( [@GP_Sloc:main.adb:80:9] (if (( ([#"main.adb" 80 0 0] [#"main.adb" 80 0 0] (([@branch_id=2540] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___388 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 80 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@GP_Sloc:main.adb:80:16] [@GP_Id:2] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                ^ main.adb:80:16:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
         (Array__Int__Standard__character.get((Standard__string.to_array(temp___388))) ((let temp___389 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = ([#"main.adb" 80 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__last_ref__call_argument] [@GP_Sloc:main.adb:80:28] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                            ^ main.adb:80:28:VC_PRECONDITION] [@GP_Id:3] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
          ()))
          in () end ;
         (Standard__string.last(([#"main.adb" 80 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__last_ref__call_argument] [@GP_Sloc:main.adb:80:28] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                            ^ main.adb:80:28:VC_PRECONDITION] [@GP_Id:3] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) in (
          (  assert {  ([#"main.adb" 80 0 0] ( [@GP_Sloc:main.adb:80:39] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                                       ^ main.adb:80:39:VC_INDEX_CHECK] [@GP_Shape:if__if__or__cmp__ixdcomp__last_ref] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:4] ( ((Standard__string.first temp___388) <= temp___389) /\ (temp___389 <= (Standard__string.last temp___388)) ) )) };
          temp___389 )))
         ))))
        )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___390 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 80 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:if__if__or__cmp__ixdcomp__call_argument] [@vc:annotation] [@GP_Sloc:main.adb:80:55] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                                                       ^ main.adb:80:55:VC_PRECONDITION] [@GP_Id:5] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
         (Array__Int__Standard__character.get((Standard__string.to_array(temp___390))) ((let temp___391 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = ([#"main.adb" 80 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:80:67] [@GP_Shape:if__if__or__cmp__ixdcomp__last_ref__call_argument] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                                                                   ^ main.adb:80:67:VC_PRECONDITION] [@GP_Id:6] (Mycommandline__argument___axiom.argument((1 : int))) )) in (
          ()))
          in () end ;
         (Standard__string.last(([#"main.adb" 80 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:80:67] [@GP_Shape:if__if__or__cmp__ixdcomp__last_ref__call_argument] [@vc:annotation] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                                                                   ^ main.adb:80:67:VC_PRECONDITION] [@GP_Id:6] (Mycommandline__argument___axiom.argument((1 : int))) )))) ) in (
          (  assert {  ([#"main.adb" 80 0 0] ( [@GP_Shape:if__if__or__cmp__ixdcomp__last_ref] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:        elsif (Argument(1)(Argument(1)'Last) < '0' or Argument(1)(Argument(1)'Last) > '9') then                                                                              ^ main.adb:80:78:VC_INDEX_CHECK] [@GP_Sloc:main.adb:80:78] [@GP_Id:7] ( ((Standard__string.first temp___390) <= temp___391) /\ (temp___391 <= (Standard__string.last temp___390)) ) )) };
          temp___391 )))
         ))))
        )) > (57 : int)))) )));
        ( [@branch_id=2540] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:main.adb:81:13] ([#"main.adb" 81 0 0] [#"main.adb" 81 0 0] raise Return__exc) ) )) else (
         ( ();
         ( [@GP_Sloc:main.adb:83:21] ([#"main.adb" 83 0 0] ()) );
         ( [@GP_Sloc:main.adb:83:13] ([#"main.adb" 83 0 0] ()) );
         ( [@GP_Sloc:main.adb:83:13] ([#"main.adb" 83 0 0] ( ([#"main.adb" 83 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:            lock(p=>Argument(1));             ^ main.adb:83:13:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:83:13] [@GP_Shape:if__if__call_lock] [@GP_Id:1] (Manager__lock___axiom.lock(([#"main.adb" 83 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:83:21] [@vc:annotation] [@GP_Id:0] [@GP_Shape:if__if__call_lock__call_argument] [@comment:            lock(p=>Argument(1));                     ^ main.adb:83:21:VC_PRECONDITION] (Mycommandline__argument___axiom.argument((1 : int))) )))) )) )) ) ))) ))) ))) )))) ) ))) )))) );
   ( [@GP_Sloc:main.adb:86:10] ([#"main.adb" 86 0 0] ()) );
   ( [@GP_Sloc:main.adb:86:5] ([#"main.adb" 86 0 0] ()) );
   ( [@GP_Sloc:main.adb:86:5] ([#"main.adb" 86 0 0] ( (Passworddatabase__init___axiom.init(Main__d.d)) )) );
   ( [@GP_Sloc:main.adb:87:5] ([#"main.adb" 87 0 0] ( () (* Translation of an Ada loop from main.adb:87 *)
   ;
   (if (True) then (
    [#"main.adb" 87 0 0] try
     [#"main.adb" 87 0 0] try
      ( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = Manager__pin1.pin1.int__content in (
       ()))
       in () end ;
      (let temp___491 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 87 0 0] (val _f : int
      ensures {[#"main.adb" 87 0 0] (result = Manager__pin1.pin1.int__content)} 
      in _f) in (
       ( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = Main__numtokens.numtokens.int__content in (
        ()))
        in () end ;
       (let temp___490 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 87 0 0] (val _f : int
       ensures {[#"main.adb" 87 0 0] (result = Main__numtokens.numtokens.int__content)} 
       in _f) in (
        ( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = Main__d.d.Passworddatabase__database.database__content in (
         ()))
         in () end ;
        (let temp___489 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 87 0 0] (val _f : Passworddatabase__database.database
        ensures {[#"main.adb" 87 0 0] (result = Main__d.d.Passworddatabase__database.database__content)} 
        in _f) in (
         ( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
          ()))
          in () end ;
         (let temp___488 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 87 0 0] (val _f : Array__Int__Mystringtokeniser__tokenextent.map
         ensures {[#"main.adb" 87 0 0] (result = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content)} 
         in _f) in (
          ( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = Manager__judge.judge.bool__content in (
           ()))
           in () end ;
          (let temp___487 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 87 0 0] (val _f : bool
          ensures {[#"main.adb" 87 0 0] (result = Manager__judge.judge.bool__content)} 
          in _f) in (
           ( [#"main.adb" 87 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } in (
            ()))
            in () end ;
           (let temp___486 [@mlw:proxy_symbol] [@introduced] = [#"main.adb" 87 0 0] (val _f : Main__lines__mystring.mystring
           ensures {[#"main.adb" 87 0 0] (result = { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content })} 
           in _f) in (
            ( () (* First unroling of the loop statements appearing before the loop invariant of loop main.adb:87 *)
            ;
            () (* While loop translating the Ada loop from main.adb:87 *)
            ;
            [#"main.adb" 87 0 0] while True do
             ( () (* Assume implicit invariants from the loop main.adb:87 *)
             ;
             [#"main.adb" 87 0 0] assume { [#"main.adb" 87 0 0] ( ( ( ( ( ( ( ( ( ( ( ( true /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content } False True True True) )/\true ) /\ true )/\true ) /\ (Main__TtS___axiom.dynamic_invariant Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content True True True True) )/\true ) /\ (Passworddatabase__database___axiom.dynamic_invariant Main__d.d.Passworddatabase__database.database__content False True True True) )/\true ) /\ (Standard__natural___axiom.dynamic_invariant Main__numtokens.numtokens.int__content False True True True) )/\true ) /\ (Pin__pin___axiom.dynamic_invariant Manager__pin1.pin1.int__content True True True True) )/\true ) };
             () (* Check for absence of RTE in the invariant of loop main.adb:87 *)
             ;
             () (* Loop statements appearing after the loop invariant of loop main.adb:87 *)
             ;
             ();
             ( [@GP_Sloc:main.adb:88:24] ([#"main.adb" 88 0 0] ()) );
             ( [@GP_Sloc:main.adb:88:14] ([#"main.adb" 88 0 0] ()) );
             ( [@GP_Sloc:main.adb:88:14] ([#"main.adb" 88 0 0] ( (Main__lines__get_line___axiom.get_line(Main__s.s__split_fields)) )) );
             ( [@GP_Sloc:main.adb:89:9] ([#"main.adb" 89 0 0] ()) );
             ( [@GP_Sloc:main.adb:89:52] ([#"main.adb" 89 0 0] ()) );
             ( [@GP_Sloc:main.adb:89:41] ([#"main.adb" 89 0 0] ()) );
             ( [@GP_Sloc:main.adb:89:31] ([#"main.adb" 89 0 0] ()) );
             ( [@GP_Sloc:main.adb:89:18] ([#"main.adb" 89 0 0] ()) );
             ( [@GP_Sloc:main.adb:89:10] ([#"main.adb" 89 0 0] (let temp___405 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 89 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:        S:= Lines.From_String(Trim(Lines.To_String(S), Right));                  ^ main.adb:89:18:VC_PRECONDITION] [@GP_Shape:L_1_loop__s_assign__call_from_string] [@GP_Id:31] [@GP_Sloc:main.adb:89:18] (Main__lines__from_string___axiom.from_string((Ada__strings__fixed__trim___axiom.trim((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }))) ((1 : int))))) )) in (
               (Main__s.s__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___405.Main__lines__mystring.__split_fields ))))
             ) );
             ( [@GP_Sloc:main.adb:90:34] ([#"main.adb" 90 0 0] ()) );
             ( [@GP_Sloc:main.adb:90:23] ([#"main.adb" 90 0 0] ()) );
             ( [@GP_Sloc:main.adb:90:37] ([#"main.adb" 90 0 0] ()) );
             ( [@GP_Sloc:main.adb:90:39] ([#"main.adb" 90 0 0] ()) );
             ( [@GP_Sloc:main.adb:90:9] ([#"main.adb" 90 0 0] ()) );
             ( [@GP_Sloc:main.adb:90:9] ([#"main.adb" 90 0 0] (let mystringtokeniser__tokenise__tokens__compl = Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content in (
              [#"main.adb" 90 0 0] let mystringtokeniser__tokenise__tokens = { Array__Int__Mystringtokeniser__tokenextent.map__content = mystringtokeniser__tokenise__tokens__compl } in 
               ( ([#"main.adb" 90 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_loop__call_tokenise] [@vc:annotation] [@GP_Id:32] [@GP_Sloc:main.adb:90:9] [@comment:        Tokenise(Lines.To_String(S),T,NumTokens);         ^ main.adb:90:9:VC_PRECONDITION] (Mystringtokeniser__tokenise___axiom.tokenise((Main__lines__to_string___axiom.to_string({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }))) (mystringtokeniser__tokenise__tokens) ((Standard__integer__rep.of_rep(Main__TTtSP1.first))) ((Standard__integer__rep.of_rep(Main__TTtSP1.last))) (Main__numtokens.numtokens)) ));
                (Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content <- ( (let temp___406 [@mlw:proxy_symbol] [@introduced] = (Mystringtokeniser__tokenarray.of_array(mystringtokeniser__tokenise__tokens.Array__Int__Mystringtokeniser__tokenextent.map__content) (Main__TTtSP1.first) (Main__TTtSP1.last)) in (
                (Array__Int__Mystringtokeniser__tokenextent.slide (Mystringtokeniser__tokenarray.to_array temp___406) (Mystringtokeniser__tokenarray.first temp___406) Main__TTtSP1.first)))
                )) )))
             ) );
             ( [@GP_Sloc:main.adb:91:13] ([#"main.adb" 91 0 0] ()) );
             ( [@GP_Sloc:main.adb:91:30] ([#"main.adb" 91 0 0] ()) );
             ( [@GP_Sloc:main.adb:91:9] ([#"main.adb" 91 0 0] (if (( ([#"main.adb" 91 0 0] [#"main.adb" 91 0 0] (([@branch_id=2605] Main.spark__branch).bool__content <- ( (Boolean.orb((Main__numtokens.numtokens.int__content = (0 : int))) ((Main__numtokens.numtokens.int__content > (3 : int)))) )));
             ( [@branch_id=2605] Main.spark__branch ).bool__content )) then (
               raise Temp___exception_408) else (
              ( [@GP_Sloc:main.adb:94:9] (if (( ([#"main.adb" 94 0 0] [#"main.adb" 94 0 0] (([@branch_id=2618] Main.spark__branch).bool__content <- ( (Boolean.andb((let temp___485 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_481.temp___String_Literal_481(())) in (
              (let temp___484 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 94 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__and__cmp__call_to_string__call_substring] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="unlock" and NumTokens=2 then                                    ^ main.adb:94:36:VC_PRECONDITION] [@GP_Sloc:main.adb:94:36] [@GP_Id:212] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 94 0 0] ( [@GP_Sloc:main.adb:94:82] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="unlock" and NumTokens=2 then                                                                                  ^ main.adb:94:82:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:L_1_loop__if__and__cmp__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:211] (Standard__positive.range_check_((([#"main.adb" 94 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:94:70] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="unlock" and NumTokens=2 then                                                                      ^ main.adb:94:70:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__and__cmp__call_to_string__call_substring__sub__add] [@GP_Id:210] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
               (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___484))) ((Standard__string.first(temp___484))) ((Standard__string.last(temp___484))) (temp___485) ((1 : int)) ((6 : int)))))
              ))
              ) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
              ( [@branch_id=2618] Main.spark__branch ).bool__content )) then (
               ( ();
               ( [@GP_Sloc:main.adb:95:49] ([#"main.adb" 95 0 0] ()) );
               ( [@GP_Sloc:main.adb:95:38] ([#"main.adb" 95 0 0] ()) );
               ( [@GP_Sloc:main.adb:95:22] ([#"main.adb" 95 0 0] ()) );
               ( [@GP_Sloc:main.adb:95:13] ([#"main.adb" 95 0 0] (if (( ([#"main.adb" 95 0 0] [#"main.adb" 95 0 0] (([@branch_id=2651] Main.spark__branch).bool__content <- ( (( [#"main.adb" 95 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 95 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:209] [@vc:annotation] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                      ^ main.adb:95:38:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:95:38] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 95 0 0] ( [@GP_Id:208] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@GP_Sloc:main.adb:95:84] [@GP_Reason:VC_RANGE_CHECK] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                                    ^ main.adb:95:84:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 95 0 0] ( [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                        ^ main.adb:95:72:VC_OVERFLOW_CHECK] [@GP_Id:207] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:95:72] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                ()))
                in () end ;
               (Standard__string.length((Main__lines__to_string___axiom.to_string(([#"main.adb" 95 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:209] [@vc:annotation] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                      ^ main.adb:95:38:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:95:38] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 95 0 0] ( [@GP_Id:208] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@GP_Sloc:main.adb:95:84] [@GP_Reason:VC_RANGE_CHECK] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                                    ^ main.adb:95:84:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 95 0 0] ( [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                        ^ main.adb:95:72:VC_OVERFLOW_CHECK] [@GP_Id:207] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:95:72] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) <> (4 : int)) )));
               ( [@branch_id=2651] Main.spark__branch ).bool__content )) then (
                 raise Temp___exception_464) else (
                ( ();
                ( [@GP_Sloc:main.adb:99:125] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:114] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:98] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:285] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:274] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:258] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:53] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:42] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:26] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:213] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:202] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:186] ([#"main.adb" 99 0 0] ()) );
                ( [@GP_Sloc:main.adb:99:17] ([#"main.adb" 99 0 0] (if (( ([#"main.adb" 99 0 0] [#"main.adb" 99 0 0] (([@branch_id=2687] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___477 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 99 0 0] ( [@GP_Sloc:main.adb:99:42] [@GP_Reason:VC_PRECONDITION] [@GP_Id:195] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                          ^ main.adb:99:42:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 99 0 0] ( [@GP_Sloc:main.adb:99:88] [@GP_Id:194] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                        ^ main.adb:99:88:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 99 0 0] ( [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                            ^ main.adb:99:76:VC_OVERFLOW_CHECK] [@GP_Id:193] [@GP_Sloc:main.adb:99:76] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                 (Array__Int__Standard__character.get((Standard__string.to_array(temp___477))) ((let temp___478 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 99 0 0] ( [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                  ^ main.adb:99:114:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:198] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:99:114] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 99 0 0] ( [@GP_Sloc:main.adb:99:160] [@GP_Id:197] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                ^ main.adb:99:160:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 99 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:196] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                    ^ main.adb:99:148:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:99:148] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  ()))
                  in () end ;
                 (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 99 0 0] ( [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                  ^ main.adb:99:114:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Id:198] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:99:114] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 99 0 0] ( [@GP_Sloc:main.adb:99:160] [@GP_Id:197] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                ^ main.adb:99:160:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 99 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:196] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                    ^ main.adb:99:148:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:99:148] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                  (  assert {  ([#"main.adb" 99 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                    ^ main.adb:99:164:VC_INDEX_CHECK] [@GP_Sloc:main.adb:99:164] [@GP_Id:199] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___477) <= temp___478) /\ (temp___478 <= (Standard__string.last temp___477)) ) )) };
                  temp___478 )))
                 ))))
                )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___479 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 99 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:202] [@GP_Sloc:main.adb:99:202] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                          ^ main.adb:99:202:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 99 0 0] ( [@GP_Id:201] [@GP_Sloc:main.adb:99:248] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                        ^ main.adb:99:248:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 99 0 0] ( [@GP_Id:200] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:99:236] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                            ^ main.adb:99:236:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                 (Array__Int__Standard__character.get((Standard__string.to_array(temp___479))) ((let temp___480 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 99 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:205] [@vc:annotation] [@GP_Sloc:main.adb:99:274] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                  ^ main.adb:99:274:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 99 0 0] ( [@GP_Id:204] [@GP_Sloc:main.adb:99:320] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                                ^ main.adb:99:320:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 99 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:203] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                    ^ main.adb:99:308:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:99:308] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  ()))
                  in () end ;
                 (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 99 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:205] [@vc:annotation] [@GP_Sloc:main.adb:99:274] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                  ^ main.adb:99:274:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 99 0 0] ( [@GP_Id:204] [@GP_Sloc:main.adb:99:320] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                                ^ main.adb:99:320:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 99 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:203] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                    ^ main.adb:99:308:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:99:308] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                  (  assert {  ([#"main.adb" 99 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref] [@GP_Id:206] [@GP_Sloc:main.adb:99:324] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                                    ^ main.adb:99:324:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___479) <= temp___480) /\ (temp___480 <= (Standard__string.last temp___479)) ) )) };
                  temp___480 )))
                 ))))
                )) > (57 : int)))) )));
                ( [@branch_id=2687] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:100:21] ([#"main.adb" 100 0 0] [#"main.adb" 100 0 0] raise Return__exc) ) )) else (
                 ( [@GP_Sloc:main.adb:101:17] (if (( ([#"main.adb" 101 0 0] [#"main.adb" 101 0 0] (([@branch_id=2808] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___473 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 101 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                             ^ main.adb:101:45:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Id:179] [@GP_Sloc:main.adb:101:45] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 101 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                           ^ main.adb:101:91:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:101:91] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:178] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:79] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                               ^ main.adb:101:79:VC_OVERFLOW_CHECK] [@GP_Id:177] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  (Array__Int__Standard__character.get((Standard__string.to_array(temp___473))) ((let temp___474 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:173] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                             ^ main.adb:101:173:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:183] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] (Standard__integer.range_check_((( [#"main.adb" 101 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 101 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                     ^ main.adb:101:117:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:182] [@GP_Sloc:main.adb:101:117] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:163] [@vc:annotation] [@GP_Id:181] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                   ^ main.adb:101:163:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 101 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                       ^ main.adb:101:151:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:180] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:101:151] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   ()))
                   in () end ;
                  (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 101 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                     ^ main.adb:101:117:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:182] [@GP_Sloc:main.adb:101:117] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:163] [@vc:annotation] [@GP_Id:181] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                   ^ main.adb:101:163:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 101 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                       ^ main.adb:101:151:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:180] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:101:151] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (1 : int)))) )) in (
                   (  assert {  ([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:173] [@vc:annotation] [@GP_Id:184] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                             ^ main.adb:101:173:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___473) <= temp___474) /\ (temp___474 <= (Standard__string.last temp___473)) ) )) };
                   temp___474 )))
                  ))))
                 )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___475 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 101 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                               ^ main.adb:101:207:VC_PRECONDITION] [@vc:annotation] [@GP_Id:187] [@GP_Sloc:main.adb:101:207] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:253] [@vc:annotation] [@GP_Id:186] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                             ^ main.adb:101:253:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:241] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:185] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                 ^ main.adb:101:241:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  (Array__Int__Standard__character.get((Standard__string.to_array(temp___475))) ((let temp___476 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 101 0 0] ( [@GP_Id:191] [@GP_Sloc:main.adb:101:335] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:101:335:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((( [#"main.adb" 101 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 101 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Id:190] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:101:279] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:101:279:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 101 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:101:325:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:101:325] [@GP_Id:189] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 101 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:188] [@GP_Sloc:main.adb:101:313] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:101:313:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   ()))
                   in () end ;
                  (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 101 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Id:190] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:101:279] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:101:279:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 101 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:101:325:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:101:325] [@GP_Id:189] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 101 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:188] [@GP_Sloc:main.adb:101:313] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:101:313:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (1 : int)))) )) in (
                   (  assert {  ([#"main.adb" 101 0 0] ( [@GP_Sloc:main.adb:101:335] [@GP_Id:192] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:101:335:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___475) <= temp___476) /\ (temp___476 <= (Standard__string.last temp___475)) ) )) };
                   temp___476 )))
                  ))))
                 )) > (57 : int)))) )));
                 ( [@branch_id=2808] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:102:21] ([#"main.adb" 102 0 0] [#"main.adb" 102 0 0] raise Return__exc) ) )) else (
                  ( [@GP_Sloc:main.adb:103:17] (if (( ([#"main.adb" 103 0 0] [#"main.adb" 103 0 0] (([@branch_id=2933] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___469 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                             ^ main.adb:103:45:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Sloc:main.adb:103:45] [@GP_Id:163] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 103 0 0] ( [@GP_Sloc:main.adb:103:91] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                           ^ main.adb:103:91:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] [@GP_Id:162] (Standard__positive.range_check_((([#"main.adb" 103 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                               ^ main.adb:103:79:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:103:79] [@GP_Id:161] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   (Array__Int__Standard__character.get((Standard__string.to_array(temp___469))) ((let temp___470 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 103 0 0] ( [@GP_Id:167] [@GP_Sloc:main.adb:103:173] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                             ^ main.adb:103:173:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((( [#"main.adb" 103 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Sloc:main.adb:103:117] [@GP_Id:166] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                     ^ main.adb:103:117:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 103 0 0] ( [@GP_Id:165] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                   ^ main.adb:103:163:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:103:163] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                       ^ main.adb:103:151:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:103:151] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:164] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    ()))
                    in () end ;
                   (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Sloc:main.adb:103:117] [@GP_Id:166] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                     ^ main.adb:103:117:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 103 0 0] ( [@GP_Id:165] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                   ^ main.adb:103:163:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:103:163] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                       ^ main.adb:103:151:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:103:151] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:164] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (2 : int)))) )) in (
                    (  assert {  ([#"main.adb" 103 0 0] ( [@GP_Id:168] [@GP_Sloc:main.adb:103:173] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                             ^ main.adb:103:173:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___469) <= temp___470) /\ (temp___470 <= (Standard__string.last temp___469)) ) )) };
                    temp___470 )))
                   ))))
                  )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___471 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Id:171] [@GP_Sloc:main.adb:103:207] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                               ^ main.adb:103:207:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                             ^ main.adb:103:253:VC_RANGE_CHECK] [@GP_Sloc:main.adb:103:253] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:170] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 103 0 0] ( [@GP_Id:169] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:103:241] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                 ^ main.adb:103:241:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   (Array__Int__Standard__character.get((Standard__string.to_array(temp___471))) ((let temp___472 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 103 0 0] ( [@GP_Sloc:main.adb:103:335] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:103:335:VC_OVERFLOW_CHECK] [@GP_Id:175] (Standard__integer.range_check_((( [#"main.adb" 103 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:103:279:VC_PRECONDITION] [@GP_Id:174] [@GP_Sloc:main.adb:103:279] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:103:325:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:103:325] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:173] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:103:313:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:172] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:103:313] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    ()))
                    in () end ;
                   (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 103 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:103:279:VC_PRECONDITION] [@GP_Id:174] [@GP_Sloc:main.adb:103:279] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:103:325:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:103:325] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:173] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:103:313:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:172] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:103:313] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (2 : int)))) )) in (
                    (  assert {  ([#"main.adb" 103 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:103:335:VC_INDEX_CHECK] [@GP_Sloc:main.adb:103:335] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:176] ( ((Standard__string.first temp___471) <= temp___472) /\ (temp___472 <= (Standard__string.last temp___471)) ) )) };
                    temp___472 )))
                   ))))
                  )) > (57 : int)))) )));
                  ( [@branch_id=2933] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:104:21] ([#"main.adb" 104 0 0] [#"main.adb" 104 0 0] raise Return__exc) ) )) else (
                   ( [@GP_Sloc:main.adb:105:17] (if (( ([#"main.adb" 105 0 0] [#"main.adb" 105 0 0] (([@branch_id=3058] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___465 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 105 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:105:45] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Id:149] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                             ^ main.adb:105:45:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 105 0 0] ( [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                           ^ main.adb:105:91:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:148] [@GP_Sloc:main.adb:105:91] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 105 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                               ^ main.adb:105:79:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:105:79] [@GP_Id:147] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    (Array__Int__Standard__character.get((Standard__string.to_array(temp___465))) ((let temp___466 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 105 0 0] ( [@GP_Sloc:main.adb:105:117] [@GP_Reason:VC_PRECONDITION] [@GP_Id:152] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                     ^ main.adb:105:117:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 105 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                   ^ main.adb:105:163:VC_RANGE_CHECK] [@GP_Id:151] [@vc:annotation] [@GP_Sloc:main.adb:105:163] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 105 0 0] ( [@GP_Id:150] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                       ^ main.adb:105:151:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:105:151] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     ()))
                     in () end ;
                    (Standard__string.last((Main__lines__to_string___axiom.to_string(([#"main.adb" 105 0 0] ( [@GP_Sloc:main.adb:105:117] [@GP_Reason:VC_PRECONDITION] [@GP_Id:152] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                     ^ main.adb:105:117:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 105 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                   ^ main.adb:105:163:VC_RANGE_CHECK] [@GP_Id:151] [@vc:annotation] [@GP_Sloc:main.adb:105:163] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 105 0 0] ( [@GP_Id:150] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                       ^ main.adb:105:151:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:105:151] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                     (  assert {  ([#"main.adb" 105 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                       ^ main.adb:105:167:VC_INDEX_CHECK] [@GP_Id:153] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref] [@GP_Sloc:main.adb:105:167] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___465) <= temp___466) /\ (temp___466 <= (Standard__string.last temp___465)) ) )) };
                     temp___466 )))
                    ))))
                   )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___467 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 105 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:156] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Sloc:main.adb:105:204] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                            ^ main.adb:105:204:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 105 0 0] ( [@GP_Sloc:main.adb:105:250] [@GP_Id:155] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                          ^ main.adb:105:250:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 105 0 0] ( [@GP_Id:154] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                              ^ main.adb:105:238:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:105:238] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    (Array__Int__Standard__character.get((Standard__string.to_array(temp___467))) ((let temp___468 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 105 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:159] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                    ^ main.adb:105:276:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:105:276] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 105 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                                  ^ main.adb:105:322:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:158] [@GP_Sloc:main.adb:105:322] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 105 0 0] ( [@GP_Id:157] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                      ^ main.adb:105:310:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:105:310] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     ()))
                     in () end ;
                    (Standard__string.last((Main__lines__to_string___axiom.to_string(([#"main.adb" 105 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:159] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                    ^ main.adb:105:276:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:105:276] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 105 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                                  ^ main.adb:105:322:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:158] [@GP_Sloc:main.adb:105:322] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 105 0 0] ( [@GP_Id:157] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                      ^ main.adb:105:310:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:105:310] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                     (  assert {  ([#"main.adb" 105 0 0] ( [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref] [@GP_Sloc:main.adb:105:326] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                                      ^ main.adb:105:326:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:160] ( ((Standard__string.first temp___467) <= temp___468) /\ (temp___468 <= (Standard__string.last temp___467)) ) )) };
                     temp___468 )))
                    ))))
                   )) > (57 : int)))) )));
                   ( [@branch_id=3058] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:main.adb:106:21] ([#"main.adb" 106 0 0] [#"main.adb" 106 0 0] raise Return__exc) ) )) else (
                    ( ();
                    ( [@GP_Sloc:main.adb:108:63] ([#"main.adb" 108 0 0] ()) );
                    ( [@GP_Sloc:main.adb:108:52] ([#"main.adb" 108 0 0] ()) );
                    ( [@GP_Sloc:main.adb:108:36] ([#"main.adb" 108 0 0] ()) );
                    ( [@GP_Sloc:main.adb:108:21] ([#"main.adb" 108 0 0] ()) );
                    ( [@GP_Sloc:main.adb:108:21] ([#"main.adb" 108 0 0] ( ([#"main.adb" 108 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:108:21] [@vc:annotation] [@GP_Id:146] [@GP_Shape:L_1_loop__if__if__if__call_unlock] [@comment:                    unlock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                     ^ main.adb:108:21:VC_PRECONDITION] (Manager__unlock___axiom.unlock((Main__lines__to_string___axiom.to_string(([#"main.adb" 108 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:108:52] [@vc:annotation] [@comment:                    unlock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                    ^ main.adb:108:52:VC_PRECONDITION] [@GP_Id:145] [@GP_Shape:L_1_loop__if__if__if__call_unlock__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 108 0 0] ( [@GP_Sloc:main.adb:108:98] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_unlock__call_to_string__call_substring__sub] [@GP_Id:144] [@GP_Reason:VC_RANGE_CHECK] [@comment:                    unlock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                  ^ main.adb:108:98:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 108 0 0] ( [@comment:                    unlock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                      ^ main.adb:108:86:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:108:86] [@GP_Id:143] [@GP_Shape:L_1_loop__if__if__if__call_unlock__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) )) )) ) ))) ))) ))) )))) ) )))) ) )) else (
               ( [@GP_Sloc:main.adb:111:9] (if (( ([#"main.adb" 111 0 0] [#"main.adb" 111 0 0] (([@branch_id=3211] Main.spark__branch).bool__content <- ( (Boolean.andb((let temp___462 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_458.temp___String_Literal_458(())) in (
               (let temp___461 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 111 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:111:36] [@vc:annotation] [@GP_Shape:L_1_loop__if__and__cmp__call_to_string__call_substring] [@GP_Id:142] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="lock" and NumTokens=2 then                                    ^ main.adb:111:36:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 111 0 0] ( [@vc:annotation] [@GP_Id:141] [@GP_Shape:L_1_loop__if__and__cmp__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="lock" and NumTokens=2 then                                                                                  ^ main.adb:111:82:VC_RANGE_CHECK] [@GP_Sloc:main.adb:111:82] (Standard__positive.range_check_((([#"main.adb" 111 0 0] ( [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="lock" and NumTokens=2 then                                                                      ^ main.adb:111:70:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:140] [@GP_Shape:L_1_loop__if__and__cmp__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:111:70] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___461))) ((Standard__string.first(temp___461))) ((Standard__string.last(temp___461))) (temp___462) ((1 : int)) ((4 : int)))))
               ))
               ) ((Main__numtokens.numtokens.int__content = (2 : int)))) )));
               ( [@branch_id=3211] Main.spark__branch ).bool__content )) then (
                ( ();
                ( [@GP_Sloc:main.adb:112:49] ([#"main.adb" 112 0 0] ()) );
                ( [@GP_Sloc:main.adb:112:38] ([#"main.adb" 112 0 0] ()) );
                ( [@GP_Sloc:main.adb:112:22] ([#"main.adb" 112 0 0] ()) );
                ( [@GP_Sloc:main.adb:112:13] ([#"main.adb" 112 0 0] (if (( ([#"main.adb" 112 0 0] [#"main.adb" 112 0 0] (([@branch_id=3244] Main.spark__branch).bool__content <- ( (( [#"main.adb" 112 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 112 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:112:38] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                      ^ main.adb:112:38:VC_PRECONDITION] [@GP_Id:139] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 112 0 0] ( [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                                    ^ main.adb:112:84:VC_RANGE_CHECK] [@GP_Sloc:main.adb:112:84] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:138] (Standard__positive.range_check_((([#"main.adb" 112 0 0] ( [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@vc:annotation] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                        ^ main.adb:112:72:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:112:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:137] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                 ()))
                 in () end ;
                (Standard__string.length((Main__lines__to_string___axiom.to_string(([#"main.adb" 112 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Sloc:main.adb:112:38] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                      ^ main.adb:112:38:VC_PRECONDITION] [@GP_Id:139] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 112 0 0] ( [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                                    ^ main.adb:112:84:VC_RANGE_CHECK] [@GP_Sloc:main.adb:112:84] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:138] (Standard__positive.range_check_((([#"main.adb" 112 0 0] ( [@GP_Shape:L_1_loop__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@vc:annotation] [@comment:            if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length /= 4) then                                                                        ^ main.adb:112:72:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:112:72] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:137] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) <> (4 : int)) )));
                ( [@branch_id=3244] Main.spark__branch ).bool__content )) then (
                  raise Temp___exception_441) else (
                 ( ();
                 ( [@GP_Sloc:main.adb:116:125] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:114] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:98] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:285] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:274] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:258] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:53] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:42] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:26] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:213] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:202] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:186] ([#"main.adb" 116 0 0] ()) );
                 ( [@GP_Sloc:main.adb:116:17] ([#"main.adb" 116 0 0] (if (( ([#"main.adb" 116 0 0] [#"main.adb" 116 0 0] (([@branch_id=3280] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___454 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:125] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                          ^ main.adb:116:42:VC_PRECONDITION] [@GP_Sloc:main.adb:116:42] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 116 0 0] ( [@GP_Id:124] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                        ^ main.adb:116:88:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:116:88] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 116 0 0] ( [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                            ^ main.adb:116:76:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:116:76] [@GP_Id:123] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  (Array__Int__Standard__character.get((Standard__string.to_array(temp___454))) ((let temp___455 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:128] [@vc:annotation] [@GP_Sloc:main.adb:116:114] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                  ^ main.adb:116:114:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 116 0 0] ( [@GP_Sloc:main.adb:116:160] [@GP_Id:127] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                ^ main.adb:116:160:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 116 0 0] ( [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                    ^ main.adb:116:148:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:126] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:116:148] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   ()))
                   in () end ;
                  (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:128] [@vc:annotation] [@GP_Sloc:main.adb:116:114] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                  ^ main.adb:116:114:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 116 0 0] ( [@GP_Sloc:main.adb:116:160] [@GP_Id:127] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                ^ main.adb:116:160:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 116 0 0] ( [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                    ^ main.adb:116:148:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:126] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:116:148] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                   (  assert {  ([#"main.adb" 116 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref] [@GP_Sloc:main.adb:116:164] [@GP_Id:129] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                    ^ main.adb:116:164:VC_INDEX_CHECK] ( ((Standard__string.first temp___454) <= temp___455) /\ (temp___455 <= (Standard__string.last temp___454)) ) )) };
                   temp___455 )))
                  ))))
                 )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___456 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:116:202] [@vc:annotation] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                          ^ main.adb:116:202:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Id:132] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 116 0 0] ( [@GP_Sloc:main.adb:116:248] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:131] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                        ^ main.adb:116:248:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 116 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:116:236] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                            ^ main.adb:116:236:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@GP_Id:130] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  (Array__Int__Standard__character.get((Standard__string.to_array(temp___456))) ((let temp___457 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                  ^ main.adb:116:274:VC_PRECONDITION] [@GP_Sloc:main.adb:116:274] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@GP_Id:135] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 116 0 0] ( [@GP_Sloc:main.adb:116:320] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                                ^ main.adb:116:320:VC_RANGE_CHECK] [@GP_Id:134] (Standard__positive.range_check_((([#"main.adb" 116 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                    ^ main.adb:116:308:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:116:308] [@GP_Id:133] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   ()))
                   in () end ;
                  (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 116 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                  ^ main.adb:116:274:VC_PRECONDITION] [@GP_Sloc:main.adb:116:274] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring] [@GP_Id:135] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 116 0 0] ( [@GP_Sloc:main.adb:116:320] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                                ^ main.adb:116:320:VC_RANGE_CHECK] [@GP_Id:134] (Standard__positive.range_check_((([#"main.adb" 116 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref__call_to_string__call_substring__sub__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                    ^ main.adb:116:308:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:116:308] [@GP_Id:133] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                   (  assert {  ([#"main.adb" 116 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__first_ref] [@GP_Sloc:main.adb:116:324] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@comment:                if (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First) > '9') then                                                                                                                                                                                                                                                                                                                                    ^ main.adb:116:324:VC_INDEX_CHECK] [@GP_Id:136] ( ((Standard__string.first temp___456) <= temp___457) /\ (temp___457 <= (Standard__string.last temp___456)) ) )) };
                   temp___457 )))
                  ))))
                 )) > (57 : int)))) )));
                 ( [@branch_id=3280] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:117:21] ([#"main.adb" 117 0 0] [#"main.adb" 117 0 0] raise Return__exc) ) )) else (
                  ( [@GP_Sloc:main.adb:118:17] (if (( ([#"main.adb" 118 0 0] [#"main.adb" 118 0 0] (([@branch_id=3401] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___450 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 118 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Sloc:main.adb:118:45] [@GP_Id:109] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                             ^ main.adb:118:45:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:91] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                           ^ main.adb:118:91:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:108] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 118 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                               ^ main.adb:118:79:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@GP_Id:107] [@GP_Sloc:main.adb:118:79] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   (Array__Int__Standard__character.get((Standard__string.to_array(temp___450))) ((let temp___451 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 118 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                             ^ main.adb:118:173:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Id:113] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:118:173] (Standard__integer.range_check_((( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 118 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:112] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                     ^ main.adb:118:117:VC_PRECONDITION] [@GP_Sloc:main.adb:118:117] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:163] [@vc:annotation] [@GP_Id:111] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                   ^ main.adb:118:163:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:151] [@GP_Id:110] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                       ^ main.adb:118:151:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    ()))
                    in () end ;
                   (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 118 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:112] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                     ^ main.adb:118:117:VC_PRECONDITION] [@GP_Sloc:main.adb:118:117] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:163] [@vc:annotation] [@GP_Id:111] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                   ^ main.adb:118:163:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:151] [@GP_Id:110] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                       ^ main.adb:118:151:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (1 : int)))) )) in (
                    (  assert {  ([#"main.adb" 118 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                             ^ main.adb:118:173:VC_INDEX_CHECK] [@vc:annotation] [@GP_Id:114] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:118:173] ( ((Standard__string.first temp___450) <= temp___451) /\ (temp___451 <= (Standard__string.last temp___450)) ) )) };
                    temp___451 )))
                   ))))
                  )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___452 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 118 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:118:207] [@vc:annotation] [@GP_Id:117] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                               ^ main.adb:118:207:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 118 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                             ^ main.adb:118:253:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:116] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:118:253] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:241] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:115] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                 ^ main.adb:118:241:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   (Array__Int__Standard__character.get((Standard__string.to_array(temp___452))) ((let temp___453 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 118 0 0] ( [@GP_Id:121] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:118:335:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:118:335] (Standard__integer.range_check_((( [#"main.adb" 118 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 118 0 0] ( [@GP_Id:120] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:118:279] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:118:279:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:325] [@vc:annotation] [@GP_Id:119] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:118:325:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 118 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:118:313] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:118] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:118:313:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    ()))
                    in () end ;
                   (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 118 0 0] ( [@GP_Id:120] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:118:279] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:118:279:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 118 0 0] ( [@GP_Sloc:main.adb:118:325] [@vc:annotation] [@GP_Id:119] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:118:325:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 118 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:118:313] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:118] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:118:313:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (1 : int)))) )) in (
                    (  assert {  ([#"main.adb" 118 0 0] ( [@GP_Id:122] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+1) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:118:335:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:118:335] ( ((Standard__string.first temp___452) <= temp___453) /\ (temp___453 <= (Standard__string.last temp___452)) ) )) };
                    temp___453 )))
                   ))))
                  )) > (57 : int)))) )));
                  ( [@branch_id=3401] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:119:21] ([#"main.adb" 119 0 0] [#"main.adb" 119 0 0] raise Return__exc) ) )) else (
                   ( [@GP_Sloc:main.adb:120:17] (if (( ([#"main.adb" 120 0 0] [#"main.adb" 120 0 0] (([@branch_id=3526] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___446 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 120 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:120:45] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@GP_Id:93] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                             ^ main.adb:120:45:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 120 0 0] ( [@GP_Sloc:main.adb:120:91] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                           ^ main.adb:120:91:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:92] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 120 0 0] ( [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                               ^ main.adb:120:79:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@GP_Id:91] [@GP_Sloc:main.adb:120:79] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    (Array__Int__Standard__character.get((Standard__string.to_array(temp___446))) ((let temp___447 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 120 0 0] ( [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                             ^ main.adb:120:173:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@GP_Sloc:main.adb:120:173] [@GP_Id:97] (Standard__integer.range_check_((( [#"main.adb" 120 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 120 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                     ^ main.adb:120:117:VC_PRECONDITION] [@GP_Sloc:main.adb:120:117] [@GP_Id:96] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 120 0 0] ( [@GP_Sloc:main.adb:120:163] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                   ^ main.adb:120:163:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:95] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 120 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                       ^ main.adb:120:151:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:120:151] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:94] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     ()))
                     in () end ;
                    (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 120 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                     ^ main.adb:120:117:VC_PRECONDITION] [@GP_Sloc:main.adb:120:117] [@GP_Id:96] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 120 0 0] ( [@GP_Sloc:main.adb:120:163] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                   ^ main.adb:120:163:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:95] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 120 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                       ^ main.adb:120:151:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:120:151] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] [@GP_Id:94] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (2 : int)))) )) in (
                     (  assert {  ([#"main.adb" 120 0 0] ( [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:120:173] [@GP_Id:98] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                             ^ main.adb:120:173:VC_INDEX_CHECK] ( ((Standard__string.first temp___446) <= temp___447) /\ (temp___447 <= (Standard__string.last temp___446)) ) )) };
                     temp___447 )))
                    ))))
                   )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___448 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 120 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                               ^ main.adb:120:207:VC_PRECONDITION] [@GP_Sloc:main.adb:120:207] [@vc:annotation] [@GP_Id:101] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 120 0 0] ( [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                             ^ main.adb:120:253:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:100] [@GP_Sloc:main.adb:120:253] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 120 0 0] ( [@GP_Sloc:main.adb:120:241] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                 ^ main.adb:120:241:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@GP_Id:99] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    (Array__Int__Standard__character.get((Standard__string.to_array(temp___448))) ((let temp___449 [@mlw:proxy_symbol] [@introduced] = ([#"main.adb" 120 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:120:335:VC_OVERFLOW_CHECK] [@GP_Id:105] [@GP_Sloc:main.adb:120:335] (Standard__integer.range_check_((( [#"main.adb" 120 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 120 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:120:279] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:120:279:VC_PRECONDITION] [@GP_Id:104] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 120 0 0] ( [@GP_Sloc:main.adb:120:325] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:103] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:120:325:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 120 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:120:313] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:102] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:120:313:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     ()))
                     in () end ;
                    (Standard__string.first((Main__lines__to_string___axiom.to_string(([#"main.adb" 120 0 0] ( [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:120:279] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                       ^ main.adb:120:279:VC_PRECONDITION] [@GP_Id:104] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 120 0 0] ( [@GP_Sloc:main.adb:120:325] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:103] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                     ^ main.adb:120:325:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 120 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:120:313] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:102] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                         ^ main.adb:120:313:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add__first_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) + (2 : int)))) )) in (
                     (  assert {  ([#"main.adb" 120 0 0] ( [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'First+2) > '9') then                                                                                                                                                                                                                                                                                                                                               ^ main.adb:120:335:VC_INDEX_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__add] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:106] [@GP_Sloc:main.adb:120:335] ( ((Standard__string.first temp___448) <= temp___449) /\ (temp___449 <= (Standard__string.last temp___448)) ) )) };
                     temp___449 )))
                    ))))
                   )) > (57 : int)))) )));
                   ( [@branch_id=3526] Main.spark__branch ).bool__content )) then (
                    ( ();
                    ( [@GP_Sloc:main.adb:121:21] ([#"main.adb" 121 0 0] [#"main.adb" 121 0 0] raise Return__exc) ) )) else (
                    ( [@GP_Sloc:main.adb:122:17] (if (( ([#"main.adb" 122 0 0] [#"main.adb" 122 0 0] (([@branch_id=3651] Main.spark__branch).bool__content <- ( (Boolean.orb(((Standard__character__rep.to_rep((let temp___442 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 122 0 0] ( [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                             ^ main.adb:122:45:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:122:45] [@vc:annotation] [@GP_Id:79] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 122 0 0] ( [@vc:annotation] [@GP_Id:78] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                           ^ main.adb:122:91:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:122:91] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 122 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:77] [@GP_Sloc:main.adb:122:79] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                               ^ main.adb:122:79:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     (Array__Int__Standard__character.get((Standard__string.to_array(temp___442))) ((let temp___443 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 122 0 0] ( [@GP_Id:82] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:122:117] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                     ^ main.adb:122:117:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 122 0 0] ( [@GP_Id:81] [@GP_Sloc:main.adb:122:163] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                   ^ main.adb:122:163:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 122 0 0] ( [@GP_Id:80] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                       ^ main.adb:122:151:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:122:151] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                      ()))
                      in () end ;
                     (Standard__string.last((Main__lines__to_string___axiom.to_string(([#"main.adb" 122 0 0] ( [@GP_Id:82] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:122:117] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                     ^ main.adb:122:117:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 122 0 0] ( [@GP_Id:81] [@GP_Sloc:main.adb:122:163] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                   ^ main.adb:122:163:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 122 0 0] ( [@GP_Id:80] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                       ^ main.adb:122:151:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:122:151] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                      (  assert {  ([#"main.adb" 122 0 0] ( [@GP_Id:83] [@GP_Sloc:main.adb:122:167] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                       ^ main.adb:122:167:VC_INDEX_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref] [@GP_Reason:VC_INDEX_CHECK] ( ((Standard__string.first temp___442) <= temp___443) /\ (temp___443 <= (Standard__string.last temp___442)) ) )) };
                      temp___443 )))
                     ))))
                    )) < (48 : int))) (((Standard__character__rep.to_rep((let temp___444 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 122 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:86] [@vc:annotation] [@GP_Sloc:main.adb:122:204] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                            ^ main.adb:122:204:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 122 0 0] ( [@GP_Id:85] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                          ^ main.adb:122:250:VC_RANGE_CHECK] [@GP_Sloc:main.adb:122:250] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 122 0 0] ( [@GP_Id:84] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:122:238] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__call_to_string__call_substring__sub__add] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                              ^ main.adb:122:238:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     (Array__Int__Standard__character.get((Standard__string.to_array(temp___444))) ((let temp___445 [@mlw:proxy_symbol] [@introduced] = (  begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 122 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:89] [@vc:annotation] [@GP_Sloc:main.adb:122:276] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                    ^ main.adb:122:276:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 122 0 0] ( [@GP_Id:88] [@GP_Sloc:main.adb:122:322] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                                  ^ main.adb:122:322:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 122 0 0] ( [@GP_Id:87] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                      ^ main.adb:122:310:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:122:310] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                      ()))
                      in () end ;
                     (Standard__string.last((Main__lines__to_string___axiom.to_string(([#"main.adb" 122 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Id:89] [@vc:annotation] [@GP_Sloc:main.adb:122:276] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                    ^ main.adb:122:276:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 122 0 0] ( [@GP_Id:88] [@GP_Sloc:main.adb:122:322] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                                  ^ main.adb:122:322:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 122 0 0] ( [@GP_Id:87] [@vc:annotation] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                      ^ main.adb:122:310:VC_OVERFLOW_CHECK] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:122:310] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ) in (
                      (  assert {  ([#"main.adb" 122 0 0] ( [@GP_Sloc:main.adb:122:326] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__or__cmp__ixdcomp__last_ref] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:90] [@comment:                elsif (Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) < '0' or Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))(Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Last) > '9') then                                                                                                                                                                                                                                                                                                                                      ^ main.adb:122:326:VC_INDEX_CHECK] ( ((Standard__string.first temp___444) <= temp___445) /\ (temp___445 <= (Standard__string.last temp___444)) ) )) };
                      temp___445 )))
                     ))))
                    )) > (57 : int)))) )));
                    ( [@branch_id=3651] Main.spark__branch ).bool__content )) then (
                     ( ();
                     ( [@GP_Sloc:main.adb:123:21] ([#"main.adb" 123 0 0] [#"main.adb" 123 0 0] raise Return__exc) ) )) else (
                     ( ();
                     ( [@GP_Sloc:main.adb:125:61] ([#"main.adb" 125 0 0] ()) );
                     ( [@GP_Sloc:main.adb:125:50] ([#"main.adb" 125 0 0] ()) );
                     ( [@GP_Sloc:main.adb:125:34] ([#"main.adb" 125 0 0] ()) );
                     ( [@GP_Sloc:main.adb:125:21] ([#"main.adb" 125 0 0] ()) );
                     ( [@GP_Sloc:main.adb:125:21] ([#"main.adb" 125 0 0] ( ([#"main.adb" 125 0 0] ( [@GP_Shape:L_1_loop__if__if__if__call_lock] [@GP_Sloc:main.adb:125:21] [@GP_Reason:VC_PRECONDITION] [@comment:                    lock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                     ^ main.adb:125:21:VC_PRECONDITION] [@vc:annotation] [@GP_Id:76] (Manager__lock___axiom.lock((Main__lines__to_string___axiom.to_string(([#"main.adb" 125 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:125:50] [@vc:annotation] [@GP_Id:75] [@GP_Shape:L_1_loop__if__if__if__call_lock__call_to_string__call_substring] [@comment:                    lock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                  ^ main.adb:125:50:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 125 0 0] ( [@GP_Sloc:main.adb:125:96] [@vc:annotation] [@GP_Id:74] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__call_lock__call_to_string__call_substring__sub] [@comment:                    lock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                ^ main.adb:125:96:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 125 0 0] ( [@vc:annotation] [@GP_Id:73] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:125:84] [@comment:                    lock(p=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                    ^ main.adb:125:84:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__call_lock__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) )) )) ) ))) ))) ))) )))) ) )))) ) )) else (
                ( [@GP_Sloc:main.adb:128:9] (if (( ([#"main.adb" 128 0 0] [#"main.adb" 128 0 0] (([@branch_id=3804] Main.spark__branch).bool__content <- ( (let temp___439 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_435.temp___String_Literal_435(())) in (
                (let temp___438 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 128 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="put" then                                    ^ main.adb:128:36:VC_PRECONDITION] [@GP_Sloc:main.adb:128:36] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring] [@vc:annotation] [@GP_Id:72] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 128 0 0] ( [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="put" then                                                                                  ^ main.adb:128:82:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:71] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:128:82] (Standard__positive.range_check_((([#"main.adb" 128 0 0] ( [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="put" then                                                                      ^ main.adb:128:70:VC_OVERFLOW_CHECK] [@GP_Id:70] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:128:70] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                 (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___438))) ((Standard__string.first(temp___438))) ((Standard__string.last(temp___438))) (temp___439) ((1 : int)) ((3 : int)))))
                ))
                 )));
                ( [@branch_id=3804] Main.spark__branch ).bool__content )) then (
                 ( ();
                 ( [@GP_Sloc:main.adb:129:16] ([#"main.adb" 129 0 0] ()) );
                 ( [@GP_Sloc:main.adb:129:13] ([#"main.adb" 129 0 0] (if (( ([#"main.adb" 129 0 0] [#"main.adb" 129 0 0] (([@branch_id=3833] Main.spark__branch).bool__content <- ( (Main__numtokens.numtokens.int__content <> (3 : int)) )));
                 ( [@branch_id=3833] Main.spark__branch ).bool__content )) then (
                   raise Temp___exception_430) else (
                  ( ();
                  ( [@GP_Sloc:main.adb:133:52] ([#"main.adb" 133 0 0] ()) );
                  ( [@GP_Sloc:main.adb:133:41] ([#"main.adb" 133 0 0] ()) );
                  ( [@GP_Sloc:main.adb:133:25] ([#"main.adb" 133 0 0] ()) );
                  ( [@GP_Sloc:main.adb:133:17] ([#"main.adb" 133 0 0] (if (( ([#"main.adb" 133 0 0] [#"main.adb" 133 0 0] (([@branch_id=3841] Main.spark__branch).bool__content <- ( (([#"main.adb" 133 0 0] ( [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                                                                           ^ main.adb:133:91:VC_RANGE_CHECK] [@vc:annotation] [@GP_Sloc:main.adb:133:91] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:69] (Standard__integer.range_check_(( [#"main.adb" 133 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 133 0 0] ( [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                         ^ main.adb:133:41:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:68] [@GP_Sloc:main.adb:133:41] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 133 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:67] [@GP_Sloc:main.adb:133:87] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                                                                       ^ main.adb:133:87:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 133 0 0] ( [@GP_Sloc:main.adb:133:75] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:66] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                                                           ^ main.adb:133:75:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   ()))
                   in () end ;
                  (Standard__string.length((Main__lines__to_string___axiom.to_string(([#"main.adb" 133 0 0] ( [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                         ^ main.adb:133:41:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:68] [@GP_Sloc:main.adb:133:41] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 133 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:67] [@GP_Sloc:main.adb:133:87] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                                                                       ^ main.adb:133:87:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 133 0 0] ( [@GP_Sloc:main.adb:133:75] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:66] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length > Max_URL_Length then                                                                           ^ main.adb:133:75:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ))) )) > (1024 : int)) )));
                  ( [@branch_id=3841] Main.spark__branch ).bool__content )) then (
                    raise Temp___exception_432) else (
                   ( [@GP_Sloc:main.adb:136:17] (if (( ([#"main.adb" 136 0 0] [#"main.adb" 136 0 0] (([@branch_id=3878] Main.spark__branch).bool__content <- ( (([#"main.adb" 136 0 0] ( [@vc:annotation] [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                                                                              ^ main.adb:136:94:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref] [@GP_Sloc:main.adb:136:94] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:65] (Standard__integer.range_check_(( [#"main.adb" 136 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 136 0 0] ( [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                            ^ main.adb:136:44:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:64] [@GP_Sloc:main.adb:136:44] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 136 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:136:90] [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                                                                          ^ main.adb:136:90:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:63] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 136 0 0] ( [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                                                              ^ main.adb:136:78:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:136:78] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:62] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    ()))
                    in () end ;
                   (Standard__string.length((Main__lines__to_string___axiom.to_string(([#"main.adb" 136 0 0] ( [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                            ^ main.adb:136:44:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:64] [@GP_Sloc:main.adb:136:44] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 136 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:136:90] [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                                                                          ^ main.adb:136:90:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:63] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 136 0 0] ( [@comment:                elsif Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1))'Length>Max_Password_Length then                                                                              ^ main.adb:136:78:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:136:78] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:62] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ))) )) > (100 : int)) )));
                   ( [@branch_id=3878] Main.spark__branch ).bool__content )) then (
                     raise Temp___exception_434) else (
                    ( ();
                    ( [@GP_Sloc:main.adb:140:29] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:66] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:55] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:39] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:142] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:131] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:115] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:21] ([#"main.adb" 140 0 0] ()) );
                    ( [@GP_Sloc:main.adb:140:21] ([#"main.adb" 140 0 0] ( ([#"main.adb" 140 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:140:21] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_put] [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                     ^ main.adb:140:21:VC_PRECONDITION] [@GP_Id:61] (Manager__put___axiom.put(Main__d.d) ((Main__lines__to_string___axiom.to_string(([#"main.adb" 140 0 0] ( [@GP_Id:57] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Sloc:main.adb:140:55] [@GP_Shape:L_1_loop__if__if__if__call_put__call_to_string__call_substring] [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                       ^ main.adb:140:55:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 140 0 0] ( [@GP_Id:56] [@GP_Shape:L_1_loop__if__if__if__call_put__call_to_string__call_substring__sub] [@vc:annotation] [@GP_Sloc:main.adb:140:101] [@GP_Reason:VC_RANGE_CHECK] [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                                     ^ main.adb:140:101:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 140 0 0] ( [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                         ^ main.adb:140:89:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_put__call_to_string__call_substring__sub__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:140:89] [@GP_Id:55] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) ))))) ((Main__lines__to_string___axiom.to_string(([#"main.adb" 140 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_put__call_to_string__call_substring] [@GP_Sloc:main.adb:140:131] [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                                                                   ^ main.adb:140:131:VC_PRECONDITION] [@GP_Id:60] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 140 0 0] ( [@GP_Shape:L_1_loop__if__if__if__call_put__call_to_string__call_substring__sub] [@GP_Id:59] [@vc:annotation] [@GP_Sloc:main.adb:140:177] [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                                                                                                                 ^ main.adb:140:177:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 140 0 0] ( [@GP_Id:58] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_put__call_to_string__call_substring__sub__add] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                    put(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)),s1=>Lines.To_String(Lines.Substring(S,T(3).Start,T(3).Start+T(3).Length-1)));                                                                                                                                                                     ^ main.adb:140:165:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:140:165] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((3 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) )) )) ) ))) )))) ) )))) ) )) else (
                 ( [@GP_Sloc:main.adb:143:9] (if (( ([#"main.adb" 143 0 0] [#"main.adb" 143 0 0] (([@branch_id=3977] Main.spark__branch).bool__content <- ( (let temp___428 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_424.temp___String_Literal_424(())) in (
                 (let temp___427 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 143 0 0] ( [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="get" then                                    ^ main.adb:143:36:VC_PRECONDITION] [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:143:36] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring] [@vc:annotation] [@GP_Id:54] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 143 0 0] ( [@vc:annotation] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:143:82] [@GP_Id:53] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="get" then                                                                                  ^ main.adb:143:82:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 143 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring__sub__add] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="get" then                                                                      ^ main.adb:143:70:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:143:70] [@GP_Id:52] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                  (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___427))) ((Standard__string.first(temp___427))) ((Standard__string.last(temp___427))) (temp___428) ((1 : int)) ((3 : int)))))
                 ))
                  )));
                 ( [@branch_id=3977] Main.spark__branch ).bool__content )) then (
                  ( ();
                  ( [@GP_Sloc:main.adb:144:16] ([#"main.adb" 144 0 0] ()) );
                  ( [@GP_Sloc:main.adb:144:13] ([#"main.adb" 144 0 0] (if (( ([#"main.adb" 144 0 0] [#"main.adb" 144 0 0] (([@branch_id=4006] Main.spark__branch).bool__content <- ( (Main__numtokens.numtokens.int__content <> (2 : int)) )));
                  ( [@branch_id=4006] Main.spark__branch ).bool__content )) then (
                    raise Temp___exception_421) else (
                   ( ();
                   ( [@GP_Sloc:main.adb:148:52] ([#"main.adb" 148 0 0] ()) );
                   ( [@GP_Sloc:main.adb:148:41] ([#"main.adb" 148 0 0] ()) );
                   ( [@GP_Sloc:main.adb:148:25] ([#"main.adb" 148 0 0] ()) );
                   ( [@GP_Sloc:main.adb:148:17] ([#"main.adb" 148 0 0] (if (( ([#"main.adb" 148 0 0] [#"main.adb" 148 0 0] (([@branch_id=4014] Main.spark__branch).bool__content <- ( (([#"main.adb" 148 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:148:91] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                                           ^ main.adb:148:91:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:51] (Standard__integer.range_check_(( [#"main.adb" 148 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 148 0 0] ( [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                         ^ main.adb:148:41:VC_PRECONDITION] [@GP_Sloc:main.adb:148:41] [@GP_Id:50] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 148 0 0] ( [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                                       ^ main.adb:148:87:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:49] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:148:87] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 148 0 0] ( [@GP_Sloc:main.adb:148:75] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                           ^ main.adb:148:75:VC_OVERFLOW_CHECK] [@GP_Id:48] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                    ()))
                    in () end ;
                   (Standard__string.length((Main__lines__to_string___axiom.to_string(([#"main.adb" 148 0 0] ( [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                         ^ main.adb:148:41:VC_PRECONDITION] [@GP_Sloc:main.adb:148:41] [@GP_Id:50] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 148 0 0] ( [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                                       ^ main.adb:148:87:VC_RANGE_CHECK] [@vc:annotation] [@GP_Id:49] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:main.adb:148:87] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] (Standard__positive.range_check_((([#"main.adb" 148 0 0] ( [@GP_Sloc:main.adb:148:75] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                           ^ main.adb:148:75:VC_OVERFLOW_CHECK] [@GP_Id:48] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ))) )) > (1024 : int)) )));
                   ( [@branch_id=4014] Main.spark__branch ).bool__content )) then (
                     raise Temp___exception_423) else (
                    ( ();
                    ( [@GP_Sloc:main.adb:152:29] ([#"main.adb" 152 0 0] ()) );
                    ( [@GP_Sloc:main.adb:152:66] ([#"main.adb" 152 0 0] ()) );
                    ( [@GP_Sloc:main.adb:152:55] ([#"main.adb" 152 0 0] ()) );
                    ( [@GP_Sloc:main.adb:152:39] ([#"main.adb" 152 0 0] ()) );
                    ( [@GP_Sloc:main.adb:152:21] ([#"main.adb" 152 0 0] ()) );
                    ( [@GP_Sloc:main.adb:152:21] ([#"main.adb" 152 0 0] ( ([#"main.adb" 152 0 0] ( [@GP_Reason:VC_PRECONDITION] [@comment:                    get(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                     ^ main.adb:152:21:VC_PRECONDITION] [@GP_Id:47] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_get] [@GP_Sloc:main.adb:152:21] (Manager__get___axiom.get(Main__d.d.Passworddatabase__database.database__content) ((Main__lines__to_string___axiom.to_string(([#"main.adb" 152 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Sloc:main.adb:152:55] [@GP_Id:46] [@vc:annotation] [@comment:                    get(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                       ^ main.adb:152:55:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__call_get__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 152 0 0] ( [@GP_Id:45] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_get__call_to_string__call_substring__sub] [@GP_Reason:VC_RANGE_CHECK] [@comment:                    get(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                     ^ main.adb:152:101:VC_RANGE_CHECK] [@GP_Sloc:main.adb:152:101] (Standard__positive.range_check_((([#"main.adb" 152 0 0] ( [@GP_Id:44] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:152:89] [@GP_Shape:L_1_loop__if__if__if__call_get__call_to_string__call_substring__sub__add] [@comment:                    get(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                         ^ main.adb:152:89:VC_OVERFLOW_CHECK] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) )) )) ) )))) ) )))) ) )) else (
                  ( [@GP_Sloc:main.adb:155:9] (if (( ([#"main.adb" 155 0 0] [#"main.adb" 155 0 0] (([@branch_id=4085] Main.spark__branch).bool__content <- ( (let temp___419 [@mlw:proxy_symbol] [@introduced] = (Temp___String_Literal_415.temp___String_Literal_415(())) in (
                  (let temp___418 [@mlw:proxy_symbol] [@introduced] = (Main__lines__to_string___axiom.to_string(([#"main.adb" 155 0 0] ( [@GP_Sloc:main.adb:155:36] [@GP_Reason:VC_PRECONDITION] [@GP_Id:43] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring] [@vc:annotation] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="rem" then                                    ^ main.adb:155:36:VC_PRECONDITION] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 155 0 0] ( [@GP_Id:42] [@vc:annotation] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring__sub] [@GP_Sloc:main.adb:155:82] [@GP_Reason:VC_RANGE_CHECK] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="rem" then                                                                                  ^ main.adb:155:82:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 155 0 0] ( [@GP_Id:41] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__cmp__call_to_string__call_substring__sub__add] [@comment:        elsif Lines.To_String(Lines.Substring(S,T(1).Start,T(1).Start+T(1).Length-1))="rem" then                                                                      ^ main.adb:155:70:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:155:70] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((1 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                   (Array__Int__Standard__character.bool_eq((Standard__string.to_array(temp___418))) ((Standard__string.first(temp___418))) ((Standard__string.last(temp___418))) (temp___419) ((1 : int)) ((3 : int)))))
                  ))
                   )));
                  ( [@branch_id=4085] Main.spark__branch ).bool__content )) then (
                   ( ();
                   ( [@GP_Sloc:main.adb:156:16] ([#"main.adb" 156 0 0] ()) );
                   ( [@GP_Sloc:main.adb:156:13] ([#"main.adb" 156 0 0] (if (( ([#"main.adb" 156 0 0] [#"main.adb" 156 0 0] (([@branch_id=4114] Main.spark__branch).bool__content <- ( (Main__numtokens.numtokens.int__content <> (2 : int)) )));
                   ( [@branch_id=4114] Main.spark__branch ).bool__content )) then (
                     raise Temp___exception_412) else (
                    ( ();
                    ( [@GP_Sloc:main.adb:160:52] ([#"main.adb" 160 0 0] ()) );
                    ( [@GP_Sloc:main.adb:160:41] ([#"main.adb" 160 0 0] ()) );
                    ( [@GP_Sloc:main.adb:160:25] ([#"main.adb" 160 0 0] ()) );
                    ( [@GP_Sloc:main.adb:160:17] ([#"main.adb" 160 0 0] (if (( ([#"main.adb" 160 0 0] [#"main.adb" 160 0 0] (([@branch_id=4122] Main.spark__branch).bool__content <- ( (([#"main.adb" 160 0 0] ( [@GP_Id:40] [@GP_Sloc:main.adb:160:91] [@vc:annotation] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                                           ^ main.adb:160:91:VC_RANGE_CHECK] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"main.adb" 160 0 0] begin ensures {true} let _ = (let _ = (Main__lines__to_string___axiom.to_string(([#"main.adb" 160 0 0] ( [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                         ^ main.adb:160:41:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:39] [@GP_Sloc:main.adb:160:41] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 160 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:38] [@GP_Sloc:main.adb:160:87] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                                       ^ main.adb:160:87:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 160 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:37] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                           ^ main.adb:160:75:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:160:75] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))) in (
                     ()))
                     in () end ;
                    (Standard__string.length((Main__lines__to_string___axiom.to_string(([#"main.adb" 160 0 0] ( [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                         ^ main.adb:160:41:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Id:39] [@GP_Sloc:main.adb:160:41] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 160 0 0] ( [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:38] [@GP_Sloc:main.adb:160:87] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                                       ^ main.adb:160:87:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 160 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:37] [@comment:                if Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1))'Length> Max_URL_Length then                                                                           ^ main.adb:160:75:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__cmp__typeconv__length_ref__call_to_string__call_substring__sub__add] [@GP_Sloc:main.adb:160:75] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) ))) )) > (1024 : int)) )));
                    ( [@branch_id=4122] Main.spark__branch ).bool__content )) then (
                      raise Temp___exception_414) else (
                     ( ();
                     ( [@GP_Sloc:main.adb:164:38] ([#"main.adb" 164 0 0] ()) );
                     ( [@GP_Sloc:main.adb:164:75] ([#"main.adb" 164 0 0] ()) );
                     ( [@GP_Sloc:main.adb:164:64] ([#"main.adb" 164 0 0] ()) );
                     ( [@GP_Sloc:main.adb:164:48] ([#"main.adb" 164 0 0] ()) );
                     ( [@GP_Sloc:main.adb:164:21] ([#"main.adb" 164 0 0] ()) );
                     ( [@GP_Sloc:main.adb:164:21] ([#"main.adb" 164 0 0] ( ([#"main.adb" 164 0 0] ( [@GP_Reason:VC_PRECONDITION] [@GP_Shape:L_1_loop__if__if__if__call_rem_password] [@vc:annotation] [@GP_Id:36] [@GP_Sloc:main.adb:164:21] [@comment:                    rem_password(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                     ^ main.adb:164:21:VC_PRECONDITION] (Manager__rem_password___axiom.rem_password(Main__d.d) ((Main__lines__to_string___axiom.to_string(([#"main.adb" 164 0 0] ( [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@comment:                    rem_password(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                ^ main.adb:164:64:VC_PRECONDITION] [@GP_Id:35] [@GP_Sloc:main.adb:164:64] [@GP_Shape:L_1_loop__if__if__if__call_rem_password__call_to_string__call_substring] (Main__lines__substring___axiom.substring({ Main__lines__mystring.__split_fields = Main__s.s__split_fields.Main__lines__mystring.__split_fields__content }) ((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start))) (([#"main.adb" 164 0 0] ( [@GP_Sloc:main.adb:164:110] [@comment:                    rem_password(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                              ^ main.adb:164:110:VC_RANGE_CHECK] [@vc:annotation] [@GP_Shape:L_1_loop__if__if__if__call_rem_password__call_to_string__call_substring__sub] [@GP_Id:34] [@GP_Reason:VC_RANGE_CHECK] (Standard__positive.range_check_((([#"main.adb" 164 0 0] ( [@GP_Sloc:main.adb:164:98] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_loop__if__if__if__call_rem_password__call_to_string__call_substring__sub__add] [@comment:                    rem_password(DB=>D,s=>Lines.To_String(Lines.Substring(S,T(2).Start,T(2).Start+T(2).Length-1)));                                                                                                  ^ main.adb:164:98:VC_OVERFLOW_CHECK] [@GP_Id:33] (Standard__integer.range_check_(((Standard__positive__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__start)) + (Standard__natural__rep.to_rep((Array__Int__Mystringtokeniser__tokenextent.get(Main__t.t.Array__Int__Mystringtokeniser__tokenextent.map__content) ((2 : int))).Mystringtokeniser__tokenextent.__split_fields.Mystringtokeniser__tokenextent.rec__mystringtokeniser__tokenextent__length))))) )) - (1 : int)))) )))) )))))) )) )) ) )))) ) )))) ) )) else (
                    raise Temp___exception_410)) ))) ))) ))) ))) )))) );
             () (* Check for the exit condition and loop statements appearing before the loop invariant of loop main.adb:87 *)
             ;
             (if (False) then (
               raise Main__L_1.L_1)) )
            done )))
            )))
           )))
          )))
         )))
        )))
       )
     with
      Temp___exception_414 -> ( ();
      ( [@GP_Sloc:main.adb:161:21] ([#"main.adb" 161 0 0] ()) );
      ( [@GP_Sloc:main.adb:161:21] ([#"main.adb" 161 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_413.temp___String_Literal_413(()))) ((1 : int)) ((25 : int))))) )) );
      ( [@GP_Sloc:main.adb:162:21] ([#"main.adb" 162 0 0] [#"main.adb" 162 0 0] raise Return__exc) ) )| 
      Temp___exception_412 -> ( ();
      ( [@GP_Sloc:main.adb:157:17] ([#"main.adb" 157 0 0] ()) );
      ( [@GP_Sloc:main.adb:157:17] ([#"main.adb" 157 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_411.temp___String_Literal_411(()))) ((1 : int)) ((41 : int))))) )) );
      ( [@GP_Sloc:main.adb:158:17] ([#"main.adb" 158 0 0] [#"main.adb" 158 0 0] raise Return__exc) ) )| 
      Temp___exception_423 -> ( ();
      ( [@GP_Sloc:main.adb:149:21] ([#"main.adb" 149 0 0] ()) );
      ( [@GP_Sloc:main.adb:149:21] ([#"main.adb" 149 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_422.temp___String_Literal_422(()))) ((1 : int)) ((25 : int))))) )) );
      ( [@GP_Sloc:main.adb:150:21] ([#"main.adb" 150 0 0] [#"main.adb" 150 0 0] raise Return__exc) ) )| 
      Temp___exception_434 -> ( ();
      ( [@GP_Sloc:main.adb:137:21] ([#"main.adb" 137 0 0] ()) );
      ( [@GP_Sloc:main.adb:137:21] ([#"main.adb" 137 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_433.temp___String_Literal_433(()))) ((1 : int)) ((30 : int))))) )) );
      ( [@GP_Sloc:main.adb:138:21] ([#"main.adb" 138 0 0] [#"main.adb" 138 0 0] raise Return__exc) ) )| 
      Temp___exception_410 -> ( ();
      ( [@GP_Sloc:main.adb:168:13] ([#"main.adb" 168 0 0] ()) );
      ( [@GP_Sloc:main.adb:168:13] ([#"main.adb" 168 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_409.temp___String_Literal_409(()))) ((1 : int)) ((55 : int))))) )) );
      ( [@GP_Sloc:main.adb:169:13] ([#"main.adb" 169 0 0] [#"main.adb" 169 0 0] raise Return__exc) ) )| 
      Temp___exception_421 -> ( ();
      ( [@GP_Sloc:main.adb:145:17] ([#"main.adb" 145 0 0] ()) );
      ( [@GP_Sloc:main.adb:145:17] ([#"main.adb" 145 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_420.temp___String_Literal_420(()))) ((1 : int)) ((41 : int))))) )) );
      ( [@GP_Sloc:main.adb:146:17] ([#"main.adb" 146 0 0] [#"main.adb" 146 0 0] raise Return__exc) ) )| 
      Temp___exception_432 -> ( ();
      ( [@GP_Sloc:main.adb:134:21] ([#"main.adb" 134 0 0] ()) );
      ( [@GP_Sloc:main.adb:134:21] ([#"main.adb" 134 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_431.temp___String_Literal_431(()))) ((1 : int)) ((25 : int))))) )) );
      ( [@GP_Sloc:main.adb:135:21] ([#"main.adb" 135 0 0] [#"main.adb" 135 0 0] raise Return__exc) ) )| 
      Temp___exception_441 -> ( ();
      ( [@GP_Sloc:main.adb:113:17] ([#"main.adb" 113 0 0] ()) );
      ( [@GP_Sloc:main.adb:113:17] ([#"main.adb" 113 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_440.temp___String_Literal_440(()))) ((1 : int)) ((42 : int))))) )) );
      ( [@GP_Sloc:main.adb:114:17] ([#"main.adb" 114 0 0] [#"main.adb" 114 0 0] raise Return__exc) ) )| 
      Temp___exception_430 -> ( ();
      ( [@GP_Sloc:main.adb:130:17] ([#"main.adb" 130 0 0] ()) );
      ( [@GP_Sloc:main.adb:130:17] ([#"main.adb" 130 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_429.temp___String_Literal_429(()))) ((1 : int)) ((41 : int))))) )) );
      ( [@GP_Sloc:main.adb:131:17] ([#"main.adb" 131 0 0] [#"main.adb" 131 0 0] raise Return__exc) ) )| 
      Temp___exception_408 -> ( ();
      ( [@GP_Sloc:main.adb:92:13] ([#"main.adb" 92 0 0] ()) );
      ( [@GP_Sloc:main.adb:92:13] ([#"main.adb" 92 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_407.temp___String_Literal_407(()))) ((1 : int)) ((36 : int))))) )) );
      ( [@GP_Sloc:main.adb:93:13] ([#"main.adb" 93 0 0] [#"main.adb" 93 0 0] raise Return__exc) ) )| 
      Temp___exception_464 -> ( ();
      ( [@GP_Sloc:main.adb:96:17] ([#"main.adb" 96 0 0] ()) );
      ( [@GP_Sloc:main.adb:96:17] ([#"main.adb" 96 0 0] ( (Ada__text_io__put__4___axiom.put__4((Standard__string.of_array((Temp___String_Literal_463.temp___String_Literal_463(()))) ((1 : int)) ((42 : int))))) )) );
      ( [@GP_Sloc:main.adb:97:17] ([#"main.adb" 97 0 0] [#"main.adb" 97 0 0] raise Return__exc) ) )
     end
    with
     Main__L_1.L_1 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "lines" defined at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Main__lines__package_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length as Main__lines__max_mystring_length
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Main__lines__max_mystring_length___axiom as Main__lines__max_mystring_length___axiom

 let def [#"main.adb" 62 0 0][@GP_Subp:main.adb:62] 
   (__void_param : unit)
  requires { [#"main.adb" 62 0 0] true }
   = [@vc:divergent]
  ( ();
  ([#"mystring.ads" 3 0 0] ());
  ([#"main.adb" 62 0 0] ( [#"main.adb" 62 0 0] begin ensures {true} let _ = (let _ = (2048 : int) in (
   ()))
   in () end ;
  [#"main.adb" 62 0 0] assume { [#"main.adb" 62 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__max_mystring_length.max_mystring_length True False True True) } ));
  ([#"main.adb" 62 0 0] ());
  ([#"mystring.ads" 1 0 0] ());
  ([#"mystring.ads" 4 0 0] ());
  ([#"mystring.ads" 5 0 0] ());
  ([#"mystring.ads" 6 0 0] ());
  ([#"mystring.ads" 8 0 0] ());
  ([#"mystring.ads" 10 0 0] ());
  ([#"mystring.ads" 9 0 0] ());
  ([#"mystring.ads" 11 0 0] ());
  ([#"mystring.ads" 12 0 0] ());
  ([#"mystring.ads" 13 0 0] ());
  ([#"mystring.ads" 16 0 0] ());
  ([#"mystring.ads" 17 0 0] ());
  ([#"mystring.ads" 18 0 0] ());
  ([#"mystring.ads" 20 0 0] ());
  ([#"mystring.ads" 19 0 0] ());
  ([#"mystring.ads" 21 0 0] ());
  ([#"mystring.ads" 22 0 0] ());
  ([#"mystring.ads" 23 0 0] ());
  ();
  ([#"mystring.ads" 25 0 0] ());
  ([#"mystring.ads" 26 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 31 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ([#"mystring.ads" 33 0 0] ());
  ();
  ([#"mystring.adb" 5 0 0] ());
  ([#"mystring.adb" 12 0 0] ());
  ([#"mystring.adb" 28 0 0] ());
  ([#"mystring.adb" 52 0 0] ());
  ([#"mystring.adb" 71 0 0] ());
  ([#"mystring.adb" 83 0 0] ());
  ();
  ( [@GP_Sloc:mystring.adb:89:1:instantiated:main.adb:62:5] ([#"mystring.adb" 89 0 0] ()) ) )
end

(* Module for checking DIC of default value and absence of runtime errors in the private part of "mystring" defined at mystring.ads:4 instantiated at main.adb:62, created in Gnat2Why.Types.Generate_VCs_For_Type *)
module Main__lines__mystring__default_checks
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [@GP_Subp:mystring.ads:4] 
   (__void_param : unit)
  requires {  true }
  ensures {  true }
   = [@vc:divergent]
  (let temp___492 [@mlw:proxy_symbol] [@introduced] =  (val _f : Main__lines__mystring.mystring
  ensures { true} 
  in _f) in (
   ( () )))

end

(* Module for checking contracts and absence of run-time errors in subprogram "length" defined at mystring.ads:16 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__length__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length__m as Main__lines__length__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length__m___axiom as Main__lines__length__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__length__result [@model_projected] [@model_trace:109637@result] [@name:Length]  : int__ref 
 
 let def [#"mystring.ads" 16 0 0][@GP_Subp:mystring.ads:16] 
   (__void_param : unit)
  requires { [#"mystring.ads" 16 0 0] true }
  ensures { [#"mystring.ads" 16 0 0] ([#"mystring.ads" 17 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => Length'Result <= Max_MyString_Length;              ^ mystring.ads:17:14:instantiated:main.adb:62:5:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@model_vc_post] [@GP_Sloc:mystring.ads:17:14:instantiated:main.adb:62:5] [@GP_Id:213] ( [@GP_Pretty_Ada:110033] [@GP_Sloc:mystring.ads:17:14:instantiated:main.adb:62:5] (main__lines__length__result.int__content <= (2048 : int)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:16 instantiated at main.adb:62 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__length__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:16 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:16 instantiated at main.adb:62 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:16 instantiated at main.adb:62 *)
  ;
   try
   ( ();
   ( [@GP_Sloc:mystring.ads:32:8:instantiated:main.adb:62:5] ([#"mystring.ads" 32 0 0] ( [#"mystring.ads" 32 0 0] (main__lines__length__result.int__content <- ( (Main__lines__mystring__T13b__rep.to_rep(Main__lines__length__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ));
   [#"mystring.ads" 32 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (main__lines__length__result.int__content <= (2048 : int)) in (
   ()))
   in () end ;
  main__lines__length__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "to_string" defined at mystring.ads:5 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__to_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__to_string__m as Main__lines__to_string__m
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__to_string__result as Main__lines__to_string__result
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__to_string__TresultS as Main__lines__to_string__TresultS
 use        Main__lines__to_string__T62b as Main__lines__to_string__T62b
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__to_string__m___axiom as Main__lines__to_string__m___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__to_string__result___axiom as Main__lines__to_string__result___axiom
 use        Main__lines__to_string__TresultS___axiom as Main__lines__to_string__TresultS___axiom
 use        Main__lines__to_string__T62b___axiom as Main__lines__to_string__T62b___axiom

 val main__lines__to_string__result [@name:To_String] [@model_projected] [@model_trace:109486@result]  : Standard__string.string__ref 
 
 let def [#"mystring.ads" 5 0 0][@GP_Subp:mystring.ads:5] 
   (__void_param : unit)
  requires { [#"mystring.ads" 5 0 0] true }
  ensures { [#"mystring.ads" 5 0 0] ([#"mystring.ads" 6 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:220] [@GP_Sloc:mystring.ads:6:14:instantiated:main.adb:62:5] [@model_vc_post] [@comment:     Post => To_String'Result'Length = Length(M) and              ^ mystring.ads:6:14:instantiated:main.adb:62:5:VC_POSTCONDITION] [@GP_Shape:pragargs__and] ( ( ( [@GP_Pretty_Ada:109466] [@GP_Sloc:mystring.ads:6:14:instantiated:main.adb:62:5] ((Standard__string.length main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_501 : int.
   ( (temp___result_501 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_501 Main__lines__to_string__m.m) ))) ) /\ ( [@GP_Sloc:mystring.ads:7:14:instantiated:main.adb:62:5] [@GP_Pretty_Ada:109473] ((Standard__string.first main__lines__to_string__result.Standard__string.string__content) = (1 : int)) ) ) /\ ( [@GP_Sloc:mystring.ads:7:45:instantiated:main.adb:62:5] [@GP_Pretty_Ada:109478] ((Standard__string.last main__lines__to_string__result.Standard__string.string__content) = (epsilon temp___result_502 : int.
   ( (temp___result_502 = (Main__lines__length.length Main__lines__to_string__m.m)) /\ (Main__lines__length.length__function_guard temp___result_502 Main__lines__to_string__m.m) ))) ) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:5 instantiated at main.adb:62 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__to_string__m.m True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:5 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:5 instantiated at main.adb:62 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:5 instantiated at main.adb:62 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] begin ensures {true} let _ = (let _ = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
    ()))
    in () end ;
   ([#"mystring.adb" 6 0 0] [#"mystring.adb" 6 0 0] (val _f : unit
   requires {( [@vc:annotation] [@GP_Sloc:mystring.adb:6:7:instantiated:main.adb:62:5] [@GP_Reason:VC_RANGE_CHECK] [@comment:      Result : String(1..M.Length);       ^ mystring.adb:6:7:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Id:214] [#"mystring.adb" 6 0 0] ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) -> ( ((1 : int) >= Standard__positive.first) /\ ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) <= Standard__positive.last) ) ) )} 
   ensures {[#"mystring.adb" 6 0 0] true} 
   in _f)) ));
   ([#"mystring.adb" 6 0 0] ( [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (Main__lines__to_string__TresultS___axiom.default_initial_assumption (Main__lines__to_string__TresultS.of_array Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) False) };
   [#"mystring.adb" 6 0 0] assume { [#"mystring.adb" 6 0 0] (if (False) then (
    true) else (
    ( (Main__lines__to_string__TresultS.dynamic_property (1 : int) (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) = (1 : int)) /\ ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) = (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) ) ))) } ));
   ();
   ( [@GP_Sloc:mystring.adb:8:7:instantiated:main.adb:62:5] ([#"mystring.adb" 8 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:62:5] ([#"mystring.adb" 8 0 0] [#"mystring.adb" 8 0 0] (Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content <- ( (Main__lines__to_string__TresultS.to_array (let temp___500 [@mlw:proxy_symbol] [@introduced] = (let temp___499 [@mlw:proxy_symbol] [@introduced] = (let temp___498 [@mlw:proxy_symbol] [@introduced] = (let temp___496 [@mlw:proxy_symbol] [@introduced] = (Main__lines__mystring__T13b__rep.to_rep(Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) in (
   (let temp___495 [@mlw:proxy_symbol] [@introduced] = (1 : int) in (
   (let temp___497 [@mlw:proxy_symbol] [@introduced] = Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Main__lines__to_string__T62b.of_array(( [#"mystring.adb" 8 0 0] assert { [#"mystring.adb" 8 0 0] ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Id:215] ( (temp___495 <= temp___496) -> ( ( (Main__lines__TmystringstrD1.first <= temp___495) /\ (temp___495 <= Main__lines__TmystringstrD1.last) ) /\ ( (Main__lines__TmystringstrD1.first <= temp___496) /\ (temp___496 <= Main__lines__TmystringstrD1.last) ) ) ) )) };
    temp___497 )) (temp___495) (temp___496))))
   ))
   ))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                         ^ mystring.adb:8:25:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:8:25:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:result_assign__typeconv__slice] [@GP_Id:216] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) ((Main__lines__to_string__T62b.first(temp___498))) ((Main__lines__to_string__T62b.last(temp___498)))) )) };
    (Standard__string.of_array((Main__lines__to_string__T62b.to_array(temp___498))) ((Main__lines__to_string__T62b.first(temp___498))) ((Main__lines__to_string__T62b.last(temp___498)))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;                 ^ mystring.adb:8:17:instantiated:main.adb:62:5:VC_LENGTH_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:8:17:instantiated:main.adb:62:5] [@GP_Shape:result_assign__typeconv] [@GP_Id:217] [@GP_Reason:VC_LENGTH_CHECK] ( true /\ (if (((Standard__string.first temp___499) <= (Standard__string.last temp___499))) then (
     ( ((1 : int) <= (Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) /\ (((Standard__string.last temp___499) - (Standard__string.first temp___499)) = ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) - (1 : int))) )) else (
     ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) < (1 : int)))) ) )) };
    (Main__lines__to_string__TresultS.of_array((Array__Int__Standard__character.slide((Standard__string.to_array(temp___499))) ((Standard__string.first(temp___499))) ((1 : int)))) ((1 : int)) ((Main__lines__mystring__T13b__rep.to_rep Main__lines__to_string__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )))
    in (
    (  assert {  ([#"mystring.adb" 8 0 0] ( [@vc:annotation] [@GP_Shape:result_assign] [@GP_Id:218] [@GP_Reason:VC_LENGTH_CHECK] [@comment:      Result := String(M.Str(M.Str'First..M.Length)) ;              ^ mystring.adb:8:14:instantiated:main.adb:62:5:VC_LENGTH_CHECK] [@GP_Sloc:mystring.adb:8:14:instantiated:main.adb:62:5] ( true /\ (if (((Main__lines__to_string__TresultS.first temp___500) <= (Main__lines__to_string__TresultS.last temp___500))) then (
     ( ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____first) <= (Standard__integer__rep.to_rep Main__lines__to_string__result.result____last)) /\ (((Main__lines__to_string__TresultS.last temp___500) - (Main__lines__to_string__TresultS.first temp___500)) = ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) - (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first))) )) else (
     ((Standard__integer__rep.to_rep Main__lines__to_string__result.result____last) < (Standard__integer__rep.to_rep Main__lines__to_string__result.result____first)))) ) )) };
    temp___500 )))
   ) ))) );
   ( [@GP_Sloc:mystring.adb:9:14:instantiated:main.adb:62:5] ([#"mystring.adb" 9 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:9:7:instantiated:main.adb:62:5] ([#"mystring.adb" 9 0 0] ( [#"mystring.adb" 9 0 0] (main__lines__to_string__result.Standard__string.string__content <- ( (Standard__string.of_array(Main__lines__to_string__result.result__.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____first))) ((Standard__integer__rep.to_rep(Main__lines__to_string__result.result____last)))) ));
   [#"mystring.adb" 9 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Boolean.andb((([#"mystring.ads" 6 0 0] ( [@GP_Shape:pragargs__and__and__cmp__typeconv__length_ref] [@GP_Sloc:mystring.ads:6:30:instantiated:main.adb:62:5] [@vc:annotation] [@comment:     Post => To_String'Result'Length = Length(M) and                              ^ mystring.ads:6:30:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:219] (Standard__integer.range_check_(( [#"mystring.ads" 6 0 0] begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.length(main__lines__to_string__result.Standard__string.string__content)) ))) )) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m)))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.first(main__lines__to_string__result.Standard__string.string__content)) ) = (1 : int))))) (((  begin ensures {true} let _ = (let _ = main__lines__to_string__result.Standard__string.string__content in (
   ()))
   in () end ;
  (Standard__string.last(main__lines__to_string__result.Standard__string.string__content)) ) = (Main__lines__length___axiom.length(Main__lines__to_string__m.m))))) in (
   ()))
   in () end ;
  main__lines__to_string__result.Standard__string.string__content )
end

(* Module for defining the value of the aggregate at mystring.adb:13 instantiated at main.adb:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_503___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_503 as Temp_____aggregate_def_503
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___505   : int.
   (let temp___504 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_503.temp_____aggregate_def_503 temp___505) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___505 True True True True)) then (
     (forall temp___506   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___504 temp___506)) = temp___505))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "from_string" defined at mystring.ads:8 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__from_string__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__string___axiom as Standard__string___axiom
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__from_string__s as Main__lines__from_string__s
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__from_string__m as Main__lines__from_string__m
 use        Main__lines__from_string__j as Main__lines__from_string__j
 use        Main__lines__from_string__L_1__i as Main__lines__from_string__L_1__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__from_string__L_1 as Main__lines__from_string__L_1
 use        Main__lines__from_string__L_1__T67b as Main__lines__from_string__L_1__T67b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_503 as Temp_____aggregate_def_503
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__from_string__s___axiom as Main__lines__from_string__s___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__from_string__m___axiom as Main__lines__from_string__m___axiom
 use        Main__lines__from_string__j___axiom as Main__lines__from_string__j___axiom
 use        Main__lines__from_string__L_1___axiom as Main__lines__from_string__L_1___axiom
 use        Main__lines__from_string__L_1__i___axiom as Main__lines__from_string__L_1__i___axiom
 use        Temp_____aggregate_def_503___axiom as Temp_____aggregate_def_503___axiom
 use        Main__lines__from_string__L_1__T67b___axiom as Main__lines__from_string__L_1__T67b___axiom

 val main__lines__from_string__result [@name:From_String] [@model_projected] [@model_trace:109520@result]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 8 0 0][@GP_Subp:mystring.ads:8] 
   (__void_param : unit)
  requires { [#"mystring.ads" 8 0 0] true }
  ensures { [#"mystring.ads" 8 0 0] ([#"mystring.ads" 10 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@comment:     Post => (Length(From_String'Result) = S'Length);               ^ mystring.ads:10:15:instantiated:main.adb:62:5:VC_POSTCONDITION] [@GP_Id:231] [@GP_Shape:pragargs__cmp] [@GP_Sloc:mystring.ads:10:15:instantiated:main.adb:62:5] [@model_vc_post] ( [@GP_Sloc:mystring.ads:10:15:instantiated:main.adb:62:5] [@GP_Pretty_Ada:109965] ((epsilon temp___result_519 : int.
   ( (temp___result_519 = (Main__lines__length.length main__lines__from_string__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_519 main__lines__from_string__result.Main__lines__mystring.mystring__content) )) = (Standard__string.length Main__lines__from_string__s.s)) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:8 instantiated at main.adb:62 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Main__lines__from_string__s.s True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:8 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:8 instantiated at main.adb:62 *)
  ;
   begin ensures {true} let _ = (let _ = (([#"mystring.ads" 9 0 0] ( [@GP_Id:230] [@vc:annotation] [@comment:     Pre => (S'Length <= Max_MyString_Length),               ^ mystring.ads:9:15:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.ads:9:15:instantiated:main.adb:62:5] (Standard__integer.range_check_(( [#"mystring.ads" 9 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) )) <= (2048 : int)) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:8 instantiated at main.adb:62 *)
  ;
   assume {  ( [@GP_Pretty_Ada:109951] ((Standard__string.length Main__lines__from_string__s.s) <= (2048 : int)) ) };
   try
   ( ();
   ([#"mystring.adb" 12 0 0] ());
   ([#"mystring.adb" 13 0 0] ( (let main__lines__from_string__m__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = ( 0 : Main__lines__mystring__T13b.t13b ); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_503.temp_____aggregate_def_503((32 : int))) } } in (
    [#"mystring.adb" 13 0 0] (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__from_string__m__assume.Main__lines__mystring.__split_fields ))))
   ;
   [#"mystring.adb" 13 0 0] assume { [#"mystring.adb" 13 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 14 0 0] ());
   ([#"mystring.adb" 14 0 0] ( [#"mystring.adb" 14 0 0] (Main__lines__from_string__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 14 0 0] assume { [#"mystring.adb" 14 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:16:7:instantiated:main.adb:62:5] ([#"mystring.adb" 16 0 0] (if (( ([#"mystring.adb" 16 0 0] [#"mystring.adb" 16 0 0] (([@branch_id=138502] Main.spark__branch).bool__content <- ( (([#"mystring.adb" 16 0 0] ( [@vc:annotation] [@GP_Id:222] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:if__cmp__typeconv__length_ref] [@GP_Sloc:mystring.adb:16:11:instantiated:main.adb:62:5] [@comment:      if S'Length > Max_MyString_Length then           ^ mystring.adb:16:11:instantiated:main.adb:62:5:VC_RANGE_CHECK] (Standard__integer.range_check_(( [#"mystring.adb" 16 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.length(Main__lines__from_string__s.s)) ))) )) > (2048 : int)) )));
   ( [@branch_id=138502] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:62:5] ([#"mystring.adb" 17 0 0] ([#"mystring.adb" 17 0 0] ( [@GP_Reason:VC_RAISE] [@vc:annotation] [@GP_Shape:if__raise_constraint_error] [@GP_Id:221] [@comment:         raise Constraint_Error;          ^ mystring.adb:17:10:instantiated:main.adb:62:5:VC_RAISE] [@GP_Sloc:mystring.adb:17:10:instantiated:main.adb:62:5] absurd ))) ) )) else (
    ()))) );
   ( [@GP_Sloc:mystring.adb:19:7:instantiated:main.adb:62:5] ([#"mystring.adb" 19 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:19:16:instantiated:main.adb:62:5] ([#"mystring.adb" 19 0 0] (let temp___508 [@mlw:proxy_symbol] [@introduced] = (let temp___507 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
    ( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = temp___507.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
     ()))
     in () end ;
    { ( temp___507 ) with Main__lines__mystring.__split_fields = { ( temp___507.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 19 0 0] ( [@vc:annotation] [@comment:      M.Length := S'Length;                    ^ mystring.adb:19:20:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Id:223] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:19:20:instantiated:main.adb:62:5] [@GP_Shape:m_assign__typeconv__length_ref] (Main__lines__mystring__T13b.range_check_(( [#"mystring.adb" 19 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
     ()))
     in () end ;
    (Standard__string.length(Main__lines__from_string__s.s)) ))) )))) } } )))
    in (
     (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___508.Main__lines__mystring.__split_fields ))))
   ) );
   ( [@GP_Sloc:mystring.adb:20:24:instantiated:main.adb:62:5] ([#"mystring.adb" 20 0 0] (let temp___509 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.first(Main__lines__from_string__s.s)) ) in (
   (let temp___510 [@mlw:proxy_symbol] [@introduced] = ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
    ()))
    in () end ;
   (Standard__string.last(Main__lines__from_string__s.s)) ) in (
    ( [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( temp___509 ));
    () (* Translation of an Ada loop from mystring.adb:20 instantiated at main.adb:62 *)
    ;
    (if ((Boolean.andb((temp___509 <= Main__lines__from_string__L_1__i.i.int__content)) ((Main__lines__from_string__L_1__i.i.int__content <= temp___510)))) then (
     [#"mystring.adb" 20 0 0] try
      ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___516 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : Main__lines__mystring.mystring
      ensures {[#"mystring.adb" 20 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__L_1__i.i.int__content in (
        ()))
        in () end ;
       (let temp___515 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
       ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__L_1__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 20 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__j.j.int__content in (
         ()))
         in () end ;
        (let temp___514 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 20 0 0] (val _f : int
        ensures {[#"mystring.adb" 20 0 0] (result = Main__lines__from_string__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:62 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:20 instantiated at main.adb:62 *)
         ;
         (let temp___inv_518 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:227] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:226] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
          ()))
          in () end ;
         (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 21 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                 ^ mystring.adb:21:33:instantiated:main.adb:62:5:VC_LOOP_INVARIANT] [@GP_Shape:L_1_while__pragargs__cmp] [@GP_Id:228] [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:62:5] ( [@GP_Pretty_Ada:138530] [@GP_Sloc:mystring.adb:21:33:instantiated:main.adb:62:5] (Main__lines__from_string__j.j.int__content = ((Main__lines__from_string__L_1__i.i.int__content - (Standard__string.first Main__lines__from_string__s.s)) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:20 instantiated at main.adb:62 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__from_string__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ ((Standard__string.first Main__lines__from_string__s.s) <= (Standard__string.last Main__lines__from_string__s.s)) )) then (
           (Main__lines__from_string__L_1__T67b.dynamic_property (Standard__string.first Main__lines__from_string__s.s) (Standard__string.last Main__lines__from_string__s.s) Main__lines__from_string__L_1__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___516.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) )) (( ((Standard__string.first Main__lines__from_string__s.s) <= Main__lines__from_string__L_1__i.i.int__content) /\ (Main__lines__from_string__L_1__i.i.int__content <= (Standard__string.last Main__lines__from_string__s.s)) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:20 instantiated at main.adb:62 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:20 instantiated at main.adb:62 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:22:10:instantiated:main.adb:62:5] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:62:5] ([#"mystring.adb" 22 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:22:19:instantiated:main.adb:62:5] ([#"mystring.adb" 22 0 0] (let temp___513 [@mlw:proxy_symbol] [@introduced] = (let temp___512 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 22 0 0] begin ensures {true} let _ = (let _ = temp___512.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___512 ) with Main__lines__mystring.__split_fields = { ( temp___512.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___511 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 22 0 0] assert { [#"mystring.adb" 22 0 0] ([#"mystring.adb" 22 0 0] ( [@vc:annotation] [@GP_Shape:L_1_while__m_assign__ixdcomp] [@GP_Sloc:mystring.adb:22:16:instantiated:main.adb:62:5] [@comment:         M.Str(J) := S(I);                ^ mystring.adb:22:16:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Id:224] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__from_string__j.j.int__content) /\ (Main__lines__from_string__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__from_string__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Main__lines__from_string__s.s))) (Main__lines__from_string__L_1__i.i.int__content))))))))))
            } } )))
           in (
            (Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___513.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:23:10:instantiated:main.adb:62:5] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:15:instantiated:main.adb:62:5] ([#"mystring.adb" 23 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:23:12:instantiated:main.adb:62:5] ([#"mystring.adb" 23 0 0] [#"mystring.adb" 23 0 0] (Main__lines__from_string__j.j.int__content <- ( ([#"mystring.adb" 23 0 0] ( [@GP_Shape:L_1_while__j_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:225] [@GP_Sloc:mystring.adb:23:17:instantiated:main.adb:62:5] [@comment:         J := J + 1;                 ^ mystring.adb:23:17:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:20 instantiated at main.adb:62 *)
          ;
          (if ((Main__lines__from_string__L_1__i.i.int__content = temp___510)) then (
            raise Main__lines__from_string__L_1.L_1));
          ([#"mystring.adb" 20 0 0] [#"mystring.adb" 20 0 0] (Main__lines__from_string__L_1__i.i.int__content <- ( (Main__lines__from_string__L_1__i.i.int__content + (1 : int)) )));
          (let temp___inv_518 [@mlw:proxy_symbol] [@introduced] = (Main__lines__from_string__j.j.int__content = ([#"mystring.adb" 21 0 0] ( [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                                 ^ mystring.adb:21:49:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Shape:L_1_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:21:49:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:227] (Standard__integer.range_check_((([#"mystring.adb" 21 0 0] ( [@GP_Shape:L_1_while__pragargs__cmp__add__sub] [@GP_Sloc:mystring.adb:21:39:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:226] [@comment:         pragma Loop_Invariant (J = I - S'First + 1);                                       ^ mystring.adb:21:39:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__from_string__L_1__i.i.int__content - ( [#"mystring.adb" 21 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
           ()))
           in () end ;
          (Standard__string.first(Main__lines__from_string__s.s)) )))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__from_string__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:25:14:instantiated:main.adb:62:5] ([#"mystring.adb" 25 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:25:7:instantiated:main.adb:62:5] ([#"mystring.adb" 25 0 0] ( [#"mystring.adb" 25 0 0] (main__lines__from_string__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__from_string__m.m__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 25 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__from_string__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 10 0 0] ( [@GP_Sloc:mystring.ads:10:45:instantiated:main.adb:62:5] [@vc:annotation] [@comment:     Post => (Length(From_String'Result) = S'Length);                                             ^ mystring.ads:10:45:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Shape:pragargs__cmp__typeconv__length_ref] [@GP_Reason:VC_RANGE_CHECK] [@GP_Id:229] (Standard__integer.range_check_(( [#"mystring.ads" 10 0 0] begin ensures {true} let _ = (let _ = Main__lines__from_string__s.s in (
   ()))
   in () end ;
  (Standard__string.length(Main__lines__from_string__s.s)) ))) ))) in (
   ()))
   in () end ;
  main__lines__from_string__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "less" defined at mystring.ads:11 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__less__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__less__m1 as Main__lines__less__m1
 use        Main__lines__less__m2 as Main__lines__less__m2
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__less__i as Main__lines__less__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__less__L_2 as Main__lines__less__L_2
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__less__m1___axiom as Main__lines__less__m1___axiom
 use        Main__lines__less__m2___axiom as Main__lines__less__m2___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__less__i___axiom as Main__lines__less__i___axiom
 use        Main__lines__less__L_2___axiom as Main__lines__less__L_2___axiom

 val main__lines__less__result [@model_projected] [@name:Less] [@model_trace:109539@result]  : bool__ref 
 
 let def [#"mystring.ads" 11 0 0][@GP_Subp:mystring.ads:11] 
   (__void_param : unit)
  requires { [#"mystring.ads" 11 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:11 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 11 0 0] assume { [#"mystring.ads" 11 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m1.m1 True False True True) };
  [#"mystring.ads" 11 0 0] assume { [#"mystring.ads" 11 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__less__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:11 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:11 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 11 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:11 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 11 0 0] try
   ( ();
   ([#"mystring.adb" 29 0 0] ( [#"mystring.adb" 29 0 0] (Main__lines__less__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 29 0 0] assume { [#"mystring.adb" 29 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 36 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:31:7:instantiated:main.adb:62:5] ([#"mystring.adb" 31 0 0] (if (( ([#"mystring.adb" 31 0 0] [#"mystring.adb" 31 0 0] (([@branch_id=138659] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) < (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=138659] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:32:10:instantiated:main.adb:62:5] ([#"mystring.adb" 32 0 0] ( [#"mystring.adb" 32 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 32 0 0] raise Return__exc )) ) )) else (
    ( [@GP_Sloc:mystring.adb:33:7:instantiated:main.adb:62:5] (if (( ([#"mystring.adb" 33 0 0] [#"mystring.adb" 33 0 0] (([@branch_id=138669] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) > (Main__lines__mystring__T13b__rep.to_rep(Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
    ( [@branch_id=138669] Main.spark__branch ).bool__content )) then (
     ( ();
     ( [@GP_Sloc:mystring.adb:34:10:instantiated:main.adb:62:5] ([#"mystring.adb" 34 0 0] ( [#"mystring.adb" 34 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 34 0 0] raise Return__exc )) ) )) else (
     ( ();
     ( [@GP_Sloc:mystring.adb:36:35:instantiated:main.adb:62:5] ([#"mystring.adb" 36 0 0] ( () (* Translation of an Ada loop from mystring.adb:36 instantiated at main.adb:62 *)
     ;
     (if ((Main__lines__less__i.i.int__content <= (2048 : int))) then (
      [#"mystring.adb" 36 0 0] try
       ( [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = Main__lines__less__i.i.int__content in (
        ()))
        in () end ;
       (let temp___524 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 36 0 0] (val _f : int
       ensures {[#"mystring.adb" 36 0 0] (result = Main__lines__less__i.i.int__content)} 
       in _f) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:62 *)
        ;
        () (* While loop translating the Ada loop from mystring.adb:36 instantiated at main.adb:62 *)
        ;
        (let temp___inv_525 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
         [#"mystring.adb" 36 0 0] begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
        ;
        [#"mystring.adb" 36 0 0] while True do
         invariant { 
          ([#"mystring.adb" 37 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@comment:            pragma Loop_Invariant (I >= M1.Str'First);                                    ^ mystring.adb:37:36:instantiated:main.adb:62:5:VC_LOOP_INVARIANT] [@GP_Id:237] [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:62:5] [@GP_Shape:if__L_2_while__pragargs__cmp] ( [@GP_Sloc:mystring.adb:37:36:instantiated:main.adb:62:5] [@GP_Pretty_Ada:138690] (Main__lines__less__i.i.int__content >= (1 : int)) ) ))
          }
         ( () (* Assume implicit invariants from the loop mystring.adb:36 instantiated at main.adb:62 *)
         ;
          assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__less__i.i.int__content True True True True) )/\true )) ((Main__lines__less__i.i.int__content <= (2048 : int)))) };
         () (* Check for absence of RTE in the invariant of loop mystring.adb:36 instantiated at main.adb:62 *)
         ;
         () (* Loop statements appearing after the loop invariant of loop mystring.adb:36 instantiated at main.adb:62 *)
         ;
         ();
         ( [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:62:5] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:62:5] ([#"mystring.adb" 38 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:38:13:instantiated:main.adb:62:5] ([#"mystring.adb" 38 0 0] (if (( ([#"mystring.adb" 38 0 0] [#"mystring.adb" 38 0 0] (([@branch_id=138697] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___522 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___522) (( [#"mystring.adb" 38 0 0] assert { [#"mystring.adb" 38 0 0] ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Id:235] [@vc:annotation] [@GP_Sloc:mystring.adb:38:23:instantiated:main.adb:62:5] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) < M2.Str(I) then                       ^ mystring.adb:38:23:instantiated:main.adb:62:5:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         )) < (Standard__character__rep.to_rep((let temp___523 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___523) ((  assert {  ([#"mystring.adb" 38 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Id:236] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:38:35:instantiated:main.adb:62:5] [@comment:            if M1.Str(I) < M2.Str(I) then                                   ^ mystring.adb:38:35:instantiated:main.adb:62:5:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
          Main__lines__less__i.i.int__content )))))
         ))) )));
         ( [@branch_id=138697] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:mystring.adb:39:16:instantiated:main.adb:62:5] ([#"mystring.adb" 39 0 0] ( [#"mystring.adb" 39 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
          [#"mystring.adb" 39 0 0] raise Return__exc )) ) )) else (
          ( [@GP_Sloc:mystring.adb:40:13:instantiated:main.adb:62:5] (if (( ([#"mystring.adb" 40 0 0] [#"mystring.adb" 40 0 0] (([@branch_id=138711] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___520 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___520) (( [#"mystring.adb" 40 0 0] assert { [#"mystring.adb" 40 0 0] ([#"mystring.adb" 40 0 0] ( [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Id:233] [@vc:annotation] [@GP_Sloc:mystring.adb:40:26:instantiated:main.adb:62:5] [@GP_Reason:VC_INDEX_CHECK] [@comment:            elsif M1.Str(I) > M2.Str(I) then                          ^ mystring.adb:40:26:instantiated:main.adb:62:5:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          )) > (Standard__character__rep.to_rep((let temp___521 [@mlw:proxy_symbol] [@introduced] = Main__lines__less__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___521) ((  assert {  ([#"mystring.adb" 40 0 0] ( [@comment:            elsif M1.Str(I) > M2.Str(I) then                                      ^ mystring.adb:40:38:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Shape:if__L_2_while__if__cmp__ixdcomp] [@GP_Id:234] [@vc:annotation] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:40:38:instantiated:main.adb:62:5] ( (Main__lines__TmystringstrD1.first <= Main__lines__less__i.i.int__content) /\ (Main__lines__less__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
           Main__lines__less__i.i.int__content )))))
          ))) )));
          ( [@branch_id=138711] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:mystring.adb:41:16:instantiated:main.adb:62:5] ([#"mystring.adb" 41 0 0] ( [#"mystring.adb" 41 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
           [#"mystring.adb" 41 0 0] raise Return__exc )) ) )) else (
           ( ();
           ( [@GP_Sloc:mystring.adb:43:16:instantiated:main.adb:62:5] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:21:instantiated:main.adb:62:5] ([#"mystring.adb" 43 0 0] ()) );
           ( [@GP_Sloc:mystring.adb:43:18:instantiated:main.adb:62:5] ([#"mystring.adb" 43 0 0] [#"mystring.adb" 43 0 0] (Main__lines__less__i.i.int__content <- ( ([#"mystring.adb" 43 0 0] ( [@comment:               I := I + 1;                       ^ mystring.adb:43:23:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Id:232] [@GP_Sloc:mystring.adb:43:23:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_2_while__if__i_assign__add] (Standard__integer.range_check_((Main__lines__less__i.i.int__content + (1 : int)))) )) ))) ) ))) )))) );
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:36 instantiated at main.adb:62 *)
         ;
         (if (not ( (Main__lines__less__i.i.int__content <= (2048 : int)) )) then (
           raise Main__lines__less__L_2.L_2));
         (let temp___inv_525 [@mlw:proxy_symbol] [@introduced] = (Main__lines__less__i.i.int__content >= (1 : int)) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
          )
        done )))
        )
      with
       Main__lines__less__L_2.L_2 -> ()
      end)) )) );
     ( [@GP_Sloc:mystring.adb:47:10:instantiated:main.adb:62:5] ([#"mystring.adb" 47 0 0] ( [#"mystring.adb" 47 0 0] (main__lines__less__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
     [#"mystring.adb" 47 0 0] raise Return__exc )) ) ))) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__less__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get" defined at mystring.ads:21 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m as Main__lines__get__m
 use        Main__lines__get__index as Main__lines__get__index
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get__m___axiom as Main__lines__get__m___axiom
 use        Main__lines__get__index___axiom as Main__lines__get__index___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 val main__lines__get__result [@model_trace:109723@result] [@model_projected] [@name:Get]  : int__ref 
 
 let def [#"mystring.ads" 21 0 0][@GP_Subp:mystring.ads:21] 
   (__void_param : unit)
  requires { [#"mystring.ads" 21 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:21 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 21 0 0] assume { [#"mystring.ads" 21 0 0] (Main__lines__mystring___axiom.dynamic_invariant Main__lines__get__m.m True False True True) };
  [#"mystring.ads" 21 0 0] assume { [#"mystring.ads" 21 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__get__index.index True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:21 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:21 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 21 0 0] begin ensures {true} let _ = (let _ = (Main__lines__get__index.index <= (Main__lines__length___axiom.length(Main__lines__get__m.m))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:21 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 21 0 0] assume { [#"mystring.ads" 21 0 0] ( [@GP_Pretty_Ada:110101] (Main__lines__get__index.index <= (epsilon temp___result_527 : int.
   ( (temp___result_527 = (Main__lines__length.length Main__lines__get__m.m)) /\ (Main__lines__length.length__function_guard temp___result_527 Main__lines__get__m.m) ))) ) };
  [#"mystring.ads" 21 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.ads:34:8:instantiated:main.adb:62:5] ([#"mystring.ads" 34 0 0] ( [#"mystring.ads" 34 0 0] (main__lines__get__result.int__content <- ( (Standard__character__rep.to_rep((let temp___526 [@mlw:proxy_symbol] [@introduced] = Main__lines__get__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
    (Array__Int__Standard__character.get(temp___526) (( [#"mystring.ads" 34 0 0] assert { [#"mystring.ads" 34 0 0] ([#"mystring.ads" 34 0 0] ( [@GP_Shape:return__ixdcomp] [@vc:annotation] [@GP_Id:238] [@GP_Sloc:mystring.ads:34:13:instantiated:main.adb:62:5] [@GP_Reason:VC_INDEX_CHECK] [@comment:     (M.Str(Index));             ^ mystring.ads:34:13:instantiated:main.adb:62:5:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__get__index.index) /\ (Main__lines__get__index.index <= Main__lines__TmystringstrD1.last) ) )) };
    Main__lines__get__index.index )))))
   )) ));
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  main__lines__get__result.int__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "equal" defined at mystring.ads:12 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__equal__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__equal__m1 as Main__lines__equal__m1
 use        Main__lines__equal__m2 as Main__lines__equal__m2
 use        Main__lines__get as Main__lines__get
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__equal__i as Main__lines__equal__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__equal__L_3 as Main__lines__equal__L_3
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__equal__m1___axiom as Main__lines__equal__m1___axiom
 use        Main__lines__equal__m2___axiom as Main__lines__equal__m2___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__get___axiom as Main__lines__get___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__equal__i___axiom as Main__lines__equal__i___axiom
 use        Main__lines__equal__L_3___axiom as Main__lines__equal__L_3___axiom

 val main__lines__equal__result [@name:Equal] [@model_trace:109603@result] [@model_projected]  : bool__ref 
 
 let def [#"mystring.ads" 12 0 0][@GP_Subp:mystring.ads:12] 
   (__void_param : unit)
  requires { [#"mystring.ads" 12 0 0] true }
  ensures { [#"mystring.ads" 12 0 0] ([#"mystring.ads" 13 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Id:248] [@GP_Sloc:mystring.ads:13:15:instantiated:main.adb:62:5] [@model_vc_post] [@comment:     Post => (if Equal'Result then               ^ mystring.ads:13:15:instantiated:main.adb:62:5:VC_POSTCONDITION] [@GP_Shape:pragargs__if] (if ((main__lines__equal__result.bool__content = True)) then (
   ( ( [@GP_Pretty_Ada:109572] [@GP_Sloc:mystring.ads:14:11:instantiated:main.adb:62:5] ((epsilon temp___result_541 : int.
    ( (temp___result_541 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_541 Main__lines__equal__m1.m1) )) = (epsilon temp___result_542 : int.
    ( (temp___result_542 = (Main__lines__length.length Main__lines__equal__m2.m2)) /\ (Main__lines__length.length__function_guard temp___result_542 Main__lines__equal__m2.m2) ))) ) /\ (forall i [#"mystring.ads" 13 0 0]  [@model_trace:109590] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_543 : int.
     ( (temp___result_543 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_543 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Sloc:mystring.ads:15:40:instantiated:main.adb:62:5] [@GP_Pretty_Ada:109580] ((epsilon temp___result_544 : int.
     ( (temp___result_544 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_544 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_545 : int.
     ( (temp___result_545 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_545 Main__lines__equal__m2.m2 i) ))) ) )) )) else (
   ( [@GP_Sloc:mystring.ads:13:15:instantiated:main.adb:62:5] [@GP_Pretty_Ada:110179] true ))) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:12 instantiated at main.adb:62 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m1.m1 True False True True) };
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__equal__m2.m2 True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:12 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:12 instantiated at main.adb:62 *)
  ;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:12 instantiated at main.adb:62 *)
  ;
   try
   ( ();
   ([#"mystring.adb" 53 0 0] ( [#"mystring.adb" 53 0 0] (Main__lines__equal__i.i.int__content <- ( (1 : int) ));
   [#"mystring.adb" 53 0 0] assume { [#"mystring.adb" 53 0 0] (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True False True True) } ));
   ([#"mystring.adb" 58 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:55:7:instantiated:main.adb:62:5] ([#"mystring.adb" 55 0 0] (if (( ([#"mystring.adb" 55 0 0] [#"mystring.adb" 55 0 0] (([@branch_id=138848] Main.spark__branch).bool__content <- ( ((Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) <> (Main__lines__mystring__T13b__rep.to_rep(Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length))) )));
   ( [@branch_id=138848] Main.spark__branch ).bool__content )) then (
    ( ();
    ( [@GP_Sloc:mystring.adb:56:10:instantiated:main.adb:62:5] ([#"mystring.adb" 56 0 0] ( [#"mystring.adb" 56 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
    [#"mystring.adb" 56 0 0] raise Return__exc )) ) )) else (
    ( ();
    ( [@GP_Sloc:mystring.adb:58:35:instantiated:main.adb:62:5] ([#"mystring.adb" 58 0 0] ( () (* Translation of an Ada loop from mystring.adb:58 instantiated at main.adb:62 *)
    ;
    (if ((Main__lines__equal__i.i.int__content <= (2048 : int))) then (
     [#"mystring.adb" 58 0 0] try
      ( [#"mystring.adb" 58 0 0] begin ensures {true} let _ = (let _ = Main__lines__equal__i.i.int__content in (
       ()))
       in () end ;
      (let temp___530 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 58 0 0] (val _f : int
      ensures {[#"mystring.adb" 58 0 0] (result = Main__lines__equal__i.i.int__content)} 
      in _f) in (
       ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:62 *)
       ;
       () (* While loop translating the Ada loop from mystring.adb:58 instantiated at main.adb:62 *)
       ;
       (let temp___inv_531 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j = [#"mystring.adb" 58 0 0] (val _f : int
       in _f) in (
        (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:62:5] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Id:242] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
          begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___532 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___532) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:62:5] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@GP_Id:243] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         )) = (Standard__character__rep.to_rep((let temp___533 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get(temp___533) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Id:244] [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:62:5] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
          j )))))
         ))) in (
          ()))
          in () end ))))
       ;
        (val _f : bool
       ensures { ( (result = True) <-> (forall j   [@model_trace:138889] [@name:J]  : int.
        ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___534 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___534 j)))
        ) = (Standard__character__rep.to_rep (let temp___535 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get temp___535 j)))
        )) )) )} 
       in _f) ))) in (
         begin ensures {true} let _ = (let _ = () in (
         ()))
         in () end ))
       ;
        while True do
        invariant { 
         ([#"mystring.adb" 59 0 0] ( [@GP_Id:245] [@GP_Reason:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:62:5] [@GP_Shape:if__L_3_while__pragargs__and] [@comment:            pragma Loop_Invariant (I >= M1.Str'First and                                    ^ mystring.adb:59:36:instantiated:main.adb:62:5:VC_LOOP_INVARIANT] ( ( [@GP_Pretty_Ada:138870] [@GP_Sloc:mystring.adb:59:36:instantiated:main.adb:62:5] (Main__lines__equal__i.i.int__content >= (1 : int)) ) /\ (forall j [#"mystring.adb" 59 0 0]  [@model_trace:138889] [@name:J]  : int.
          ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ( [@GP_Pretty_Ada:138877] [@GP_Sloc:mystring.adb:60:60:instantiated:main.adb:62:5] ((Standard__character__rep.to_rep (let temp___536 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___536 j)))
          ) = (Standard__character__rep.to_rep (let temp___537 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get temp___537 j)))
          )) ) )) ) ))
         }
        ( () (* Assume implicit invariants from the loop mystring.adb:58 instantiated at main.adb:62 *)
        ;
         assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Main__lines__equal__i.i.int__content True True True True) )/\true )) ((Main__lines__equal__i.i.int__content <= (2048 : int)))) };
        () (* Check for absence of RTE in the invariant of loop mystring.adb:58 instantiated at main.adb:62 *)
        ;
        () (* Loop statements appearing after the loop invariant of loop mystring.adb:58 instantiated at main.adb:62 *)
        ;
        ();
        ( [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:62:5] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:62:5] ([#"mystring.adb" 61 0 0] ()) );
        ( [@GP_Sloc:mystring.adb:61:13:instantiated:main.adb:62:5] ([#"mystring.adb" 61 0 0] (if (( ([#"mystring.adb" 61 0 0] [#"mystring.adb" 61 0 0] (([@branch_id=138902] Main.spark__branch).bool__content <- ( ((Standard__character__rep.to_rep((let temp___528 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___528) (( [#"mystring.adb" 61 0 0] assert { [#"mystring.adb" 61 0 0] ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@GP_Sloc:mystring.adb:61:23:instantiated:main.adb:62:5] [@GP_Reason:VC_INDEX_CHECK] [@comment:            if M1.Str(I) /= M2.Str(I) then                       ^ mystring.adb:61:23:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Id:240] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        )) <> (Standard__character__rep.to_rep((let temp___529 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
         (Array__Int__Standard__character.get(temp___529) ((  assert {  ([#"mystring.adb" 61 0 0] ( [@GP_Shape:if__L_3_while__if__cmp__ixdcomp] [@vc:annotation] [@comment:            if M1.Str(I) /= M2.Str(I) then                                    ^ mystring.adb:61:36:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:61:36:instantiated:main.adb:62:5] [@GP_Id:241] ( (Main__lines__TmystringstrD1.first <= Main__lines__equal__i.i.int__content) /\ (Main__lines__equal__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
         Main__lines__equal__i.i.int__content )))))
        ))) )));
        ( [@branch_id=138902] Main.spark__branch ).bool__content )) then (
         ( ();
         ( [@GP_Sloc:mystring.adb:62:16:instantiated:main.adb:62:5] ([#"mystring.adb" 62 0 0] ( [#"mystring.adb" 62 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((0 : int))) ));
         [#"mystring.adb" 62 0 0] raise Return__exc )) ) )) else (
         ( ();
         ( [@GP_Sloc:mystring.adb:64:16:instantiated:main.adb:62:5] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:21:instantiated:main.adb:62:5] ([#"mystring.adb" 64 0 0] ()) );
         ( [@GP_Sloc:mystring.adb:64:18:instantiated:main.adb:62:5] ([#"mystring.adb" 64 0 0] [#"mystring.adb" 64 0 0] (Main__lines__equal__i.i.int__content <- ( ([#"mystring.adb" 64 0 0] ( [@vc:annotation] [@GP_Id:239] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:64:23:instantiated:main.adb:62:5] [@GP_Shape:if__L_3_while__if__i_assign__add] [@comment:               I := I + 1;                       ^ mystring.adb:64:23:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content + (1 : int)))) )) ))) ) )))) );
        () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:58 instantiated at main.adb:62 *)
        ;
        (if (not ( (Main__lines__equal__i.i.int__content <= (2048 : int)) )) then (
          raise Main__lines__equal__L_3.L_3));
        (let temp___inv_531 [@mlw:proxy_symbol] [@introduced] = (Boolean.andb((Main__lines__equal__i.i.int__content >= (1 : int))) (( (let j =  (val _f : int
        in _f) in (
         (if ((Boolean.andb(((1 : int) <= j)) ((j <= ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@GP_Sloc:mystring.adb:60:54:instantiated:main.adb:62:5] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__range__sub] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                      ^ mystring.adb:60:54:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Id:242] (Standard__integer.range_check_((Main__lines__equal__i.i.int__content - (1 : int)))) )))))) then (
           begin ensures {true} let _ = (let _ = ((Standard__character__rep.to_rep((let temp___532 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___532) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                   ^ mystring.adb:60:67:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:60:67:instantiated:main.adb:62:5] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@GP_Id:243] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          )) = (Standard__character__rep.to_rep((let temp___533 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
           (Array__Int__Standard__character.get(temp___533) ((  assert {  ([#"mystring.adb" 60 0 0] ( [@GP_Id:244] [@vc:annotation] [@comment:                                   (for all J in 1..I-1 => M1.Str(J) = M2.Str(J)));                                                                               ^ mystring.adb:60:79:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Reason:VC_INDEX_CHECK] [@GP_Shape:if__L_3_while__pragargs__and__forall__cmp__ixdcomp] [@GP_Sloc:mystring.adb:60:79:instantiated:main.adb:62:5] ( (Main__lines__TmystringstrD1.first <= j) /\ (j <= Main__lines__TmystringstrD1.last) ) )) };
           j )))))
          ))) in (
           ()))
           in () end ))))
        ;
         (val _f : bool
        ensures { ( (result = True) <-> (forall j   [@model_trace:138889] [@name:J]  : int.
         ( ( ((1 : int) <= j) /\ (j <= (Main__lines__equal__i.i.int__content - (1 : int))) ) -> ((Standard__character__rep.to_rep (let temp___534 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m1.m1.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___534 j)))
         ) = (Standard__character__rep.to_rep (let temp___535 [@mlw:proxy_symbol] [@introduced] = Main__lines__equal__m2.m2.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
          (Array__Int__Standard__character.get temp___535 j)))
         )) )) )} 
        in _f) ))) in (
          begin ensures {true} let _ = (let _ = () in (
          ()))
          in () end ))
         )
       done )))
       )
     with
      Main__lines__equal__L_3.L_3 -> ()
     end)) )) );
    ( [@GP_Sloc:mystring.adb:67:10:instantiated:main.adb:62:5] ([#"mystring.adb" 67 0 0] ( [#"mystring.adb" 67 0 0] (main__lines__equal__result.bool__content <- ( (Boolean.of_int((1 : int))) ));
    [#"mystring.adb" 67 0 0] raise Return__exc )) ) )))) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = (if (main__lines__equal__result.bool__content) then (
   (Boolean.andb(((Main__lines__length___axiom.length(Main__lines__equal__m1.m1)) = (Main__lines__length___axiom.length(Main__lines__equal__m2.m2)))) (( (let i =  (val _f : int
   in _f) in (
    (if ((Boolean.andb(((1 : int) <= i)) ((i <= (Main__lines__length___axiom.length(Main__lines__equal__m1.m1)))))) then (
      begin ensures {true} let _ = (let _ = (([#"mystring.ads" 15 0 0] ( [@GP_Id:246] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                        ^ mystring.ads:15:40:instantiated:main.adb:62:5:VC_PRECONDITION] [@GP_Sloc:mystring.ads:15:40:instantiated:main.adb:62:5] (Main__lines__get___axiom.get(Main__lines__equal__m1.m1) (i)) )) = ([#"mystring.ads" 15 0 0] ( [@GP_Id:247] [@GP_Reason:VC_PRECONDITION] [@vc:annotation] [@GP_Shape:pragargs__if__and__forall__cmp__call_get] [@comment:        (for all I in 1..Length(M1) => Get(M1,I) = Get(M2,I)));                                                    ^ mystring.ads:15:52:instantiated:main.adb:62:5:VC_PRECONDITION] [@GP_Sloc:mystring.ads:15:52:instantiated:main.adb:62:5] (Main__lines__get___axiom.get(Main__lines__equal__m2.m2) (i)) ))) in (
      ()))
      in () end ))))
   ;
    (val _f : bool
   ensures { ( (result = True) <-> (forall i   [@model_trace:109590] [@name:I]  : int.
    ( ( ((1 : int) <= i) /\ (i <= (epsilon temp___result_538 : int.
     ( (temp___result_538 = (Main__lines__length.length Main__lines__equal__m1.m1)) /\ (Main__lines__length.length__function_guard temp___result_538 Main__lines__equal__m1.m1) ))) ) -> ( [@GP_Pretty_Ada:109580] ((epsilon temp___result_539 : int.
     ( (temp___result_539 = (Main__lines__get.get Main__lines__equal__m1.m1 i)) /\ (Main__lines__get.get__function_guard temp___result_539 Main__lines__equal__m1.m1 i) )) = (epsilon temp___result_540 : int.
     ( (temp___result_540 = (Main__lines__get.get Main__lines__equal__m2.m2 i)) /\ (Main__lines__get.get__function_guard temp___result_540 Main__lines__equal__m2.m2 i) ))) ) )) )} 
   in _f) )))) else (
   (Boolean.of_int((1 : int))))) in (
   ()))
   in () end ;
  main__lines__equal__result.bool__content )
end

(* Module for defining the value of the aggregate at mystring.adb:72 instantiated at main.adb:62, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Temp_____aggregate_def_546___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_546 as Temp_____aggregate_def_546
 use        Array__Int__Standard__character as Array__Int__Standard__character

 axiom def_axiom :
  (forall temp___548   : int.
   (let temp___547 [@mlw:proxy_symbol] [@introduced] = (Temp_____aggregate_def_546.temp_____aggregate_def_546 temp___548) in (
    (if ((Standard__character___axiom.dynamic_invariant temp___548 True True True True)) then (
     (forall temp___549   : int.
      ((Standard__character__rep.to_rep (Array__Int__Standard__character.get temp___547 temp___549)) = temp___548))) else true)))
  )

end

(* Module for checking contracts and absence of run-time errors in subprogram "substring" defined at mystring.ads:18 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__substring__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard__integer as Standard__integer
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__length as Main__lines__length
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m as Main__lines__substring__m
 use        Main__lines__substring__from as Main__lines__substring__from
 use        Main__lines__substring__to as Main__lines__substring__to
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__substring__r as Main__lines__substring__r
 use        Main__lines__substring__j as Main__lines__substring__j
 use        Main__lines__substring__L_4__i as Main__lines__substring__L_4__i
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Main__lines__substring__L_4 as Main__lines__substring__L_4
 use        Main__lines__substring__L_4__T83b as Main__lines__substring__L_4__T83b
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Temp_____aggregate_def_546 as Temp_____aggregate_def_546
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__lines__length___axiom as Main__lines__length___axiom
 use        Main__lines__substring__m___axiom as Main__lines__substring__m___axiom
 use        Main__lines__substring__from___axiom as Main__lines__substring__from___axiom
 use        Main__lines__substring__to___axiom as Main__lines__substring__to___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom
 use        Main__lines__substring__r___axiom as Main__lines__substring__r___axiom
 use        Main__lines__substring__j___axiom as Main__lines__substring__j___axiom
 use        Main__lines__substring__L_4___axiom as Main__lines__substring__L_4___axiom
 use        Main__lines__substring__L_4__i___axiom as Main__lines__substring__L_4__i___axiom
 use        Temp_____aggregate_def_546___axiom as Temp_____aggregate_def_546___axiom
 use        Main__lines__substring__L_4__T83b___axiom as Main__lines__substring__L_4__T83b___axiom

 val main__lines__substring__result [@model_projected] [@model_trace:109679@result] [@name:Substring]  : Main__lines__mystring.mystring__ref 
 
 let def [#"mystring.ads" 18 0 0][@GP_Subp:mystring.ads:18] 
   (__void_param : unit)
  requires { [#"mystring.ads" 18 0 0] true }
  ensures { [#"mystring.ads" 18 0 0] ([#"mystring.ads" 20 0 0] ( [@GP_Reason:VC_POSTCONDITION] [@GP_Shape:pragargs__cmp] [@comment:     Post => Length(Substring'Result) = To - From + 1;              ^ mystring.ads:20:14:instantiated:main.adb:62:5:VC_POSTCONDITION] [@model_vc_post] [@GP_Sloc:mystring.ads:20:14:instantiated:main.adb:62:5] [@GP_Id:258] ( [@GP_Pretty_Ada:110074] [@GP_Sloc:mystring.ads:20:14:instantiated:main.adb:62:5] ((epsilon temp___result_562 : int.
   ( (temp___result_562 = (Main__lines__length.length main__lines__substring__result.Main__lines__mystring.mystring__content)) /\ (Main__lines__length.length__function_guard temp___result_562 main__lines__substring__result.Main__lines__mystring.mystring__content) )) = ((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int))) ) )) }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:18 instantiated at main.adb:62 *)
  ;
   assume {  (Main__lines__mystring___axiom.dynamic_invariant Main__lines__substring__m.m True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__from.from True False True True) };
   assume {  (Standard__positive___axiom.dynamic_invariant Main__lines__substring__to.to__ True False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:18 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:18 instantiated at main.adb:62 *)
  ;
   begin ensures {true} let _ = (let _ = (Boolean.andb((Main__lines__substring__from.from <= Main__lines__substring__to.to__)) ((Main__lines__substring__to.to__ <= (Main__lines__length___axiom.length(Main__lines__substring__m.m))))) in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:18 instantiated at main.adb:62 *)
  ;
   assume {  ( ( [@GP_Pretty_Ada:109658] (Main__lines__substring__from.from <= Main__lines__substring__to.to__) ) /\ ( [@GP_Pretty_Ada:109661] (Main__lines__substring__to.to__ <= (epsilon temp___result_561 : int.
   ( (temp___result_561 = (Main__lines__length.length Main__lines__substring__m.m)) /\ (Main__lines__length.length__function_guard temp___result_561 Main__lines__substring__m.m) ))) ) ) };
   try
   ( ();
   ([#"mystring.adb" 72 0 0] ( (let main__lines__substring__r__assume = { Main__lines__mystring.__split_fields = { Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 72 0 0] ( [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:62:5] [@GP_Id:250] [@GP_Shape:r_decl__aggr__typeconv__add] (Main__lines__mystring__T13b.range_check_(([#"mystring.adb" 72 0 0] ( [@GP_Id:249] [@comment:      R : MyString := (Length => To - From + 1, Str => (others => ' '));                                            ^ mystring.adb:72:44:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:72:44:instantiated:main.adb:62:5] [@GP_Shape:r_decl__aggr__typeconv__add] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) )))) )))); Main__lines__mystring.rec__main__lines__mystring__str = (Temp_____aggregate_def_546.temp_____aggregate_def_546((32 : int))) } } in (
     (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( main__lines__substring__r__assume.Main__lines__mystring.__split_fields ))))
   ;
    assume {  (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True False True True) } ));
   ([#"mystring.adb" 73 0 0] ());
   ([#"mystring.adb" 73 0 0] ( [#"mystring.adb" 73 0 0] (Main__lines__substring__j.j.int__content <- ( (1 : int) ));
   [#"mystring.adb" 73 0 0] assume { [#"mystring.adb" 73 0 0] (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True False True True) } ));
   ([#"mystring.adb" 75 0 0] ());
   ();
   ( [@GP_Sloc:mystring.adb:75:25:instantiated:main.adb:62:5] ([#"mystring.adb" 75 0 0] (let temp___550 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__from.from in (
   (let temp___551 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__to.to__ in (
    ( [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( temp___550 ));
    () (* Translation of an Ada loop from mystring.adb:75 instantiated at main.adb:62 *)
    ;
    (if ((Boolean.andb((temp___550 <= Main__lines__substring__L_4__i.i.int__content)) ((Main__lines__substring__L_4__i.i.int__content <= temp___551)))) then (
     [#"mystring.adb" 75 0 0] try
      ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
       ()))
       in () end ;
      (let temp___558 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : Main__lines__mystring.mystring
      ensures {[#"mystring.adb" 75 0 0] (result = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content })} 
      in _f) in (
       ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__L_4__i.i.int__content in (
        ()))
        in () end ;
       (let temp___557 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
       ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__L_4__i.i.int__content)} 
       in _f) in (
        ( [#"mystring.adb" 75 0 0] begin ensures {true} let _ = (let _ = Main__lines__substring__j.j.int__content in (
         ()))
         in () end ;
        (let temp___556 [@mlw:proxy_symbol] [@introduced] = [#"mystring.adb" 75 0 0] (val _f : int
        ensures {[#"mystring.adb" 75 0 0] (result = Main__lines__substring__j.j.int__content)} 
        in _f) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:62 *)
         ;
         () (* While loop translating the Ada loop from mystring.adb:75 instantiated at main.adb:62 *)
         ;
         (let temp___inv_560 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Id:255] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:62:5] [@GP_Id:254] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
           begin ensures {true} let _ = (let _ = () in (
           ()))
           in () end ))
         ;
          while True do
          invariant { 
           ([#"mystring.adb" 76 0 0] ( [@GP_Reason:VC_LOOP_INVARIANT] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                 ^ mystring.adb:76:33:instantiated:main.adb:62:5:VC_LOOP_INVARIANT] [@vc:annotation] [@GP_Shape:L_4_while__pragargs__cmp] [@GP_Id:256] [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:62:5] ( [@GP_Pretty_Ada:139064] [@GP_Sloc:mystring.adb:76:33:instantiated:main.adb:62:5] (Main__lines__substring__j.j.int__content = ((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from) + (1 : int))) ) ))
           }
          ( () (* Assume implicit invariants from the loop mystring.adb:75 instantiated at main.adb:62 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (Standard__positive___axiom.dynamic_invariant Main__lines__substring__j.j.int__content True True True True) )/\true ) /\ (if (( True \/ (Main__lines__substring__from.from <= Main__lines__substring__to.to__) )) then (
           (Main__lines__substring__L_4__T83b.dynamic_property Main__lines__substring__from.from Main__lines__substring__to.to__ Main__lines__substring__L_4__i.i.int__content)) else true) )/\true ) /\ (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } True True True True) )/\({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length = temp___558.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length) )) (( (Main__lines__substring__from.from <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__substring__to.to__) ))) };
          () (* Check for absence of RTE in the invariant of loop mystring.adb:75 instantiated at main.adb:62 *)
          ;
          () (* Loop statements appearing after the loop invariant of loop mystring.adb:75 instantiated at main.adb:62 *)
          ;
          ();
          ( [@GP_Sloc:mystring.adb:77:10:instantiated:main.adb:62:5] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:62:5] ([#"mystring.adb" 77 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:77:19:instantiated:main.adb:62:5] ([#"mystring.adb" 77 0 0] (let temp___555 [@mlw:proxy_symbol] [@introduced] = (let temp___554 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } in (
           ( [#"mystring.adb" 77 0 0] begin ensures {true} let _ = (let _ = temp___554.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            ()))
            in () end ;
           { ( temp___554 ) with Main__lines__mystring.__split_fields = { ( temp___554.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___553 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
            (Array__Int__Standard__character.set({ Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (( [#"mystring.adb" 77 0 0] assert { [#"mystring.adb" 77 0 0] ([#"mystring.adb" 77 0 0] ( [@GP_Shape:L_4_while__r_assign__ixdcomp] [@comment:         R.Str(J) := M.Str(I);                ^ mystring.adb:77:16:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@vc:annotation] [@GP_Sloc:mystring.adb:77:16:instantiated:main.adb:62:5] [@GP_Id:252] [@GP_Reason:VC_INDEX_CHECK] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__j.j.int__content) /\ (Main__lines__substring__j.j.int__content <= Main__lines__TmystringstrD1.last) ) )) };
            Main__lines__substring__j.j.int__content )) ((Standard__character__rep.of_rep((Standard__character__rep.to_rep((let temp___552 [@mlw:proxy_symbol] [@introduced] = Main__lines__substring__m.m.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
             (Array__Int__Standard__character.get(temp___552) ((  assert {  ([#"mystring.adb" 77 0 0] ( [@GP_Shape:L_4_while__r_assign__ixdcomp] [@vc:annotation] [@comment:         R.Str(J) := M.Str(I);                            ^ mystring.adb:77:28:instantiated:main.adb:62:5:VC_INDEX_CHECK] [@GP_Id:251] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:mystring.adb:77:28:instantiated:main.adb:62:5] ( (Main__lines__TmystringstrD1.first <= Main__lines__substring__L_4__i.i.int__content) /\ (Main__lines__substring__L_4__i.i.int__content <= Main__lines__TmystringstrD1.last) ) )) };
             Main__lines__substring__L_4__i.i.int__content )))))
            ))))))))
            } } )))
           in (
            (Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___555.Main__lines__mystring.__split_fields ))))
          ) );
          ( [@GP_Sloc:mystring.adb:78:10:instantiated:main.adb:62:5] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:15:instantiated:main.adb:62:5] ([#"mystring.adb" 78 0 0] ()) );
          ( [@GP_Sloc:mystring.adb:78:12:instantiated:main.adb:62:5] ([#"mystring.adb" 78 0 0] [#"mystring.adb" 78 0 0] (Main__lines__substring__j.j.int__content <- ( ([#"mystring.adb" 78 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Id:253] [@comment:         J := J + 1;                 ^ mystring.adb:78:17:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Shape:L_4_while__j_assign__add] [@GP_Sloc:mystring.adb:78:17:instantiated:main.adb:62:5] (Standard__integer.range_check_((Main__lines__substring__j.j.int__content + (1 : int)))) )) ))) );
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop mystring.adb:75 instantiated at main.adb:62 *)
          ;
          (if ((Main__lines__substring__L_4__i.i.int__content = temp___551)) then (
            raise Main__lines__substring__L_4.L_4));
          ([#"mystring.adb" 75 0 0] [#"mystring.adb" 75 0 0] (Main__lines__substring__L_4__i.i.int__content <- ( (Main__lines__substring__L_4__i.i.int__content + (1 : int)) )));
          (let temp___inv_560 [@mlw:proxy_symbol] [@introduced] = (Main__lines__substring__j.j.int__content = ([#"mystring.adb" 76 0 0] ( [@GP_Shape:L_4_while__pragargs__cmp__add] [@GP_Sloc:mystring.adb:76:46:instantiated:main.adb:62:5] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:         pragma Loop_Invariant (J = I - From + 1);                                              ^ mystring.adb:76:46:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Id:255] (Standard__integer.range_check_((([#"mystring.adb" 76 0 0] ( [@comment:         pragma Loop_Invariant (J = I - From + 1);                                       ^ mystring.adb:76:39:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.adb:76:39:instantiated:main.adb:62:5] [@GP_Id:254] [@GP_Shape:L_4_while__pragargs__cmp__add__sub] (Standard__integer.range_check_((Main__lines__substring__L_4__i.i.int__content - Main__lines__substring__from.from))) )) + (1 : int)))) ))) in (
            begin ensures {true} let _ = (let _ = () in (
            ()))
            in () end ))
           )
         done )))
         )))
        )))
       )
     with
      Main__lines__substring__L_4.L_4 -> ()
     end)) )))
   ))
   ) );
   ( [@GP_Sloc:mystring.adb:80:14:instantiated:main.adb:62:5] ([#"mystring.adb" 80 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:80:7:instantiated:main.adb:62:5] ([#"mystring.adb" 80 0 0] ( [#"mystring.adb" 80 0 0] (main__lines__substring__result.Main__lines__mystring.mystring__content <- ( { Main__lines__mystring.__split_fields = Main__lines__substring__r.r__split_fields.Main__lines__mystring.__split_fields__content } ));
   [#"mystring.adb" 80 0 0] raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = ((Main__lines__length___axiom.length(main__lines__substring__result.Main__lines__mystring.mystring__content)) = ([#"mystring.ads" 20 0 0] ( [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@GP_Sloc:mystring.ads:20:51:instantiated:main.adb:62:5] [@GP_Shape:pragargs__cmp__add] [@comment:     Post => Length(Substring'Result) = To - From + 1;                                                   ^ mystring.ads:20:51:instantiated:main.adb:62:5:VC_OVERFLOW_CHECK] [@GP_Id:257] (Standard__integer.range_check_(((Main__lines__substring__to.to__ - Main__lines__substring__from.from) + (1 : int)))) ))) in (
   ()))
   in () end ;
  main__lines__substring__result.Main__lines__mystring.mystring__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "get_line" defined at mystring.ads:23 instantiated at main.adb:62, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__lines__get_line__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__string as Standard__string
 use        Standard__integer__rep as Standard__integer__rep
 use        Main__lines__mystring as Main__lines__mystring
 use        Main__lines__get_line__m as Main__lines__get_line__m
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__mystring__T13b as Main__lines__mystring__T13b
 use        Main__lines__mystring__T13b__rep as Main__lines__mystring__T13b__rep
 use        Main__lines__TmystringstrD1 as Main__lines__TmystringstrD1
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__natural___axiom as Standard__natural___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Ada__text_io__count___axiom as Ada__text_io__count___axiom
 use        Ada__text_io__line_length__2___axiom as Ada__text_io__line_length__2___axiom
 use        Ada__text_io__page_length__2___axiom as Ada__text_io__page_length__2___axiom
 use        Ada__text_io__get_line__2___axiom as Ada__text_io__get_line__2___axiom
 use        Main__lines__get_line__m___axiom as Main__lines__get_line__m___axiom
 use        Main__lines__mystringstr___axiom as Main__lines__mystringstr___axiom
 use        Main__lines__mystring___axiom as Main__lines__mystring___axiom
 use        Main__lines__TmystringstrD1___axiom as Main__lines__TmystringstrD1___axiom
 use        Main__lines__mystring__T13b___axiom as Main__lines__mystring__T13b___axiom

 let def [#"mystring.ads" 23 0 0][@GP_Subp:mystring.ads:23] 
   (__void_param : unit)
  requires { [#"mystring.ads" 23 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram mystring.ads:23 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 23 0 0] assume { [#"mystring.ads" 23 0 0] (Main__lines__mystring___axiom.dynamic_invariant { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } False False True True) };
  () (* Declarations introduced by the compiler at the beginning of the subprogram mystring.ads:23 instantiated at main.adb:62 *)
  ;
  () (* Check for RTE in the Pre of the subprogram mystring.ads:23 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 23 0 0] begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram mystring.ads:23 instantiated at main.adb:62 *)
  ;
  [#"mystring.ads" 23 0 0] try
   ( ();
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:62:5] ([#"mystring.adb" 85 0 0] ()) );
   ( [@GP_Sloc:mystring.adb:85:18:instantiated:main.adb:62:5] ([#"mystring.adb" 85 0 0] (let ada__text_io__get_line__2__item__compl = ( [#"mystring.adb" 85 0 0] assert { [#"mystring.adb" 85 0 0] ([#"mystring.adb" 85 0 0] ( [@GP_Sloc:mystring.adb:85:44:instantiated:main.adb:62:5] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                            ^ mystring.adb:85:44:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@vc:annotation] [@GP_Reason:VC_RANGE_CHECK] [@GP_Shape:call_get_line__2__typeconv__selectcomp] [@GP_Id:259] (Standard__string.dynamic_property(Standard__positive.first) (Standard__positive.last) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) )) };
   (Standard__string.of_array({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str) (Main__lines__TmystringstrD1.first) (Main__lines__TmystringstrD1.last)) ) in (
     let ada__text_io__get_line__2__last = { int__content = (Main__lines__mystring__T13b__rep.to_rep({ Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content }.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length)) } in 
     let ada__text_io__get_line__2__item = { Array__Int__Standard__character.map__content = (Standard__string.to_array(ada__text_io__get_line__2__item__compl)) } in 
     ( (Ada__text_io__get_line__2___axiom.get_line__2(ada__text_io__get_line__2__item) ((Standard__integer__rep.of_rep((Standard__string.first(ada__text_io__get_line__2__item__compl))))) ((Standard__integer__rep.of_rep((Standard__string.last(ada__text_io__get_line__2__item__compl))))) (ada__text_io__get_line__2__last));
     (let temp___565 [@mlw:proxy_symbol] [@introduced] = (let temp___564 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___564.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__str in (
       ()))
       in () end ;
      { ( temp___564 ) with Main__lines__mystring.__split_fields = { ( temp___564.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__str = (let temp___563 [@mlw:proxy_symbol] [@introduced] = (Standard__string.of_array(ada__text_io__get_line__2__item.Array__Int__Standard__character.map__content) ((Standard__string.first(ada__text_io__get_line__2__item__compl))) ((Standard__string.last(ada__text_io__get_line__2__item__compl)))) in (
       (Array__Int__Standard__character.slide((Standard__string.to_array(temp___563))) ((Standard__string.first(temp___563))) (Main__lines__TmystringstrD1.first))))
       } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___565.Main__lines__mystring.__split_fields ))))
     ;
     (let temp___567 [@mlw:proxy_symbol] [@introduced] = (let temp___566 [@mlw:proxy_symbol] [@introduced] = { Main__lines__mystring.__split_fields = Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content } in (
      (  begin ensures {true} let _ = (let _ = temp___566.Main__lines__mystring.__split_fields.Main__lines__mystring.rec__main__lines__mystring__length in (
       ()))
       in () end ;
      { ( temp___566 ) with Main__lines__mystring.__split_fields = { ( temp___566.Main__lines__mystring.__split_fields ) with Main__lines__mystring.rec__main__lines__mystring__length = (Main__lines__mystring__T13b__rep.of_rep(([#"mystring.adb" 85 0 0] ( [@vc:annotation] [@GP_Id:260] [@GP_Shape:call_get_line__2__selectcomp] [@GP_Reason:VC_RANGE_CHECK] [@comment:      Ada.Text_IO.Get_Line(Item => String(M.Str), Last => M.Length);                                                            ^ mystring.adb:85:60:instantiated:main.adb:62:5:VC_RANGE_CHECK] [@GP_Sloc:mystring.adb:85:60:instantiated:main.adb:62:5] (Main__lines__mystring__T13b.range_check_(ada__text_io__get_line__2__last.int__content)) )))) } } )))
      in (
       (Main__lines__get_line__m.m__split_fields.Main__lines__mystring.__split_fields__content <- ( temp___567.Main__lines__mystring.__split_fields ))))
      )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _ = True in (
   ()))
   in () end  )
end
